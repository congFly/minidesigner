/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 47);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\r\n * jQuery JavaScript Library v2.2.2\r\n * http://jquery.com/\r\n *\r\n * Includes Sizzle.js\r\n * http://sizzlejs.com/\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2016-03-17T17:51Z\r\n */\r\n\r\n(function( global, factory ) {\r\n\r\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\r\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\r\n\t\t// is present, execute the factory and get jQuery.\r\n\t\t// For environments that do not have a `window` with a `document`\r\n\t\t// (such as Node.js), expose a factory as module.exports.\r\n\t\t// This accentuates the need for the creation of a real `window`.\r\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\r\n\t\t// See ticket #14549 for more info.\r\n\t\tmodule.exports = global.document ?\r\n\t\t\tfactory( global, true ) :\r\n\t\t\tfunction( w ) {\r\n\t\t\t\tif ( !w.document ) {\r\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\r\n\t\t\t\t}\r\n\t\t\t\treturn factory( w );\r\n\t\t\t};\r\n\t} else {\r\n\t\tfactory( global );\r\n\t}\r\n\r\n// Pass this if window is not defined yet\r\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\r\n\r\n// Support: Firefox 18+\r\n// Can't be in strict mode, several libs including ASP.NET trace\r\n// the stack via arguments.caller.callee and Firefox dies if\r\n// you try to trace through \"use strict\" call chains. (#13335)\r\n//\"use strict\";\r\nvar arr = [];\r\n\r\nvar document = window.document;\r\n\r\nvar slice = arr.slice;\r\n\r\nvar concat = arr.concat;\r\n\r\nvar push = arr.push;\r\n\r\nvar indexOf = arr.indexOf;\r\n\r\nvar class2type = {};\r\n\r\nvar toString = class2type.toString;\r\n\r\nvar hasOwn = class2type.hasOwnProperty;\r\n\r\nvar support = {};\r\n\r\n\r\n\r\nvar\r\n\tversion = \"2.2.2\",\r\n\r\n\t// Define a local copy of jQuery\r\n\tjQuery = function( selector, context ) {\r\n\r\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\r\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\r\n\t\treturn new jQuery.fn.init( selector, context );\r\n\t},\r\n\r\n\t// Support: Android<4.1\r\n\t// Make sure we trim BOM and NBSP\r\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\r\n\r\n\t// Matches dashed string for camelizing\r\n\trmsPrefix = /^-ms-/,\r\n\trdashAlpha = /-([\\da-z])/gi,\r\n\r\n\t// Used by jQuery.camelCase as callback to replace()\r\n\tfcamelCase = function( all, letter ) {\r\n\t\treturn letter.toUpperCase();\r\n\t};\r\n\r\njQuery.fn = jQuery.prototype = {\r\n\r\n\t// The current version of jQuery being used\r\n\tjquery: version,\r\n\r\n\tconstructor: jQuery,\r\n\r\n\t// Start with an empty selector\r\n\tselector: \"\",\r\n\r\n\t// The default length of a jQuery object is 0\r\n\tlength: 0,\r\n\r\n\ttoArray: function() {\r\n\t\treturn slice.call( this );\r\n\t},\r\n\r\n\t// Get the Nth element in the matched element set OR\r\n\t// Get the whole matched element set as a clean array\r\n\tget: function( num ) {\r\n\t\treturn num != null ?\r\n\r\n\t\t\t// Return just the one element from the set\r\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\r\n\r\n\t\t\t// Return all the elements in a clean array\r\n\t\t\tslice.call( this );\r\n\t},\r\n\r\n\t// Take an array of elements and push it onto the stack\r\n\t// (returning the new matched element set)\r\n\tpushStack: function( elems ) {\r\n\r\n\t\t// Build a new jQuery matched element set\r\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\r\n\r\n\t\t// Add the old object onto the stack (as a reference)\r\n\t\tret.prevObject = this;\r\n\t\tret.context = this.context;\r\n\r\n\t\t// Return the newly-formed element set\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t// Execute a callback for every element in the matched set.\r\n\teach: function( callback ) {\r\n\t\treturn jQuery.each( this, callback );\r\n\t},\r\n\r\n\tmap: function( callback ) {\r\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\r\n\t\t\treturn callback.call( elem, i, elem );\r\n\t\t} ) );\r\n\t},\r\n\r\n\tslice: function() {\r\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\r\n\t},\r\n\r\n\tfirst: function() {\r\n\t\treturn this.eq( 0 );\r\n\t},\r\n\r\n\tlast: function() {\r\n\t\treturn this.eq( -1 );\r\n\t},\r\n\r\n\teq: function( i ) {\r\n\t\tvar len = this.length,\r\n\t\t\tj = +i + ( i < 0 ? len : 0 );\r\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\r\n\t},\r\n\r\n\tend: function() {\r\n\t\treturn this.prevObject || this.constructor();\r\n\t},\r\n\r\n\t// For internal use only.\r\n\t// Behaves like an Array's method, not like a jQuery method.\r\n\tpush: push,\r\n\tsort: arr.sort,\r\n\tsplice: arr.splice\r\n};\r\n\r\njQuery.extend = jQuery.fn.extend = function() {\r\n\tvar options, name, src, copy, copyIsArray, clone,\r\n\t\ttarget = arguments[ 0 ] || {},\r\n\t\ti = 1,\r\n\t\tlength = arguments.length,\r\n\t\tdeep = false;\r\n\r\n\t// Handle a deep copy situation\r\n\tif ( typeof target === \"boolean\" ) {\r\n\t\tdeep = target;\r\n\r\n\t\t// Skip the boolean and the target\r\n\t\ttarget = arguments[ i ] || {};\r\n\t\ti++;\r\n\t}\r\n\r\n\t// Handle case when target is a string or something (possible in deep copy)\r\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\r\n\t\ttarget = {};\r\n\t}\r\n\r\n\t// Extend jQuery itself if only one argument is passed\r\n\tif ( i === length ) {\r\n\t\ttarget = this;\r\n\t\ti--;\r\n\t}\r\n\r\n\tfor ( ; i < length; i++ ) {\r\n\r\n\t\t// Only deal with non-null/undefined values\r\n\t\tif ( ( options = arguments[ i ] ) != null ) {\r\n\r\n\t\t\t// Extend the base object\r\n\t\t\tfor ( name in options ) {\r\n\t\t\t\tsrc = target[ name ];\r\n\t\t\t\tcopy = options[ name ];\r\n\r\n\t\t\t\t// Prevent never-ending loop\r\n\t\t\t\tif ( target === copy ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Recurse if we're merging plain objects or arrays\r\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\r\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\r\n\r\n\t\t\t\t\tif ( copyIsArray ) {\r\n\t\t\t\t\t\tcopyIsArray = false;\r\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Never move original objects, clone them\r\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\r\n\r\n\t\t\t\t// Don't bring in undefined values\r\n\t\t\t\t} else if ( copy !== undefined ) {\r\n\t\t\t\t\ttarget[ name ] = copy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the modified object\r\n\treturn target;\r\n};\r\n\r\njQuery.extend( {\r\n\r\n\t// Unique for each copy of jQuery on the page\r\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\r\n\r\n\t// Assume jQuery is ready without the ready module\r\n\tisReady: true,\r\n\r\n\terror: function( msg ) {\r\n\t\tthrow new Error( msg );\r\n\t},\r\n\r\n\tnoop: function() {},\r\n\r\n\tisFunction: function( obj ) {\r\n\t\treturn jQuery.type( obj ) === \"function\";\r\n\t},\r\n\r\n\tisArray: Array.isArray,\r\n\r\n\tisWindow: function( obj ) {\r\n\t\treturn obj != null && obj === obj.window;\r\n\t},\r\n\r\n\tisNumeric: function( obj ) {\r\n\r\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\r\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\r\n\t\t// subtraction forces infinities to NaN\r\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\r\n\t\tvar realStringObj = obj && obj.toString();\r\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\r\n\t},\r\n\r\n\tisPlainObject: function( obj ) {\r\n\t\tvar key;\r\n\r\n\t\t// Not plain objects:\r\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\r\n\t\t// - DOM nodes\r\n\t\t// - window\r\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Not own constructor property must be Object\r\n\t\tif ( obj.constructor &&\r\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\r\n\t\t\t\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// Own properties are enumerated firstly, so to speed up,\r\n\t\t// if last one is own, then all properties are own\r\n\t\tfor ( key in obj ) {}\r\n\r\n\t\treturn key === undefined || hasOwn.call( obj, key );\r\n\t},\r\n\r\n\tisEmptyObject: function( obj ) {\r\n\t\tvar name;\r\n\t\tfor ( name in obj ) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\ttype: function( obj ) {\r\n\t\tif ( obj == null ) {\r\n\t\t\treturn obj + \"\";\r\n\t\t}\r\n\r\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\r\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\r\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\r\n\t\t\ttypeof obj;\r\n\t},\r\n\r\n\t// Evaluates a script in a global context\r\n\tglobalEval: function( code ) {\r\n\t\tvar script,\r\n\t\t\tindirect = eval;\r\n\r\n\t\tcode = jQuery.trim( code );\r\n\r\n\t\tif ( code ) {\r\n\r\n\t\t\t// If the code includes a valid, prologue position\r\n\t\t\t// strict mode pragma, execute code by injecting a\r\n\t\t\t// script tag into the document.\r\n\t\t\tif ( code.indexOf( \"use strict\" ) === 1 ) {\r\n\t\t\t\tscript = document.createElement( \"script\" );\r\n\t\t\t\tscript.text = code;\r\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\r\n\t\t\t\t// and removal by using an indirect global eval\r\n\r\n\t\t\t\tindirect( code );\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Convert dashed to camelCase; used by the css and data modules\r\n\t// Support: IE9-11+\r\n\t// Microsoft forgot to hump their vendor prefix (#9572)\r\n\tcamelCase: function( string ) {\r\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\r\n\t},\r\n\r\n\tnodeName: function( elem, name ) {\r\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\r\n\t},\r\n\r\n\teach: function( obj, callback ) {\r\n\t\tvar length, i = 0;\r\n\r\n\t\tif ( isArrayLike( obj ) ) {\r\n\t\t\tlength = obj.length;\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor ( i in obj ) {\r\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn obj;\r\n\t},\r\n\r\n\t// Support: Android<4.1\r\n\ttrim: function( text ) {\r\n\t\treturn text == null ?\r\n\t\t\t\"\" :\r\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\r\n\t},\r\n\r\n\t// results is for internal usage only\r\n\tmakeArray: function( arr, results ) {\r\n\t\tvar ret = results || [];\r\n\r\n\t\tif ( arr != null ) {\r\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\r\n\t\t\t\tjQuery.merge( ret,\r\n\t\t\t\t\ttypeof arr === \"string\" ?\r\n\t\t\t\t\t[ arr ] : arr\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tpush.call( ret, arr );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t},\r\n\r\n\tinArray: function( elem, arr, i ) {\r\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\r\n\t},\r\n\r\n\tmerge: function( first, second ) {\r\n\t\tvar len = +second.length,\r\n\t\t\tj = 0,\r\n\t\t\ti = first.length;\r\n\r\n\t\tfor ( ; j < len; j++ ) {\r\n\t\t\tfirst[ i++ ] = second[ j ];\r\n\t\t}\r\n\r\n\t\tfirst.length = i;\r\n\r\n\t\treturn first;\r\n\t},\r\n\r\n\tgrep: function( elems, callback, invert ) {\r\n\t\tvar callbackInverse,\r\n\t\t\tmatches = [],\r\n\t\t\ti = 0,\r\n\t\t\tlength = elems.length,\r\n\t\t\tcallbackExpect = !invert;\r\n\r\n\t\t// Go through the array, only saving the items\r\n\t\t// that pass the validator function\r\n\t\tfor ( ; i < length; i++ ) {\r\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\r\n\t\t\tif ( callbackInverse !== callbackExpect ) {\r\n\t\t\t\tmatches.push( elems[ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn matches;\r\n\t},\r\n\r\n\t// arg is for internal usage only\r\n\tmap: function( elems, callback, arg ) {\r\n\t\tvar length, value,\r\n\t\t\ti = 0,\r\n\t\t\tret = [];\r\n\r\n\t\t// Go through the array, translating each of the items to their new values\r\n\t\tif ( isArrayLike( elems ) ) {\r\n\t\t\tlength = elems.length;\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Go through every key on the object,\r\n\t\t} else {\r\n\t\t\tfor ( i in elems ) {\r\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\r\n\r\n\t\t\t\tif ( value != null ) {\r\n\t\t\t\t\tret.push( value );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Flatten any nested arrays\r\n\t\treturn concat.apply( [], ret );\r\n\t},\r\n\r\n\t// A global GUID counter for objects\r\n\tguid: 1,\r\n\r\n\t// Bind a function to a context, optionally partially applying any\r\n\t// arguments.\r\n\tproxy: function( fn, context ) {\r\n\t\tvar tmp, args, proxy;\r\n\r\n\t\tif ( typeof context === \"string\" ) {\r\n\t\t\ttmp = fn[ context ];\r\n\t\t\tcontext = fn;\r\n\t\t\tfn = tmp;\r\n\t\t}\r\n\r\n\t\t// Quick check to determine if target is callable, in the spec\r\n\t\t// this throws a TypeError, but we will just return undefined.\r\n\t\tif ( !jQuery.isFunction( fn ) ) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\r\n\t\t// Simulated bind\r\n\t\targs = slice.call( arguments, 2 );\r\n\t\tproxy = function() {\r\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\r\n\t\t};\r\n\r\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\r\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\r\n\r\n\t\treturn proxy;\r\n\t},\r\n\r\n\tnow: Date.now,\r\n\r\n\t// jQuery.support is not used in Core but other projects attach their\r\n\t// properties to it so it needs to exist.\r\n\tsupport: support\r\n} );\r\n\r\n// JSHint would error on this code due to the Symbol not being defined in ES5.\r\n// Defining this global in .jshintrc would create a danger of using the global\r\n// unguarded in another place, it seems safer to just disable JSHint for these\r\n// three lines.\r\n/* jshint ignore: start */\r\nif ( typeof Symbol === \"function\" ) {\r\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\r\n}\r\n/* jshint ignore: end */\r\n\r\n// Populate the class2type map\r\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\r\nfunction( i, name ) {\r\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\r\n} );\r\n\r\nfunction isArrayLike( obj ) {\r\n\r\n\t// Support: iOS 8.2 (not reproducible in simulator)\r\n\t// `in` check used to prevent JIT error (gh-2145)\r\n\t// hasOwn isn't used here due to false negatives\r\n\t// regarding Nodelist length in IE\r\n\tvar length = !!obj && \"length\" in obj && obj.length,\r\n\t\ttype = jQuery.type( obj );\r\n\r\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn type === \"array\" || length === 0 ||\r\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\r\n}\r\nvar Sizzle =\r\n/*!\r\n * Sizzle CSS Selector Engine v2.2.1\r\n * http://sizzlejs.com/\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license\r\n * http://jquery.org/license\r\n *\r\n * Date: 2015-10-17\r\n */\r\n(function( window ) {\r\n\r\nvar i,\r\n\tsupport,\r\n\tExpr,\r\n\tgetText,\r\n\tisXML,\r\n\ttokenize,\r\n\tcompile,\r\n\tselect,\r\n\toutermostContext,\r\n\tsortInput,\r\n\thasDuplicate,\r\n\r\n\t// Local document vars\r\n\tsetDocument,\r\n\tdocument,\r\n\tdocElem,\r\n\tdocumentIsHTML,\r\n\trbuggyQSA,\r\n\trbuggyMatches,\r\n\tmatches,\r\n\tcontains,\r\n\r\n\t// Instance-specific data\r\n\texpando = \"sizzle\" + 1 * new Date(),\r\n\tpreferredDoc = window.document,\r\n\tdirruns = 0,\r\n\tdone = 0,\r\n\tclassCache = createCache(),\r\n\ttokenCache = createCache(),\r\n\tcompilerCache = createCache(),\r\n\tsortOrder = function( a, b ) {\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t// General-purpose constants\r\n\tMAX_NEGATIVE = 1 << 31,\r\n\r\n\t// Instance methods\r\n\thasOwn = ({}).hasOwnProperty,\r\n\tarr = [],\r\n\tpop = arr.pop,\r\n\tpush_native = arr.push,\r\n\tpush = arr.push,\r\n\tslice = arr.slice,\r\n\t// Use a stripped-down indexOf as it's faster than native\r\n\t// http://jsperf.com/thor-indexof-vs-for/5\r\n\tindexOf = function( list, elem ) {\r\n\t\tvar i = 0,\r\n\t\t\tlen = list.length;\r\n\t\tfor ( ; i < len; i++ ) {\r\n\t\t\tif ( list[i] === elem ) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t},\r\n\r\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\r\n\r\n\t// Regular expressions\r\n\r\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\r\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\r\n\r\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\r\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\r\n\r\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\r\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\r\n\t\t// Operator (capture 2)\r\n\t\t\"*([*^$|!~]?=)\" + whitespace +\r\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\r\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\r\n\t\t\"*\\\\]\",\r\n\r\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\r\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\r\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\r\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\r\n\t\t// 2. simple (capture 6)\r\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\r\n\t\t// 3. anything else (capture 2)\r\n\t\t\".*\" +\r\n\t\t\")\\\\)|)\",\r\n\r\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\r\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\r\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\r\n\r\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\r\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\r\n\r\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\r\n\r\n\trpseudo = new RegExp( pseudos ),\r\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\r\n\r\n\tmatchExpr = {\r\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\r\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\r\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\r\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\r\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\r\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\r\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\r\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\r\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\r\n\t\t// For use in libraries implementing .is()\r\n\t\t// We use this for POS matching in `select`\r\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\r\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\r\n\t},\r\n\r\n\trinputs = /^(?:input|select|textarea|button)$/i,\r\n\trheader = /^h\\d$/i,\r\n\r\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\r\n\r\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\r\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\r\n\r\n\trsibling = /[+~]/,\r\n\trescape = /'|\\\\/g,\r\n\r\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\r\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\r\n\tfunescape = function( _, escaped, escapedWhitespace ) {\r\n\t\tvar high = \"0x\" + escaped - 0x10000;\r\n\t\t// NaN means non-codepoint\r\n\t\t// Support: Firefox<24\r\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\r\n\t\treturn high !== high || escapedWhitespace ?\r\n\t\t\tescaped :\r\n\t\t\thigh < 0 ?\r\n\t\t\t\t// BMP codepoint\r\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\r\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\r\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\r\n\t},\r\n\r\n\t// Used for iframes\r\n\t// See setDocument()\r\n\t// Removing the function wrapper causes a \"Permission Denied\"\r\n\t// error in IE\r\n\tunloadHandler = function() {\r\n\t\tsetDocument();\r\n\t};\r\n\r\n// Optimize for push.apply( _, NodeList )\r\ntry {\r\n\tpush.apply(\r\n\t\t(arr = slice.call( preferredDoc.childNodes )),\r\n\t\tpreferredDoc.childNodes\r\n\t);\r\n\t// Support: Android<4.0\r\n\t// Detect silently failing push.apply\r\n\tarr[ preferredDoc.childNodes.length ].nodeType;\r\n} catch ( e ) {\r\n\tpush = { apply: arr.length ?\r\n\r\n\t\t// Leverage slice if possible\r\n\t\tfunction( target, els ) {\r\n\t\t\tpush_native.apply( target, slice.call(els) );\r\n\t\t} :\r\n\r\n\t\t// Support: IE<9\r\n\t\t// Otherwise append directly\r\n\t\tfunction( target, els ) {\r\n\t\t\tvar j = target.length,\r\n\t\t\t\ti = 0;\r\n\t\t\t// Can't trust NodeList.length\r\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\r\n\t\t\ttarget.length = j - 1;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction Sizzle( selector, context, results, seed ) {\r\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\r\n\t\tnewContext = context && context.ownerDocument,\r\n\r\n\t\t// nodeType defaults to 9, since context defaults to document\r\n\t\tnodeType = context ? context.nodeType : 9;\r\n\r\n\tresults = results || [];\r\n\r\n\t// Return early from calls with invalid selector or context\r\n\tif ( typeof selector !== \"string\" || !selector ||\r\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\r\n\r\n\t\treturn results;\r\n\t}\r\n\r\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\r\n\tif ( !seed ) {\r\n\r\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\r\n\t\t\tsetDocument( context );\r\n\t\t}\r\n\t\tcontext = context || document;\r\n\r\n\t\tif ( documentIsHTML ) {\r\n\r\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\r\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\r\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\r\n\r\n\t\t\t\t// ID selector\r\n\t\t\t\tif ( (m = match[1]) ) {\r\n\r\n\t\t\t\t\t// Document context\r\n\t\t\t\t\tif ( nodeType === 9 ) {\r\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\r\n\r\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\r\n\t\t\t\t\t\t\t// TODO: identify versions\r\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\r\n\t\t\t\t\t\t\tif ( elem.id === m ) {\r\n\t\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Element context\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\r\n\t\t\t\t\t\t// TODO: identify versions\r\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\r\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\r\n\t\t\t\t\t\t\tcontains( context, elem ) &&\r\n\t\t\t\t\t\t\telem.id === m ) {\r\n\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t// Type selector\r\n\t\t\t\t} else if ( match[2] ) {\r\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\r\n\t\t\t\t\treturn results;\r\n\r\n\t\t\t\t// Class selector\r\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\r\n\t\t\t\t\tcontext.getElementsByClassName ) {\r\n\r\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\r\n\t\t\t\t\treturn results;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Take advantage of querySelectorAll\r\n\t\t\tif ( support.qsa &&\r\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\r\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\r\n\r\n\t\t\t\tif ( nodeType !== 1 ) {\r\n\t\t\t\t\tnewContext = context;\r\n\t\t\t\t\tnewSelector = selector;\r\n\r\n\t\t\t\t// qSA looks outside Element context, which is not what we want\r\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\r\n\t\t\t\t// Support: IE <=8\r\n\t\t\t\t// Exclude object elements\r\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\r\n\r\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\r\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\r\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prefix every selector in the list\r\n\t\t\t\t\tgroups = tokenize( selector );\r\n\t\t\t\t\ti = groups.length;\r\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnewSelector = groups.join( \",\" );\r\n\r\n\t\t\t\t\t// Expand context for sibling selectors\r\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\r\n\t\t\t\t\t\tcontext;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( newSelector ) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tpush.apply( results,\r\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t} catch ( qsaError ) {\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tif ( nid === expando ) {\r\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// All others\r\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\r\n}\r\n\r\n/**\r\n * Create key-value caches of limited size\r\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\r\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\r\n *\tdeleting the oldest entry\r\n */\r\nfunction createCache() {\r\n\tvar keys = [];\r\n\r\n\tfunction cache( key, value ) {\r\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\r\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\r\n\t\t\t// Only keep the most recent entries\r\n\t\t\tdelete cache[ keys.shift() ];\r\n\t\t}\r\n\t\treturn (cache[ key + \" \" ] = value);\r\n\t}\r\n\treturn cache;\r\n}\r\n\r\n/**\r\n * Mark a function for special use by Sizzle\r\n * @param {Function} fn The function to mark\r\n */\r\nfunction markFunction( fn ) {\r\n\tfn[ expando ] = true;\r\n\treturn fn;\r\n}\r\n\r\n/**\r\n * Support testing using an element\r\n * @param {Function} fn Passed the created div and expects a boolean result\r\n */\r\nfunction assert( fn ) {\r\n\tvar div = document.createElement(\"div\");\r\n\r\n\ttry {\r\n\t\treturn !!fn( div );\r\n\t} catch (e) {\r\n\t\treturn false;\r\n\t} finally {\r\n\t\t// Remove from its parent by default\r\n\t\tif ( div.parentNode ) {\r\n\t\t\tdiv.parentNode.removeChild( div );\r\n\t\t}\r\n\t\t// release memory in IE\r\n\t\tdiv = null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Adds the same handler for all of the specified attrs\r\n * @param {String} attrs Pipe-separated list of attributes\r\n * @param {Function} handler The method that will be applied\r\n */\r\nfunction addHandle( attrs, handler ) {\r\n\tvar arr = attrs.split(\"|\"),\r\n\t\ti = arr.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tExpr.attrHandle[ arr[i] ] = handler;\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks document order of two siblings\r\n * @param {Element} a\r\n * @param {Element} b\r\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\r\n */\r\nfunction siblingCheck( a, b ) {\r\n\tvar cur = b && a,\r\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\r\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\r\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\r\n\r\n\t// Use IE sourceIndex if available on both nodes\r\n\tif ( diff ) {\r\n\t\treturn diff;\r\n\t}\r\n\r\n\t// Check if b follows a\r\n\tif ( cur ) {\r\n\t\twhile ( (cur = cur.nextSibling) ) {\r\n\t\t\tif ( cur === b ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn a ? 1 : -1;\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for input types\r\n * @param {String} type\r\n */\r\nfunction createInputPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn name === \"input\" && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for buttons\r\n * @param {String} type\r\n */\r\nfunction createButtonPseudo( type ) {\r\n\treturn function( elem ) {\r\n\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns a function to use in pseudos for positionals\r\n * @param {Function} fn\r\n */\r\nfunction createPositionalPseudo( fn ) {\r\n\treturn markFunction(function( argument ) {\r\n\t\targument = +argument;\r\n\t\treturn markFunction(function( seed, matches ) {\r\n\t\t\tvar j,\r\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\r\n\t\t\t\ti = matchIndexes.length;\r\n\r\n\t\t\t// Match elements found at the specified indexes\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\r\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks a node for validity as a Sizzle context\r\n * @param {Element|Object=} context\r\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\r\n */\r\nfunction testContext( context ) {\r\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\r\n}\r\n\r\n// Expose support vars for convenience\r\nsupport = Sizzle.support = {};\r\n\r\n/**\r\n * Detects XML nodes\r\n * @param {Element|Object} elem An element or a document\r\n * @returns {Boolean} True iff elem is a non-HTML XML node\r\n */\r\nisXML = Sizzle.isXML = function( elem ) {\r\n\t// documentElement is verified for cases where it doesn't yet exist\r\n\t// (such as loading iframes in IE - #4833)\r\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\r\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\r\n};\r\n\r\n/**\r\n * Sets document-related variables once based on the current document\r\n * @param {Element|Object} [doc] An element or document object to use to set the document\r\n * @returns {Object} Returns the current document\r\n */\r\nsetDocument = Sizzle.setDocument = function( node ) {\r\n\tvar hasCompare, parent,\r\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\r\n\r\n\t// Return early if doc is invalid or already selected\r\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\r\n\t\treturn document;\r\n\t}\r\n\r\n\t// Update global variables\r\n\tdocument = doc;\r\n\tdocElem = document.documentElement;\r\n\tdocumentIsHTML = !isXML( document );\r\n\r\n\t// Support: IE 9-11, Edge\r\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\r\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\r\n\t\t// Support: IE 11\r\n\t\tif ( parent.addEventListener ) {\r\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\r\n\r\n\t\t// Support: IE 9 - 10 only\r\n\t\t} else if ( parent.attachEvent ) {\r\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\r\n\t\t}\r\n\t}\r\n\r\n\t/* Attributes\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Support: IE<8\r\n\t// Verify that getAttribute really returns attributes and not properties\r\n\t// (excepting IE8 booleans)\r\n\tsupport.attributes = assert(function( div ) {\r\n\t\tdiv.className = \"i\";\r\n\t\treturn !div.getAttribute(\"className\");\r\n\t});\r\n\r\n\t/* getElement(s)By*\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Check if getElementsByTagName(\"*\") returns only elements\r\n\tsupport.getElementsByTagName = assert(function( div ) {\r\n\t\tdiv.appendChild( document.createComment(\"\") );\r\n\t\treturn !div.getElementsByTagName(\"*\").length;\r\n\t});\r\n\r\n\t// Support: IE<9\r\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\r\n\r\n\t// Support: IE<10\r\n\t// Check if getElementById returns elements by name\r\n\t// The broken getElementById methods don't pick up programatically-set names,\r\n\t// so use a roundabout getElementsByName test\r\n\tsupport.getById = assert(function( div ) {\r\n\t\tdocElem.appendChild( div ).id = expando;\r\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\r\n\t});\r\n\r\n\t// ID find and filter\r\n\tif ( support.getById ) {\r\n\t\tExpr.find[\"ID\"] = function( id, context ) {\r\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\r\n\t\t\t\tvar m = context.getElementById( id );\r\n\t\t\t\treturn m ? [ m ] : [];\r\n\t\t\t}\r\n\t\t};\r\n\t\tExpr.filter[\"ID\"] = function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\t} else {\r\n\t\t// Support: IE6/7\r\n\t\t// getElementById is not reliable as a find shortcut\r\n\t\tdelete Expr.find[\"ID\"];\r\n\r\n\t\tExpr.filter[\"ID\"] =  function( id ) {\r\n\t\t\tvar attrId = id.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\r\n\t\t\t\t\telem.getAttributeNode(\"id\");\r\n\t\t\t\treturn node && node.value === attrId;\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t// Tag\r\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\r\n\t\tfunction( tag, context ) {\r\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\r\n\t\t\t\treturn context.getElementsByTagName( tag );\r\n\r\n\t\t\t// DocumentFragment nodes don't have gEBTN\r\n\t\t\t} else if ( support.qsa ) {\r\n\t\t\t\treturn context.querySelectorAll( tag );\r\n\t\t\t}\r\n\t\t} :\r\n\r\n\t\tfunction( tag, context ) {\r\n\t\t\tvar elem,\r\n\t\t\t\ttmp = [],\r\n\t\t\t\ti = 0,\r\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\r\n\t\t\t\tresults = context.getElementsByTagName( tag );\r\n\r\n\t\t\t// Filter out possible comments\r\n\t\t\tif ( tag === \"*\" ) {\r\n\t\t\t\twhile ( (elem = results[i++]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\ttmp.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\treturn results;\r\n\t\t};\r\n\r\n\t// Class\r\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\r\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\r\n\t\t\treturn context.getElementsByClassName( className );\r\n\t\t}\r\n\t};\r\n\r\n\t/* QSA/matchesSelector\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// QSA and matchesSelector support\r\n\r\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\r\n\trbuggyMatches = [];\r\n\r\n\t// qSa(:focus) reports false when true (Chrome 21)\r\n\t// We allow this because of a bug in IE8/9 that throws an error\r\n\t// whenever `document.activeElement` is accessed on an iframe\r\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\r\n\t// See http://bugs.jquery.com/ticket/13378\r\n\trbuggyQSA = [];\r\n\r\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\r\n\t\t// Build QSA regex\r\n\t\t// Regex strategy adopted from Diego Perini\r\n\t\tassert(function( div ) {\r\n\t\t\t// Select is set to empty string on purpose\r\n\t\t\t// This is to test IE's treatment of not explicitly\r\n\t\t\t// setting a boolean content attribute,\r\n\t\t\t// since its presence should be enough\r\n\t\t\t// http://bugs.jquery.com/ticket/12359\r\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\r\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\r\n\t\t\t\t\"<option selected=''></option></select>\";\r\n\r\n\t\t\t// Support: IE8, Opera 11-12.16\r\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\r\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\r\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\r\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\r\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\r\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\r\n\t\t\t\trbuggyQSA.push(\"~=\");\r\n\t\t\t}\r\n\r\n\t\t\t// Webkit/Opera - :checked should return selected option elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\r\n\t\t\t\trbuggyQSA.push(\":checked\");\r\n\t\t\t}\r\n\r\n\t\t\t// Support: Safari 8+, iOS 8+\r\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\r\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\r\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\r\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tassert(function( div ) {\r\n\t\t\t// Support: Windows 8 Native Apps\r\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\r\n\t\t\tvar input = document.createElement(\"input\");\r\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\r\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\r\n\r\n\t\t\t// Support: IE8\r\n\t\t\t// Enforce case-sensitivity of name attribute\r\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\r\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\r\n\t\t\t}\r\n\r\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\r\n\t\t\t// IE8 throws error here and will not see later tests\r\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\r\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\r\n\t\t\tdiv.querySelectorAll(\"*,:x\");\r\n\t\t\trbuggyQSA.push(\",.*:\");\r\n\t\t});\r\n\t}\r\n\r\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\r\n\t\tdocElem.webkitMatchesSelector ||\r\n\t\tdocElem.mozMatchesSelector ||\r\n\t\tdocElem.oMatchesSelector ||\r\n\t\tdocElem.msMatchesSelector) )) ) {\r\n\r\n\t\tassert(function( div ) {\r\n\t\t\t// Check to see if it's possible to do matchesSelector\r\n\t\t\t// on a disconnected node (IE 9)\r\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\r\n\r\n\t\t\t// This should fail with an exception\r\n\t\t\t// Gecko does not error, returns false instead\r\n\t\t\tmatches.call( div, \"[s!='']:x\" );\r\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\r\n\t\t});\r\n\t}\r\n\r\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\r\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\r\n\r\n\t/* Contains\r\n\t---------------------------------------------------------------------- */\r\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\r\n\r\n\t// Element contains another\r\n\t// Purposefully self-exclusive\r\n\t// As in, an element does not contain itself\r\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\r\n\t\tfunction( a, b ) {\r\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\r\n\t\t\t\tbup = b && b.parentNode;\r\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\r\n\t\t\t\tadown.contains ?\r\n\t\t\t\t\tadown.contains( bup ) :\r\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\r\n\t\t\t));\r\n\t\t} :\r\n\t\tfunction( a, b ) {\r\n\t\t\tif ( b ) {\r\n\t\t\t\twhile ( (b = b.parentNode) ) {\r\n\t\t\t\t\tif ( b === a ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t/* Sorting\r\n\t---------------------------------------------------------------------- */\r\n\r\n\t// Document order sorting\r\n\tsortOrder = hasCompare ?\r\n\tfunction( a, b ) {\r\n\r\n\t\t// Flag for duplicate removal\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// Sort on method existence if only one input has compareDocumentPosition\r\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\r\n\t\tif ( compare ) {\r\n\t\t\treturn compare;\r\n\t\t}\r\n\r\n\t\t// Calculate position if both inputs belong to the same document\r\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\r\n\t\t\ta.compareDocumentPosition( b ) :\r\n\r\n\t\t\t// Otherwise we know they are disconnected\r\n\t\t\t1;\r\n\r\n\t\t// Disconnected nodes\r\n\t\tif ( compare & 1 ||\r\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\r\n\r\n\t\t\t// Choose the first element that is related to our preferred document\r\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\r\n\t\t\t// Maintain original order\r\n\t\t\treturn sortInput ?\r\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\t\t}\r\n\r\n\t\treturn compare & 4 ? -1 : 1;\r\n\t} :\r\n\tfunction( a, b ) {\r\n\t\t// Exit early if the nodes are identical\r\n\t\tif ( a === b ) {\r\n\t\t\thasDuplicate = true;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\taup = a.parentNode,\r\n\t\t\tbup = b.parentNode,\r\n\t\t\tap = [ a ],\r\n\t\t\tbp = [ b ];\r\n\r\n\t\t// Parentless nodes are either documents or disconnected\r\n\t\tif ( !aup || !bup ) {\r\n\t\t\treturn a === document ? -1 :\r\n\t\t\t\tb === document ? 1 :\r\n\t\t\t\taup ? -1 :\r\n\t\t\t\tbup ? 1 :\r\n\t\t\t\tsortInput ?\r\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\r\n\t\t\t\t0;\r\n\r\n\t\t// If the nodes are siblings, we can do a quick check\r\n\t\t} else if ( aup === bup ) {\r\n\t\t\treturn siblingCheck( a, b );\r\n\t\t}\r\n\r\n\t\t// Otherwise we need full lists of their ancestors for comparison\r\n\t\tcur = a;\r\n\t\twhile ( (cur = cur.parentNode) ) {\r\n\t\t\tap.unshift( cur );\r\n\t\t}\r\n\t\tcur = b;\r\n\t\twhile ( (cur = cur.parentNode) ) {\r\n\t\t\tbp.unshift( cur );\r\n\t\t}\r\n\r\n\t\t// Walk down the tree looking for a discrepancy\r\n\t\twhile ( ap[i] === bp[i] ) {\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn i ?\r\n\t\t\t// Do a sibling check if the nodes have a common ancestor\r\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\r\n\r\n\t\t\t// Otherwise nodes in our document sort first\r\n\t\t\tap[i] === preferredDoc ? -1 :\r\n\t\t\tbp[i] === preferredDoc ? 1 :\r\n\t\t\t0;\r\n\t};\r\n\r\n\treturn document;\r\n};\r\n\r\nSizzle.matches = function( expr, elements ) {\r\n\treturn Sizzle( expr, null, null, elements );\r\n};\r\n\r\nSizzle.matchesSelector = function( elem, expr ) {\r\n\t// Set document vars if needed\r\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\r\n\t\tsetDocument( elem );\r\n\t}\r\n\r\n\t// Make sure that attribute selectors are quoted\r\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\r\n\r\n\tif ( support.matchesSelector && documentIsHTML &&\r\n\t\t!compilerCache[ expr + \" \" ] &&\r\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\r\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\r\n\r\n\t\ttry {\r\n\t\t\tvar ret = matches.call( elem, expr );\r\n\r\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\r\n\t\t\tif ( ret || support.disconnectedMatch ||\r\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\r\n\t\t\t\t\t// fragment in IE 9\r\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t} catch (e) {}\r\n\t}\r\n\r\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\r\n};\r\n\r\nSizzle.contains = function( context, elem ) {\r\n\t// Set document vars if needed\r\n\tif ( ( context.ownerDocument || context ) !== document ) {\r\n\t\tsetDocument( context );\r\n\t}\r\n\treturn contains( context, elem );\r\n};\r\n\r\nSizzle.attr = function( elem, name ) {\r\n\t// Set document vars if needed\r\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\r\n\t\tsetDocument( elem );\r\n\t}\r\n\r\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\r\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\r\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\r\n\t\t\tfn( elem, name, !documentIsHTML ) :\r\n\t\t\tundefined;\r\n\r\n\treturn val !== undefined ?\r\n\t\tval :\r\n\t\tsupport.attributes || !documentIsHTML ?\r\n\t\t\telem.getAttribute( name ) :\r\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\r\n\t\t\t\tval.value :\r\n\t\t\t\tnull;\r\n};\r\n\r\nSizzle.error = function( msg ) {\r\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\r\n};\r\n\r\n/**\r\n * Document sorting and removing duplicates\r\n * @param {ArrayLike} results\r\n */\r\nSizzle.uniqueSort = function( results ) {\r\n\tvar elem,\r\n\t\tduplicates = [],\r\n\t\tj = 0,\r\n\t\ti = 0;\r\n\r\n\t// Unless we *know* we can detect duplicates, assume their presence\r\n\thasDuplicate = !support.detectDuplicates;\r\n\tsortInput = !support.sortStable && results.slice( 0 );\r\n\tresults.sort( sortOrder );\r\n\r\n\tif ( hasDuplicate ) {\r\n\t\twhile ( (elem = results[i++]) ) {\r\n\t\t\tif ( elem === results[ i ] ) {\r\n\t\t\t\tj = duplicates.push( i );\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile ( j-- ) {\r\n\t\t\tresults.splice( duplicates[ j ], 1 );\r\n\t\t}\r\n\t}\r\n\r\n\t// Clear input after sorting to release objects\r\n\t// See https://github.com/jquery/sizzle/pull/225\r\n\tsortInput = null;\r\n\r\n\treturn results;\r\n};\r\n\r\n/**\r\n * Utility function for retrieving the text value of an array of DOM nodes\r\n * @param {Array|Element} elem\r\n */\r\ngetText = Sizzle.getText = function( elem ) {\r\n\tvar node,\r\n\t\tret = \"\",\r\n\t\ti = 0,\r\n\t\tnodeType = elem.nodeType;\r\n\r\n\tif ( !nodeType ) {\r\n\t\t// If no nodeType, this is expected to be an array\r\n\t\twhile ( (node = elem[i++]) ) {\r\n\t\t\t// Do not traverse comment nodes\r\n\t\t\tret += getText( node );\r\n\t\t}\r\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\r\n\t\t// Use textContent for elements\r\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\r\n\t\tif ( typeof elem.textContent === \"string\" ) {\r\n\t\t\treturn elem.textContent;\r\n\t\t} else {\r\n\t\t\t// Traverse its children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tret += getText( elem );\r\n\t\t\t}\r\n\t\t}\r\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\r\n\t\treturn elem.nodeValue;\r\n\t}\r\n\t// Do not include comment or processing instruction nodes\r\n\r\n\treturn ret;\r\n};\r\n\r\nExpr = Sizzle.selectors = {\r\n\r\n\t// Can be adjusted by the user\r\n\tcacheLength: 50,\r\n\r\n\tcreatePseudo: markFunction,\r\n\r\n\tmatch: matchExpr,\r\n\r\n\tattrHandle: {},\r\n\r\n\tfind: {},\r\n\r\n\trelative: {\r\n\t\t\">\": { dir: \"parentNode\", first: true },\r\n\t\t\" \": { dir: \"parentNode\" },\r\n\t\t\"+\": { dir: \"previousSibling\", first: true },\r\n\t\t\"~\": { dir: \"previousSibling\" }\r\n\t},\r\n\r\n\tpreFilter: {\r\n\t\t\"ATTR\": function( match ) {\r\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\r\n\r\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\r\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\r\n\r\n\t\t\tif ( match[2] === \"~=\" ) {\r\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\r\n\t\t\t}\r\n\r\n\t\t\treturn match.slice( 0, 4 );\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( match ) {\r\n\t\t\t/* matches from matchExpr[\"CHILD\"]\r\n\t\t\t\t1 type (only|nth|...)\r\n\t\t\t\t2 what (child|of-type)\r\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\r\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\r\n\t\t\t\t5 sign of xn-component\r\n\t\t\t\t6 x of xn-component\r\n\t\t\t\t7 sign of y-component\r\n\t\t\t\t8 y of y-component\r\n\t\t\t*/\r\n\t\t\tmatch[1] = match[1].toLowerCase();\r\n\r\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\r\n\t\t\t\t// nth-* requires argument\r\n\t\t\t\tif ( !match[3] ) {\r\n\t\t\t\t\tSizzle.error( match[0] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\r\n\t\t\t\t// remember that false/true cast respectively to 0/1\r\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\r\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\r\n\r\n\t\t\t// other types prohibit arguments\r\n\t\t\t} else if ( match[3] ) {\r\n\t\t\t\tSizzle.error( match[0] );\r\n\t\t\t}\r\n\r\n\t\t\treturn match;\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( match ) {\r\n\t\t\tvar excess,\r\n\t\t\t\tunquoted = !match[6] && match[2];\r\n\r\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Accept quoted arguments as-is\r\n\t\t\tif ( match[3] ) {\r\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\r\n\r\n\t\t\t// Strip excess characters from unquoted arguments\r\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\r\n\t\t\t\t// Get excess from tokenize (recursively)\r\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\r\n\t\t\t\t// advance to the next closing parenthesis\r\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\r\n\r\n\t\t\t\t// excess is a negative index\r\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\r\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\r\n\t\t\t}\r\n\r\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\r\n\t\t\treturn match.slice( 0, 3 );\r\n\t\t}\r\n\t},\r\n\r\n\tfilter: {\r\n\r\n\t\t\"TAG\": function( nodeNameSelector ) {\r\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn nodeNameSelector === \"*\" ?\r\n\t\t\t\tfunction() { return true; } :\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CLASS\": function( className ) {\r\n\t\t\tvar pattern = classCache[ className + \" \" ];\r\n\r\n\t\t\treturn pattern ||\r\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\r\n\t\t\t\tclassCache( className, function( elem ) {\r\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t\"ATTR\": function( name, operator, check ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar result = Sizzle.attr( elem, name );\r\n\r\n\t\t\t\tif ( result == null ) {\r\n\t\t\t\t\treturn operator === \"!=\";\r\n\t\t\t\t}\r\n\t\t\t\tif ( !operator ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult += \"\";\r\n\r\n\t\t\t\treturn operator === \"=\" ? result === check :\r\n\t\t\t\t\toperator === \"!=\" ? result !== check :\r\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\r\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\r\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\r\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\r\n\t\t\t\t\tfalse;\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\r\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\r\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\r\n\t\t\t\tofType = what === \"of-type\";\r\n\r\n\t\t\treturn first === 1 && last === 0 ?\r\n\r\n\t\t\t\t// Shortcut for :nth-*(n)\r\n\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\treturn !!elem.parentNode;\r\n\t\t\t\t} :\r\n\r\n\t\t\t\tfunction( elem, context, xml ) {\r\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\r\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\r\n\t\t\t\t\t\tparent = elem.parentNode,\r\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\r\n\t\t\t\t\t\tuseCache = !xml && !ofType,\r\n\t\t\t\t\t\tdiff = false;\r\n\r\n\t\t\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\r\n\t\t\t\t\t\tif ( simple ) {\r\n\t\t\t\t\t\t\twhile ( dir ) {\r\n\t\t\t\t\t\t\t\tnode = elem;\r\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\r\n\t\t\t\t\t\t\t\t\tif ( ofType ?\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\r\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\r\n\r\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\r\n\t\t\t\t\t\tif ( forward && useCache ) {\r\n\r\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\r\n\r\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\r\n\t\t\t\t\t\t\tnode = parent;\r\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\r\n\r\n\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\r\n\r\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\r\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\r\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\r\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\r\n\r\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\r\n\r\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\r\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\r\n\r\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\r\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\r\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Use previously-cached element index if available\r\n\t\t\t\t\t\t\tif ( useCache ) {\r\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\r\n\t\t\t\t\t\t\t\tnode = elem;\r\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\r\n\r\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\r\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\r\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// xml :nth-child(...)\r\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\r\n\t\t\t\t\t\t\tif ( diff === false ) {\r\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\r\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\r\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\r\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\r\n\t\t\t\t\t\t\t\t\t\t++diff ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\r\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\r\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\r\n\t\t\t\t\t\tdiff -= last;\r\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t},\r\n\r\n\t\t\"PSEUDO\": function( pseudo, argument ) {\r\n\t\t\t// pseudo-class names are case-insensitive\r\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\r\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\r\n\t\t\t// Remember that setFilters inherits from pseudos\r\n\t\t\tvar args,\r\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\r\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\r\n\r\n\t\t\t// The user may use createPseudo to indicate that\r\n\t\t\t// arguments are needed to create the filter function\r\n\t\t\t// just as Sizzle does\r\n\t\t\tif ( fn[ expando ] ) {\r\n\t\t\t\treturn fn( argument );\r\n\t\t\t}\r\n\r\n\t\t\t// But maintain support for old signatures\r\n\t\t\tif ( fn.length > 1 ) {\r\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\r\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\r\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\r\n\t\t\t\t\t\tvar idx,\r\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\r\n\t\t\t\t\t\t\ti = matched.length;\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\r\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) :\r\n\t\t\t\t\tfunction( elem ) {\r\n\t\t\t\t\t\treturn fn( elem, 0, args );\r\n\t\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn fn;\r\n\t\t}\r\n\t},\r\n\r\n\tpseudos: {\r\n\t\t// Potentially complex pseudos\r\n\t\t\"not\": markFunction(function( selector ) {\r\n\t\t\t// Trim the selector passed to compile\r\n\t\t\t// to avoid treating leading and trailing\r\n\t\t\t// spaces as combinators\r\n\t\t\tvar input = [],\r\n\t\t\t\tresults = [],\r\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\r\n\r\n\t\t\treturn matcher[ expando ] ?\r\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\r\n\t\t\t\t\tvar elem,\r\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\r\n\t\t\t\t\t\ti = seed.length;\r\n\r\n\t\t\t\t\t// Match elements unmatched by `matcher`\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\r\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}) :\r\n\t\t\t\tfunction( elem, context, xml ) {\r\n\t\t\t\t\tinput[0] = elem;\r\n\t\t\t\t\tmatcher( input, null, xml, results );\r\n\t\t\t\t\t// Don't keep the element (issue #299)\r\n\t\t\t\t\tinput[0] = null;\r\n\t\t\t\t\treturn !results.pop();\r\n\t\t\t\t};\r\n\t\t}),\r\n\r\n\t\t\"has\": markFunction(function( selector ) {\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t\"contains\": markFunction(function( text ) {\r\n\t\t\ttext = text.replace( runescape, funescape );\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t// \"Whether an element is represented by a :lang() selector\r\n\t\t// is based solely on the element's language value\r\n\t\t// being equal to the identifier C,\r\n\t\t// or beginning with the identifier C immediately followed by \"-\".\r\n\t\t// The matching of C against the element's language value is performed case-insensitively.\r\n\t\t// The identifier C does not have to be a valid language name.\"\r\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\r\n\t\t\"lang\": markFunction( function( lang ) {\r\n\t\t\t// lang value must be a valid identifier\r\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\r\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\r\n\t\t\t}\r\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\r\n\t\t\treturn function( elem ) {\r\n\t\t\t\tvar elemLang;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\r\n\t\t\t\t\t\telem.lang :\r\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\r\n\r\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\r\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\r\n\t\t\t\treturn false;\r\n\t\t\t};\r\n\t\t}),\r\n\r\n\t\t// Miscellaneous\r\n\t\t\"target\": function( elem ) {\r\n\t\t\tvar hash = window.location && window.location.hash;\r\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\r\n\t\t},\r\n\r\n\t\t\"root\": function( elem ) {\r\n\t\t\treturn elem === docElem;\r\n\t\t},\r\n\r\n\t\t\"focus\": function( elem ) {\r\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\r\n\t\t},\r\n\r\n\t\t// Boolean properties\r\n\t\t\"enabled\": function( elem ) {\r\n\t\t\treturn elem.disabled === false;\r\n\t\t},\r\n\r\n\t\t\"disabled\": function( elem ) {\r\n\t\t\treturn elem.disabled === true;\r\n\t\t},\r\n\r\n\t\t\"checked\": function( elem ) {\r\n\t\t\t// In CSS3, :checked should return both checked and selected elements\r\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\r\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\r\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\r\n\t\t},\r\n\r\n\t\t\"selected\": function( elem ) {\r\n\t\t\t// Accessing this property makes selected-by-default\r\n\t\t\t// options in Safari work properly\r\n\t\t\tif ( elem.parentNode ) {\r\n\t\t\t\telem.parentNode.selectedIndex;\r\n\t\t\t}\r\n\r\n\t\t\treturn elem.selected === true;\r\n\t\t},\r\n\r\n\t\t// Contents\r\n\t\t\"empty\": function( elem ) {\r\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\r\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\r\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\r\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\r\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\r\n\t\t\t\tif ( elem.nodeType < 6 ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\t\"parent\": function( elem ) {\r\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\r\n\t\t},\r\n\r\n\t\t// Element/input types\r\n\t\t\"header\": function( elem ) {\r\n\t\t\treturn rheader.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"input\": function( elem ) {\r\n\t\t\treturn rinputs.test( elem.nodeName );\r\n\t\t},\r\n\r\n\t\t\"button\": function( elem ) {\r\n\t\t\tvar name = elem.nodeName.toLowerCase();\r\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\r\n\t\t},\r\n\r\n\t\t\"text\": function( elem ) {\r\n\t\t\tvar attr;\r\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\r\n\t\t\t\telem.type === \"text\" &&\r\n\r\n\t\t\t\t// Support: IE<8\r\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\r\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\r\n\t\t},\r\n\r\n\t\t// Position-in-collection\r\n\t\t\"first\": createPositionalPseudo(function() {\r\n\t\t\treturn [ 0 ];\r\n\t\t}),\r\n\r\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\treturn [ length - 1 ];\r\n\t\t}),\r\n\r\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\r\n\t\t}),\r\n\r\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\tvar i = 0;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\r\n\t\t\tvar i = 1;\r\n\t\t\tfor ( ; i < length; i += 2 ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ? argument + length : argument;\r\n\t\t\tfor ( ; --i >= 0; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t}),\r\n\r\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\r\n\t\t\tvar i = argument < 0 ? argument + length : argument;\r\n\t\t\tfor ( ; ++i < length; ) {\r\n\t\t\t\tmatchIndexes.push( i );\r\n\t\t\t}\r\n\t\t\treturn matchIndexes;\r\n\t\t})\r\n\t}\r\n};\r\n\r\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\r\n\r\n// Add button/input type pseudos\r\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\r\n\tExpr.pseudos[ i ] = createInputPseudo( i );\r\n}\r\nfor ( i in { submit: true, reset: true } ) {\r\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\r\n}\r\n\r\n// Easy API for creating new setFilters\r\nfunction setFilters() {}\r\nsetFilters.prototype = Expr.filters = Expr.pseudos;\r\nExpr.setFilters = new setFilters();\r\n\r\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\r\n\tvar matched, match, tokens, type,\r\n\t\tsoFar, groups, preFilters,\r\n\t\tcached = tokenCache[ selector + \" \" ];\r\n\r\n\tif ( cached ) {\r\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\r\n\t}\r\n\r\n\tsoFar = selector;\r\n\tgroups = [];\r\n\tpreFilters = Expr.preFilter;\r\n\r\n\twhile ( soFar ) {\r\n\r\n\t\t// Comma and first run\r\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\r\n\t\t\tif ( match ) {\r\n\t\t\t\t// Don't consume trailing commas as valid\r\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\r\n\t\t\t}\r\n\t\t\tgroups.push( (tokens = []) );\r\n\t\t}\r\n\r\n\t\tmatched = false;\r\n\r\n\t\t// Combinators\r\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\r\n\t\t\tmatched = match.shift();\r\n\t\t\ttokens.push({\r\n\t\t\t\tvalue: matched,\r\n\t\t\t\t// Cast descendant combinators to space\r\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\r\n\t\t\t});\r\n\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t}\r\n\r\n\t\t// Filters\r\n\t\tfor ( type in Expr.filter ) {\r\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\r\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\r\n\t\t\t\tmatched = match.shift();\r\n\t\t\t\ttokens.push({\r\n\t\t\t\t\tvalue: matched,\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tmatches: match\r\n\t\t\t\t});\r\n\t\t\t\tsoFar = soFar.slice( matched.length );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( !matched ) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the length of the invalid excess\r\n\t// if we're just parsing\r\n\t// Otherwise, throw an error or return tokens\r\n\treturn parseOnly ?\r\n\t\tsoFar.length :\r\n\t\tsoFar ?\r\n\t\t\tSizzle.error( selector ) :\r\n\t\t\t// Cache the tokens\r\n\t\t\ttokenCache( selector, groups ).slice( 0 );\r\n};\r\n\r\nfunction toSelector( tokens ) {\r\n\tvar i = 0,\r\n\t\tlen = tokens.length,\r\n\t\tselector = \"\";\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tselector += tokens[i].value;\r\n\t}\r\n\treturn selector;\r\n}\r\n\r\nfunction addCombinator( matcher, combinator, base ) {\r\n\tvar dir = combinator.dir,\r\n\t\tcheckNonElements = base && dir === \"parentNode\",\r\n\t\tdoneName = done++;\r\n\r\n\treturn combinator.first ?\r\n\t\t// Check against closest ancestor/preceding element\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\treturn matcher( elem, context, xml );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} :\r\n\r\n\t\t// Check against all ancestor/preceding elements\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar oldCache, uniqueCache, outerCache,\r\n\t\t\t\tnewCache = [ dirruns, doneName ];\r\n\r\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\r\n\t\t\tif ( xml ) {\r\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\r\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\r\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\r\n\r\n\t\t\t\t\t\t// Support: IE <9 only\r\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\r\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\r\n\r\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\r\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\r\n\r\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\r\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\r\n\r\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\r\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n}\r\n\r\nfunction elementMatcher( matchers ) {\r\n\treturn matchers.length > 1 ?\r\n\t\tfunction( elem, context, xml ) {\r\n\t\t\tvar i = matchers.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t} :\r\n\t\tmatchers[0];\r\n}\r\n\r\nfunction multipleContexts( selector, contexts, results ) {\r\n\tvar i = 0,\r\n\t\tlen = contexts.length;\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tSizzle( selector, contexts[i], results );\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nfunction condense( unmatched, map, filter, context, xml ) {\r\n\tvar elem,\r\n\t\tnewUnmatched = [],\r\n\t\ti = 0,\r\n\t\tlen = unmatched.length,\r\n\t\tmapped = map != null;\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( (elem = unmatched[i]) ) {\r\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\r\n\t\t\t\tnewUnmatched.push( elem );\r\n\t\t\t\tif ( mapped ) {\r\n\t\t\t\t\tmap.push( i );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn newUnmatched;\r\n}\r\n\r\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\r\n\tif ( postFilter && !postFilter[ expando ] ) {\r\n\t\tpostFilter = setMatcher( postFilter );\r\n\t}\r\n\tif ( postFinder && !postFinder[ expando ] ) {\r\n\t\tpostFinder = setMatcher( postFinder, postSelector );\r\n\t}\r\n\treturn markFunction(function( seed, results, context, xml ) {\r\n\t\tvar temp, i, elem,\r\n\t\t\tpreMap = [],\r\n\t\t\tpostMap = [],\r\n\t\t\tpreexisting = results.length,\r\n\r\n\t\t\t// Get initial elements from seed or context\r\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\r\n\r\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\r\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\r\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\r\n\t\t\t\telems,\r\n\r\n\t\t\tmatcherOut = matcher ?\r\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\r\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\r\n\r\n\t\t\t\t\t// ...intermediate processing is necessary\r\n\t\t\t\t\t[] :\r\n\r\n\t\t\t\t\t// ...otherwise use results directly\r\n\t\t\t\t\tresults :\r\n\t\t\t\tmatcherIn;\r\n\r\n\t\t// Find primary matches\r\n\t\tif ( matcher ) {\r\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\r\n\t\t}\r\n\r\n\t\t// Apply postFilter\r\n\t\tif ( postFilter ) {\r\n\t\t\ttemp = condense( matcherOut, postMap );\r\n\t\t\tpostFilter( temp, [], context, xml );\r\n\r\n\t\t\t// Un-match failing elements by moving them back to matcherIn\r\n\t\t\ti = temp.length;\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tif ( (elem = temp[i]) ) {\r\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( seed ) {\r\n\t\t\tif ( postFinder || preFilter ) {\r\n\t\t\t\tif ( postFinder ) {\r\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\r\n\t\t\t\t\ttemp = [];\r\n\t\t\t\t\ti = matcherOut.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\r\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\r\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\r\n\t\t\t\ti = matcherOut.length;\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\r\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\r\n\r\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Add elements to results, through postFinder if defined\r\n\t\t} else {\r\n\t\t\tmatcherOut = condense(\r\n\t\t\t\tmatcherOut === results ?\r\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\r\n\t\t\t\t\tmatcherOut\r\n\t\t\t);\r\n\t\t\tif ( postFinder ) {\r\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\r\n\t\t\t} else {\r\n\t\t\t\tpush.apply( results, matcherOut );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction matcherFromTokens( tokens ) {\r\n\tvar checkContext, matcher, j,\r\n\t\tlen = tokens.length,\r\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\r\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\r\n\t\ti = leadingRelative ? 1 : 0,\r\n\r\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\r\n\t\tmatchContext = addCombinator( function( elem ) {\r\n\t\t\treturn elem === checkContext;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchAnyContext = addCombinator( function( elem ) {\r\n\t\t\treturn indexOf( checkContext, elem ) > -1;\r\n\t\t}, implicitRelative, true ),\r\n\t\tmatchers = [ function( elem, context, xml ) {\r\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\r\n\t\t\t\t(checkContext = context).nodeType ?\r\n\t\t\t\t\tmatchContext( elem, context, xml ) :\r\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\r\n\t\t\t// Avoid hanging onto element (issue #299)\r\n\t\t\tcheckContext = null;\r\n\t\t\treturn ret;\r\n\t\t} ];\r\n\r\n\tfor ( ; i < len; i++ ) {\r\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\r\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\r\n\t\t} else {\r\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\r\n\r\n\t\t\t// Return special upon seeing a positional matcher\r\n\t\t\tif ( matcher[ expando ] ) {\r\n\t\t\t\t// Find the next relative operator (if any) for proper handling\r\n\t\t\t\tj = ++i;\r\n\t\t\t\tfor ( ; j < len; j++ ) {\r\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn setMatcher(\r\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\r\n\t\t\t\t\ti > 1 && toSelector(\r\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\r\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\r\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\r\n\t\t\t\t\tmatcher,\r\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\r\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\r\n\t\t\t\t\tj < len && toSelector( tokens )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tmatchers.push( matcher );\r\n\t\t}\r\n\t}\r\n\r\n\treturn elementMatcher( matchers );\r\n}\r\n\r\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\r\n\tvar bySet = setMatchers.length > 0,\r\n\t\tbyElement = elementMatchers.length > 0,\r\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\r\n\t\t\tvar elem, j, matcher,\r\n\t\t\t\tmatchedCount = 0,\r\n\t\t\t\ti = \"0\",\r\n\t\t\t\tunmatched = seed && [],\r\n\t\t\t\tsetMatched = [],\r\n\t\t\t\tcontextBackup = outermostContext,\r\n\t\t\t\t// We must always have either seed elements or outermost context\r\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\r\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\r\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\r\n\t\t\t\tlen = elems.length;\r\n\r\n\t\t\tif ( outermost ) {\r\n\t\t\t\toutermostContext = context === document || context || outermost;\r\n\t\t\t}\r\n\r\n\t\t\t// Add elements passing elementMatchers directly to results\r\n\t\t\t// Support: IE<9, Safari\r\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\r\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\r\n\t\t\t\tif ( byElement && elem ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\r\n\t\t\t\t\t\tsetDocument( elem );\r\n\t\t\t\t\t\txml = !documentIsHTML;\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\r\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\r\n\t\t\t\t\t\t\tresults.push( elem );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( outermost ) {\r\n\t\t\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Track unmatched elements for set filters\r\n\t\t\t\tif ( bySet ) {\r\n\t\t\t\t\t// They will have gone through all possible matchers\r\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\r\n\t\t\t\t\t\tmatchedCount--;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Lengthen the array for every element, matched or not\r\n\t\t\t\t\tif ( seed ) {\r\n\t\t\t\t\t\tunmatched.push( elem );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\r\n\t\t\t// makes the latter nonnegative.\r\n\t\t\tmatchedCount += i;\r\n\r\n\t\t\t// Apply set filters to unmatched elements\r\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\r\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\r\n\t\t\t// no element matchers and no seed.\r\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\r\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\r\n\t\t\t// numerically zero.\r\n\t\t\tif ( bySet && i !== matchedCount ) {\r\n\t\t\t\tj = 0;\r\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\r\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( seed ) {\r\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\r\n\t\t\t\t\tif ( matchedCount > 0 ) {\r\n\t\t\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\r\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\r\n\t\t\t\t\tsetMatched = condense( setMatched );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add matches to results\r\n\t\t\t\tpush.apply( results, setMatched );\r\n\r\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\r\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\r\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\r\n\r\n\t\t\t\t\tSizzle.uniqueSort( results );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Override manipulation of globals by nested matchers\r\n\t\t\tif ( outermost ) {\r\n\t\t\t\tdirruns = dirrunsUnique;\r\n\t\t\t\toutermostContext = contextBackup;\r\n\t\t\t}\r\n\r\n\t\t\treturn unmatched;\r\n\t\t};\r\n\r\n\treturn bySet ?\r\n\t\tmarkFunction( superMatcher ) :\r\n\t\tsuperMatcher;\r\n}\r\n\r\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\r\n\tvar i,\r\n\t\tsetMatchers = [],\r\n\t\telementMatchers = [],\r\n\t\tcached = compilerCache[ selector + \" \" ];\r\n\r\n\tif ( !cached ) {\r\n\t\t// Generate a function of recursive functions that can be used to check each element\r\n\t\tif ( !match ) {\r\n\t\t\tmatch = tokenize( selector );\r\n\t\t}\r\n\t\ti = match.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\tcached = matcherFromTokens( match[i] );\r\n\t\t\tif ( cached[ expando ] ) {\r\n\t\t\t\tsetMatchers.push( cached );\r\n\t\t\t} else {\r\n\t\t\t\telementMatchers.push( cached );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Cache the compiled function\r\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\r\n\r\n\t\t// Save selector and tokenization\r\n\t\tcached.selector = selector;\r\n\t}\r\n\treturn cached;\r\n};\r\n\r\n/**\r\n * A low-level selection function that works with Sizzle's compiled\r\n *  selector functions\r\n * @param {String|Function} selector A selector or a pre-compiled\r\n *  selector function built with Sizzle.compile\r\n * @param {Element} context\r\n * @param {Array} [results]\r\n * @param {Array} [seed] A set of elements to match against\r\n */\r\nselect = Sizzle.select = function( selector, context, results, seed ) {\r\n\tvar i, tokens, token, type, find,\r\n\t\tcompiled = typeof selector === \"function\" && selector,\r\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\r\n\r\n\tresults = results || [];\r\n\r\n\t// Try to minimize operations if there is only one selector in the list and no seed\r\n\t// (the latter of which guarantees us context)\r\n\tif ( match.length === 1 ) {\r\n\r\n\t\t// Reduce context if the leading compound selector is an ID\r\n\t\ttokens = match[0] = match[0].slice( 0 );\r\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\r\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\r\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\r\n\r\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\r\n\t\t\tif ( !context ) {\r\n\t\t\t\treturn results;\r\n\r\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\r\n\t\t\t} else if ( compiled ) {\r\n\t\t\t\tcontext = context.parentNode;\r\n\t\t\t}\r\n\r\n\t\t\tselector = selector.slice( tokens.shift().value.length );\r\n\t\t}\r\n\r\n\t\t// Fetch a seed set for right-to-left matching\r\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\ttoken = tokens[i];\r\n\r\n\t\t\t// Abort if we hit a combinator\r\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( (find = Expr.find[ type ]) ) {\r\n\t\t\t\t// Search, expanding context for leading sibling combinators\r\n\t\t\t\tif ( (seed = find(\r\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\r\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\r\n\t\t\t\t)) ) {\r\n\r\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\r\n\t\t\t\t\ttokens.splice( i, 1 );\r\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\r\n\t\t\t\t\tif ( !selector ) {\r\n\t\t\t\t\t\tpush.apply( results, seed );\r\n\t\t\t\t\t\treturn results;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Compile and execute a filtering function if one is not provided\r\n\t// Provide `match` to avoid retokenization if we modified the selector above\r\n\t( compiled || compile( selector, match ) )(\r\n\t\tseed,\r\n\t\tcontext,\r\n\t\t!documentIsHTML,\r\n\t\tresults,\r\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\r\n\t);\r\n\treturn results;\r\n};\r\n\r\n// One-time assignments\r\n\r\n// Sort stability\r\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\r\n\r\n// Support: Chrome 14-35+\r\n// Always assume duplicates if they aren't passed to the comparison function\r\nsupport.detectDuplicates = !!hasDuplicate;\r\n\r\n// Initialize against the default document\r\nsetDocument();\r\n\r\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\r\n// Detached nodes confoundingly follow *each other*\r\nsupport.sortDetached = assert(function( div1 ) {\r\n\t// Should return 1, but returns 4 (following)\r\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\r\n});\r\n\r\n// Support: IE<8\r\n// Prevent attribute/property \"interpolation\"\r\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\r\nif ( !assert(function( div ) {\r\n\tdiv.innerHTML = \"<a href='#'></a>\";\r\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\r\n}) ) {\r\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Support: IE<9\r\n// Use defaultValue in place of getAttribute(\"value\")\r\nif ( !support.attributes || !assert(function( div ) {\r\n\tdiv.innerHTML = \"<input/>\";\r\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\r\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\r\n}) ) {\r\n\taddHandle( \"value\", function( elem, name, isXML ) {\r\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\r\n\t\t\treturn elem.defaultValue;\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// Support: IE<9\r\n// Use getAttributeNode to fetch booleans when getAttribute lies\r\nif ( !assert(function( div ) {\r\n\treturn div.getAttribute(\"disabled\") == null;\r\n}) ) {\r\n\taddHandle( booleans, function( elem, name, isXML ) {\r\n\t\tvar val;\r\n\t\tif ( !isXML ) {\r\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\r\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\r\n\t\t\t\t\tval.value :\r\n\t\t\t\tnull;\r\n\t\t}\r\n\t});\r\n}\r\n\r\nreturn Sizzle;\r\n\r\n})( window );\r\n\r\n\r\n\r\njQuery.find = Sizzle;\r\njQuery.expr = Sizzle.selectors;\r\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\r\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\r\njQuery.text = Sizzle.getText;\r\njQuery.isXMLDoc = Sizzle.isXML;\r\njQuery.contains = Sizzle.contains;\r\n\r\n\r\n\r\nvar dir = function( elem, dir, until ) {\r\n\tvar matched = [],\r\n\t\ttruncate = until !== undefined;\r\n\r\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\r\n\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tmatched.push( elem );\r\n\t\t}\r\n\t}\r\n\treturn matched;\r\n};\r\n\r\n\r\nvar siblings = function( n, elem ) {\r\n\tvar matched = [];\r\n\r\n\tfor ( ; n; n = n.nextSibling ) {\r\n\t\tif ( n.nodeType === 1 && n !== elem ) {\r\n\t\t\tmatched.push( n );\r\n\t\t}\r\n\t}\r\n\r\n\treturn matched;\r\n};\r\n\r\n\r\nvar rneedsContext = jQuery.expr.match.needsContext;\r\n\r\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\r\n\r\n\r\n\r\nvar risSimple = /^.[^:#\\[\\.,]*$/;\r\n\r\n// Implement the identical functionality for filter and not\r\nfunction winnow( elements, qualifier, not ) {\r\n\tif ( jQuery.isFunction( qualifier ) ) {\r\n\t\treturn jQuery.grep( elements, function( elem, i ) {\r\n\t\t\t/* jshint -W018 */\r\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( qualifier.nodeType ) {\r\n\t\treturn jQuery.grep( elements, function( elem ) {\r\n\t\t\treturn ( elem === qualifier ) !== not;\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( typeof qualifier === \"string\" ) {\r\n\t\tif ( risSimple.test( qualifier ) ) {\r\n\t\t\treturn jQuery.filter( qualifier, elements, not );\r\n\t\t}\r\n\r\n\t\tqualifier = jQuery.filter( qualifier, elements );\r\n\t}\r\n\r\n\treturn jQuery.grep( elements, function( elem ) {\r\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\r\n\t} );\r\n}\r\n\r\njQuery.filter = function( expr, elems, not ) {\r\n\tvar elem = elems[ 0 ];\r\n\r\n\tif ( not ) {\r\n\t\texpr = \":not(\" + expr + \")\";\r\n\t}\r\n\r\n\treturn elems.length === 1 && elem.nodeType === 1 ?\r\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\r\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\r\n\t\t\treturn elem.nodeType === 1;\r\n\t\t} ) );\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tfind: function( selector ) {\r\n\t\tvar i,\r\n\t\t\tlen = this.length,\r\n\t\t\tret = [],\r\n\t\t\tself = this;\r\n\r\n\t\tif ( typeof selector !== \"string\" ) {\r\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\r\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} ) );\r\n\t\t}\r\n\r\n\t\tfor ( i = 0; i < len; i++ ) {\r\n\t\t\tjQuery.find( selector, self[ i ], ret );\r\n\t\t}\r\n\r\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\r\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\r\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\r\n\t\treturn ret;\r\n\t},\r\n\tfilter: function( selector ) {\r\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\r\n\t},\r\n\tnot: function( selector ) {\r\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\r\n\t},\r\n\tis: function( selector ) {\r\n\t\treturn !!winnow(\r\n\t\t\tthis,\r\n\r\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\r\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\r\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\r\n\t\t\t\tjQuery( selector ) :\r\n\t\t\t\tselector || [],\r\n\t\t\tfalse\r\n\t\t).length;\r\n\t}\r\n} );\r\n\r\n\r\n// Initialize a jQuery object\r\n\r\n\r\n// A central reference to the root jQuery(document)\r\nvar rootjQuery,\r\n\r\n\t// A simple way to check for HTML strings\r\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\r\n\t// Strict HTML recognition (#11290: must start with <)\r\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\r\n\r\n\tinit = jQuery.fn.init = function( selector, context, root ) {\r\n\t\tvar match, elem;\r\n\r\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\r\n\t\tif ( !selector ) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// Method init() accepts an alternate rootjQuery\r\n\t\t// so migrate can support jQuery.sub (gh-2101)\r\n\t\troot = root || rootjQuery;\r\n\r\n\t\t// Handle HTML strings\r\n\t\tif ( typeof selector === \"string\" ) {\r\n\t\t\tif ( selector[ 0 ] === \"<\" &&\r\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\r\n\t\t\t\tselector.length >= 3 ) {\r\n\r\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\r\n\t\t\t\tmatch = [ null, selector, null ];\r\n\r\n\t\t\t} else {\r\n\t\t\t\tmatch = rquickExpr.exec( selector );\r\n\t\t\t}\r\n\r\n\t\t\t// Match html or make sure no context is specified for #id\r\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\r\n\r\n\t\t\t\t// HANDLE: $(html) -> $(array)\r\n\t\t\t\tif ( match[ 1 ] ) {\r\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\r\n\r\n\t\t\t\t\t// Option to run scripts is true for back-compat\r\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\r\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\r\n\t\t\t\t\t\tmatch[ 1 ],\r\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\r\n\t\t\t\t\t\ttrue\r\n\t\t\t\t\t) );\r\n\r\n\t\t\t\t\t// HANDLE: $(html, props)\r\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\r\n\t\t\t\t\t\tfor ( match in context ) {\r\n\r\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\r\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\r\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\r\n\r\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t// HANDLE: $(#id)\r\n\t\t\t\t} else {\r\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\r\n\r\n\t\t\t\t\t// Support: Blackberry 4.6\r\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\r\n\t\t\t\t\tif ( elem && elem.parentNode ) {\r\n\r\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\r\n\t\t\t\t\t\tthis.length = 1;\r\n\t\t\t\t\t\tthis[ 0 ] = elem;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.context = document;\r\n\t\t\t\t\tthis.selector = selector;\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\r\n\t\t\t// HANDLE: $(expr, $(...))\r\n\t\t\t} else if ( !context || context.jquery ) {\r\n\t\t\t\treturn ( context || root ).find( selector );\r\n\r\n\t\t\t// HANDLE: $(expr, context)\r\n\t\t\t// (which is just equivalent to: $(context).find(expr)\r\n\t\t\t} else {\r\n\t\t\t\treturn this.constructor( context ).find( selector );\r\n\t\t\t}\r\n\r\n\t\t// HANDLE: $(DOMElement)\r\n\t\t} else if ( selector.nodeType ) {\r\n\t\t\tthis.context = this[ 0 ] = selector;\r\n\t\t\tthis.length = 1;\r\n\t\t\treturn this;\r\n\r\n\t\t// HANDLE: $(function)\r\n\t\t// Shortcut for document ready\r\n\t\t} else if ( jQuery.isFunction( selector ) ) {\r\n\t\t\treturn root.ready !== undefined ?\r\n\t\t\t\troot.ready( selector ) :\r\n\r\n\t\t\t\t// Execute immediately if ready is not present\r\n\t\t\t\tselector( jQuery );\r\n\t\t}\r\n\r\n\t\tif ( selector.selector !== undefined ) {\r\n\t\t\tthis.selector = selector.selector;\r\n\t\t\tthis.context = selector.context;\r\n\t\t}\r\n\r\n\t\treturn jQuery.makeArray( selector, this );\r\n\t};\r\n\r\n// Give the init function the jQuery prototype for later instantiation\r\ninit.prototype = jQuery.fn;\r\n\r\n// Initialize central reference\r\nrootjQuery = jQuery( document );\r\n\r\n\r\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\r\n\r\n\t// Methods guaranteed to produce a unique set when starting from a unique set\r\n\tguaranteedUnique = {\r\n\t\tchildren: true,\r\n\t\tcontents: true,\r\n\t\tnext: true,\r\n\t\tprev: true\r\n\t};\r\n\r\njQuery.fn.extend( {\r\n\thas: function( target ) {\r\n\t\tvar targets = jQuery( target, this ),\r\n\t\t\tl = targets.length;\r\n\r\n\t\treturn this.filter( function() {\r\n\t\t\tvar i = 0;\r\n\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tclosest: function( selectors, context ) {\r\n\t\tvar cur,\r\n\t\t\ti = 0,\r\n\t\t\tl = this.length,\r\n\t\t\tmatched = [],\r\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\r\n\t\t\t\tjQuery( selectors, context || this.context ) :\r\n\t\t\t\t0;\r\n\r\n\t\tfor ( ; i < l; i++ ) {\r\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\r\n\r\n\t\t\t\t// Always skip document fragments\r\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\r\n\t\t\t\t\tpos.index( cur ) > -1 :\r\n\r\n\t\t\t\t\t// Don't pass non-elements to Sizzle\r\n\t\t\t\t\tcur.nodeType === 1 &&\r\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\r\n\r\n\t\t\t\t\tmatched.push( cur );\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\r\n\t},\r\n\r\n\t// Determine the position of an element within the set\r\n\tindex: function( elem ) {\r\n\r\n\t\t// No argument, return index in parent\r\n\t\tif ( !elem ) {\r\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\r\n\t\t}\r\n\r\n\t\t// Index in selector\r\n\t\tif ( typeof elem === \"string\" ) {\r\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\r\n\t\t}\r\n\r\n\t\t// Locate the position of the desired element\r\n\t\treturn indexOf.call( this,\r\n\r\n\t\t\t// If it receives a jQuery object, the first element is used\r\n\t\t\telem.jquery ? elem[ 0 ] : elem\r\n\t\t);\r\n\t},\r\n\r\n\tadd: function( selector, context ) {\r\n\t\treturn this.pushStack(\r\n\t\t\tjQuery.uniqueSort(\r\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\r\n\t\t\t)\r\n\t\t);\r\n\t},\r\n\r\n\taddBack: function( selector ) {\r\n\t\treturn this.add( selector == null ?\r\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\r\n\t\t);\r\n\t}\r\n} );\r\n\r\nfunction sibling( cur, dir ) {\r\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\r\n\treturn cur;\r\n}\r\n\r\njQuery.each( {\r\n\tparent: function( elem ) {\r\n\t\tvar parent = elem.parentNode;\r\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\r\n\t},\r\n\tparents: function( elem ) {\r\n\t\treturn dir( elem, \"parentNode\" );\r\n\t},\r\n\tparentsUntil: function( elem, i, until ) {\r\n\t\treturn dir( elem, \"parentNode\", until );\r\n\t},\r\n\tnext: function( elem ) {\r\n\t\treturn sibling( elem, \"nextSibling\" );\r\n\t},\r\n\tprev: function( elem ) {\r\n\t\treturn sibling( elem, \"previousSibling\" );\r\n\t},\r\n\tnextAll: function( elem ) {\r\n\t\treturn dir( elem, \"nextSibling\" );\r\n\t},\r\n\tprevAll: function( elem ) {\r\n\t\treturn dir( elem, \"previousSibling\" );\r\n\t},\r\n\tnextUntil: function( elem, i, until ) {\r\n\t\treturn dir( elem, \"nextSibling\", until );\r\n\t},\r\n\tprevUntil: function( elem, i, until ) {\r\n\t\treturn dir( elem, \"previousSibling\", until );\r\n\t},\r\n\tsiblings: function( elem ) {\r\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\r\n\t},\r\n\tchildren: function( elem ) {\r\n\t\treturn siblings( elem.firstChild );\r\n\t},\r\n\tcontents: function( elem ) {\r\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\r\n\t}\r\n}, function( name, fn ) {\r\n\tjQuery.fn[ name ] = function( until, selector ) {\r\n\t\tvar matched = jQuery.map( this, fn, until );\r\n\r\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\r\n\t\t\tselector = until;\r\n\t\t}\r\n\r\n\t\tif ( selector && typeof selector === \"string\" ) {\r\n\t\t\tmatched = jQuery.filter( selector, matched );\r\n\t\t}\r\n\r\n\t\tif ( this.length > 1 ) {\r\n\r\n\t\t\t// Remove duplicates\r\n\t\t\tif ( !guaranteedUnique[ name ] ) {\r\n\t\t\t\tjQuery.uniqueSort( matched );\r\n\t\t\t}\r\n\r\n\t\t\t// Reverse order for parents* and prev-derivatives\r\n\t\t\tif ( rparentsprev.test( name ) ) {\r\n\t\t\t\tmatched.reverse();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( matched );\r\n\t};\r\n} );\r\nvar rnotwhite = ( /\\S+/g );\r\n\r\n\r\n\r\n// Convert String-formatted options into Object-formatted ones\r\nfunction createOptions( options ) {\r\n\tvar object = {};\r\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\r\n\t\tobject[ flag ] = true;\r\n\t} );\r\n\treturn object;\r\n}\r\n\r\n/*\r\n * Create a callback list using the following parameters:\r\n *\r\n *\toptions: an optional list of space-separated options that will change how\r\n *\t\t\tthe callback list behaves or a more traditional option object\r\n *\r\n * By default a callback list will act like an event callback list and can be\r\n * \"fired\" multiple times.\r\n *\r\n * Possible options:\r\n *\r\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\r\n *\r\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\r\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\r\n *\t\t\t\t\tvalues (like a Deferred)\r\n *\r\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\r\n *\r\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\r\n *\r\n */\r\njQuery.Callbacks = function( options ) {\r\n\r\n\t// Convert options from String-formatted to Object-formatted if needed\r\n\t// (we check in cache first)\r\n\toptions = typeof options === \"string\" ?\r\n\t\tcreateOptions( options ) :\r\n\t\tjQuery.extend( {}, options );\r\n\r\n\tvar // Flag to know if list is currently firing\r\n\t\tfiring,\r\n\r\n\t\t// Last fire value for non-forgettable lists\r\n\t\tmemory,\r\n\r\n\t\t// Flag to know if list was already fired\r\n\t\tfired,\r\n\r\n\t\t// Flag to prevent firing\r\n\t\tlocked,\r\n\r\n\t\t// Actual callback list\r\n\t\tlist = [],\r\n\r\n\t\t// Queue of execution data for repeatable lists\r\n\t\tqueue = [],\r\n\r\n\t\t// Index of currently firing callback (modified by add/remove as needed)\r\n\t\tfiringIndex = -1,\r\n\r\n\t\t// Fire callbacks\r\n\t\tfire = function() {\r\n\r\n\t\t\t// Enforce single-firing\r\n\t\t\tlocked = options.once;\r\n\r\n\t\t\t// Execute callbacks for all pending executions,\r\n\t\t\t// respecting firingIndex overrides and runtime changes\r\n\t\t\tfired = firing = true;\r\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\r\n\t\t\t\tmemory = queue.shift();\r\n\t\t\t\twhile ( ++firingIndex < list.length ) {\r\n\r\n\t\t\t\t\t// Run callback and check for early termination\r\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\r\n\t\t\t\t\t\toptions.stopOnFalse ) {\r\n\r\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\r\n\t\t\t\t\t\tfiringIndex = list.length;\r\n\t\t\t\t\t\tmemory = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Forget the data if we're done with it\r\n\t\t\tif ( !options.memory ) {\r\n\t\t\t\tmemory = false;\r\n\t\t\t}\r\n\r\n\t\t\tfiring = false;\r\n\r\n\t\t\t// Clean up if we're done firing for good\r\n\t\t\tif ( locked ) {\r\n\r\n\t\t\t\t// Keep an empty list if we have data for future add calls\r\n\t\t\t\tif ( memory ) {\r\n\t\t\t\t\tlist = [];\r\n\r\n\t\t\t\t// Otherwise, this object is spent\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlist = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Actual Callbacks object\r\n\t\tself = {\r\n\r\n\t\t\t// Add a callback or a collection of callbacks to the list\r\n\t\t\tadd: function() {\r\n\t\t\t\tif ( list ) {\r\n\r\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\r\n\t\t\t\t\tif ( memory && !firing ) {\r\n\t\t\t\t\t\tfiringIndex = list.length - 1;\r\n\t\t\t\t\t\tqueue.push( memory );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t( function add( args ) {\r\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\r\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\r\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\r\n\t\t\t\t\t\t\t\t\tlist.push( arg );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\r\n\r\n\t\t\t\t\t\t\t\t// Inspect recursively\r\n\t\t\t\t\t\t\t\tadd( arg );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} )( arguments );\r\n\r\n\t\t\t\t\tif ( memory && !firing ) {\r\n\t\t\t\t\t\tfire();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Remove a callback from the list\r\n\t\t\tremove: function() {\r\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\r\n\t\t\t\t\tvar index;\r\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\r\n\t\t\t\t\t\tlist.splice( index, 1 );\r\n\r\n\t\t\t\t\t\t// Handle firing indexes\r\n\t\t\t\t\t\tif ( index <= firingIndex ) {\r\n\t\t\t\t\t\t\tfiringIndex--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Check if a given callback is in the list.\r\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\r\n\t\t\thas: function( fn ) {\r\n\t\t\t\treturn fn ?\r\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\r\n\t\t\t\t\tlist.length > 0;\r\n\t\t\t},\r\n\r\n\t\t\t// Remove all callbacks from the list\r\n\t\t\tempty: function() {\r\n\t\t\t\tif ( list ) {\r\n\t\t\t\t\tlist = [];\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Disable .fire and .add\r\n\t\t\t// Abort any current/pending executions\r\n\t\t\t// Clear all callbacks and values\r\n\t\t\tdisable: function() {\r\n\t\t\t\tlocked = queue = [];\r\n\t\t\t\tlist = memory = \"\";\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tdisabled: function() {\r\n\t\t\t\treturn !list;\r\n\t\t\t},\r\n\r\n\t\t\t// Disable .fire\r\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\r\n\t\t\t// Abort any pending executions\r\n\t\t\tlock: function() {\r\n\t\t\t\tlocked = queue = [];\r\n\t\t\t\tif ( !memory ) {\r\n\t\t\t\t\tlist = memory = \"\";\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\t\t\tlocked: function() {\r\n\t\t\t\treturn !!locked;\r\n\t\t\t},\r\n\r\n\t\t\t// Call all callbacks with the given context and arguments\r\n\t\t\tfireWith: function( context, args ) {\r\n\t\t\t\tif ( !locked ) {\r\n\t\t\t\t\targs = args || [];\r\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\r\n\t\t\t\t\tqueue.push( args );\r\n\t\t\t\t\tif ( !firing ) {\r\n\t\t\t\t\t\tfire();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// Call all the callbacks with the given arguments\r\n\t\t\tfire: function() {\r\n\t\t\t\tself.fireWith( this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t},\r\n\r\n\t\t\t// To know if the callbacks have already been called at least once\r\n\t\t\tfired: function() {\r\n\t\t\t\treturn !!fired;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\treturn self;\r\n};\r\n\r\n\r\njQuery.extend( {\r\n\r\n\tDeferred: function( func ) {\r\n\t\tvar tuples = [\r\n\r\n\t\t\t\t// action, add listener, listener list, final state\r\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\r\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\r\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\r\n\t\t\t],\r\n\t\t\tstate = \"pending\",\r\n\t\t\tpromise = {\r\n\t\t\t\tstate: function() {\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t},\r\n\t\t\t\talways: function() {\r\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\r\n\t\t\t\t\tvar fns = arguments;\r\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\r\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\r\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\r\n\r\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\r\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\r\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\r\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\r\n\t\t\t\t\t\t\t\t\treturned.promise()\r\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\r\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\r\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\r\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\r\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tfns = null;\r\n\t\t\t\t\t} ).promise();\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Get a promise for this deferred\r\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\r\n\t\t\t\tpromise: function( obj ) {\r\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdeferred = {};\r\n\r\n\t\t// Keep pipe for back-compat\r\n\t\tpromise.pipe = promise.then;\r\n\r\n\t\t// Add list-specific methods\r\n\t\tjQuery.each( tuples, function( i, tuple ) {\r\n\t\t\tvar list = tuple[ 2 ],\r\n\t\t\t\tstateString = tuple[ 3 ];\r\n\r\n\t\t\t// promise[ done | fail | progress ] = list.add\r\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\r\n\r\n\t\t\t// Handle state\r\n\t\t\tif ( stateString ) {\r\n\t\t\t\tlist.add( function() {\r\n\r\n\t\t\t\t\t// state = [ resolved | rejected ]\r\n\t\t\t\t\tstate = stateString;\r\n\r\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\r\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\r\n\t\t\t}\r\n\r\n\t\t\t// deferred[ resolve | reject | notify ]\r\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\r\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\r\n\t\t\t\treturn this;\r\n\t\t\t};\r\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\r\n\t\t} );\r\n\r\n\t\t// Make the deferred a promise\r\n\t\tpromise.promise( deferred );\r\n\r\n\t\t// Call given func if any\r\n\t\tif ( func ) {\r\n\t\t\tfunc.call( deferred, deferred );\r\n\t\t}\r\n\r\n\t\t// All done!\r\n\t\treturn deferred;\r\n\t},\r\n\r\n\t// Deferred helper\r\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\r\n\t\tvar i = 0,\r\n\t\t\tresolveValues = slice.call( arguments ),\r\n\t\t\tlength = resolveValues.length,\r\n\r\n\t\t\t// the count of uncompleted subordinates\r\n\t\t\tremaining = length !== 1 ||\r\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\r\n\r\n\t\t\t// the master Deferred.\r\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\r\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\r\n\r\n\t\t\t// Update function for both resolve and progress values\r\n\t\t\tupdateFunc = function( i, contexts, values ) {\r\n\t\t\t\treturn function( value ) {\r\n\t\t\t\t\tcontexts[ i ] = this;\r\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\r\n\t\t\t\t\tif ( values === progressValues ) {\r\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\r\n\t\t\t\t\t} else if ( !( --remaining ) ) {\r\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\tprogressValues, progressContexts, resolveContexts;\r\n\r\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\r\n\t\tif ( length > 1 ) {\r\n\t\t\tprogressValues = new Array( length );\r\n\t\t\tprogressContexts = new Array( length );\r\n\t\t\tresolveContexts = new Array( length );\r\n\t\t\tfor ( ; i < length; i++ ) {\r\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\r\n\t\t\t\t\tresolveValues[ i ].promise()\r\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\r\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\r\n\t\t\t\t\t\t.fail( deferred.reject );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t--remaining;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If we're not waiting on anything, resolve the master\r\n\t\tif ( !remaining ) {\r\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\r\n\t\t}\r\n\r\n\t\treturn deferred.promise();\r\n\t}\r\n} );\r\n\r\n\r\n// The deferred used on DOM ready\r\nvar readyList;\r\n\r\njQuery.fn.ready = function( fn ) {\r\n\r\n\t// Add the callback\r\n\tjQuery.ready.promise().done( fn );\r\n\r\n\treturn this;\r\n};\r\n\r\njQuery.extend( {\r\n\r\n\t// Is the DOM ready to be used? Set to true once it occurs.\r\n\tisReady: false,\r\n\r\n\t// A counter to track how many items to wait for before\r\n\t// the ready event fires. See #6781\r\n\treadyWait: 1,\r\n\r\n\t// Hold (or release) the ready event\r\n\tholdReady: function( hold ) {\r\n\t\tif ( hold ) {\r\n\t\t\tjQuery.readyWait++;\r\n\t\t} else {\r\n\t\t\tjQuery.ready( true );\r\n\t\t}\r\n\t},\r\n\r\n\t// Handle when the DOM is ready\r\n\tready: function( wait ) {\r\n\r\n\t\t// Abort if there are pending holds or we're already ready\r\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Remember that the DOM is ready\r\n\t\tjQuery.isReady = true;\r\n\r\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\r\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If there are functions bound, to execute\r\n\t\treadyList.resolveWith( document, [ jQuery ] );\r\n\r\n\t\t// Trigger any bound ready events\r\n\t\tif ( jQuery.fn.triggerHandler ) {\r\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\r\n\t\t\tjQuery( document ).off( \"ready\" );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n/**\r\n * The ready event handler and self cleanup method\r\n */\r\nfunction completed() {\r\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\r\n\twindow.removeEventListener( \"load\", completed );\r\n\tjQuery.ready();\r\n}\r\n\r\njQuery.ready.promise = function( obj ) {\r\n\tif ( !readyList ) {\r\n\r\n\t\treadyList = jQuery.Deferred();\r\n\r\n\t\t// Catch cases where $(document).ready() is called\r\n\t\t// after the browser event has already occurred.\r\n\t\t// Support: IE9-10 only\r\n\t\t// Older IE sometimes signals \"interactive\" too soon\r\n\t\tif ( document.readyState === \"complete\" ||\r\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\r\n\r\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\r\n\t\t\twindow.setTimeout( jQuery.ready );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Use the handy event callback\r\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\r\n\r\n\t\t\t// A fallback to window.onload, that will always work\r\n\t\t\twindow.addEventListener( \"load\", completed );\r\n\t\t}\r\n\t}\r\n\treturn readyList.promise( obj );\r\n};\r\n\r\n// Kick off the DOM ready check even if the user does not\r\njQuery.ready.promise();\r\n\r\n\r\n\r\n\r\n// Multifunctional method to get and set values of a collection\r\n// The value/s can optionally be executed if it's a function\r\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\r\n\tvar i = 0,\r\n\t\tlen = elems.length,\r\n\t\tbulk = key == null;\r\n\r\n\t// Sets many values\r\n\tif ( jQuery.type( key ) === \"object\" ) {\r\n\t\tchainable = true;\r\n\t\tfor ( i in key ) {\r\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\r\n\t\t}\r\n\r\n\t// Sets one value\r\n\t} else if ( value !== undefined ) {\r\n\t\tchainable = true;\r\n\r\n\t\tif ( !jQuery.isFunction( value ) ) {\r\n\t\t\traw = true;\r\n\t\t}\r\n\r\n\t\tif ( bulk ) {\r\n\r\n\t\t\t// Bulk operations run against the entire set\r\n\t\t\tif ( raw ) {\r\n\t\t\t\tfn.call( elems, value );\r\n\t\t\t\tfn = null;\r\n\r\n\t\t\t// ...except when executing function values\r\n\t\t\t} else {\r\n\t\t\t\tbulk = fn;\r\n\t\t\t\tfn = function( elem, key, value ) {\r\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\tfn(\r\n\t\t\t\t\telems[ i ], key, raw ?\r\n\t\t\t\t\tvalue :\r\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn chainable ?\r\n\t\telems :\r\n\r\n\t\t// Gets\r\n\t\tbulk ?\r\n\t\t\tfn.call( elems ) :\r\n\t\t\tlen ? fn( elems[ 0 ], key ) : emptyGet;\r\n};\r\nvar acceptData = function( owner ) {\r\n\r\n\t// Accepts only:\r\n\t//  - Node\r\n\t//    - Node.ELEMENT_NODE\r\n\t//    - Node.DOCUMENT_NODE\r\n\t//  - Object\r\n\t//    - Any\r\n\t/* jshint -W018 */\r\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\r\n};\r\n\r\n\r\n\r\n\r\nfunction Data() {\r\n\tthis.expando = jQuery.expando + Data.uid++;\r\n}\r\n\r\nData.uid = 1;\r\n\r\nData.prototype = {\r\n\r\n\tregister: function( owner, initial ) {\r\n\t\tvar value = initial || {};\r\n\r\n\t\t// If it is a node unlikely to be stringify-ed or looped over\r\n\t\t// use plain assignment\r\n\t\tif ( owner.nodeType ) {\r\n\t\t\towner[ this.expando ] = value;\r\n\r\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\r\n\t\t// configurability must be true to allow the property to be\r\n\t\t// deleted with the delete operator\r\n\t\t} else {\r\n\t\t\tObject.defineProperty( owner, this.expando, {\r\n\t\t\t\tvalue: value,\r\n\t\t\t\twritable: true,\r\n\t\t\t\tconfigurable: true\r\n\t\t\t} );\r\n\t\t}\r\n\t\treturn owner[ this.expando ];\r\n\t},\r\n\tcache: function( owner ) {\r\n\r\n\t\t// We can accept data for non-element nodes in modern browsers,\r\n\t\t// but we should not, see #8335.\r\n\t\t// Always return an empty object.\r\n\t\tif ( !acceptData( owner ) ) {\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\t// Check if the owner object already has a cache\r\n\t\tvar value = owner[ this.expando ];\r\n\r\n\t\t// If not, create one\r\n\t\tif ( !value ) {\r\n\t\t\tvalue = {};\r\n\r\n\t\t\t// We can accept data for non-element nodes in modern browsers,\r\n\t\t\t// but we should not, see #8335.\r\n\t\t\t// Always return an empty object.\r\n\t\t\tif ( acceptData( owner ) ) {\r\n\r\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\r\n\t\t\t\t// use plain assignment\r\n\t\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\t\towner[ this.expando ] = value;\r\n\r\n\t\t\t\t// Otherwise secure it in a non-enumerable property\r\n\t\t\t\t// configurable must be true to allow the property to be\r\n\t\t\t\t// deleted when data is removed\r\n\t\t\t\t} else {\r\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tconfigurable: true\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t},\r\n\tset: function( owner, data, value ) {\r\n\t\tvar prop,\r\n\t\t\tcache = this.cache( owner );\r\n\r\n\t\t// Handle: [ owner, key, value ] args\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\tcache[ data ] = value;\r\n\r\n\t\t// Handle: [ owner, { properties } ] args\r\n\t\t} else {\r\n\r\n\t\t\t// Copy the properties one-by-one to the cache object\r\n\t\t\tfor ( prop in data ) {\r\n\t\t\t\tcache[ prop ] = data[ prop ];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cache;\r\n\t},\r\n\tget: function( owner, key ) {\r\n\t\treturn key === undefined ?\r\n\t\t\tthis.cache( owner ) :\r\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\r\n\t},\r\n\taccess: function( owner, key, value ) {\r\n\t\tvar stored;\r\n\r\n\t\t// In cases where either:\r\n\t\t//\r\n\t\t//   1. No key was specified\r\n\t\t//   2. A string key was specified, but no value provided\r\n\t\t//\r\n\t\t// Take the \"read\" path and allow the get method to determine\r\n\t\t// which value to return, respectively either:\r\n\t\t//\r\n\t\t//   1. The entire cache object\r\n\t\t//   2. The data stored at the key\r\n\t\t//\r\n\t\tif ( key === undefined ||\r\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\r\n\r\n\t\t\tstored = this.get( owner, key );\r\n\r\n\t\t\treturn stored !== undefined ?\r\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\r\n\t\t}\r\n\r\n\t\t// When the key is not a string, or both a key and value\r\n\t\t// are specified, set or extend (existing objects) with either:\r\n\t\t//\r\n\t\t//   1. An object of properties\r\n\t\t//   2. A key and value\r\n\t\t//\r\n\t\tthis.set( owner, key, value );\r\n\r\n\t\t// Since the \"set\" path can have two possible entry points\r\n\t\t// return the expected data based on which path was taken[*]\r\n\t\treturn value !== undefined ? value : key;\r\n\t},\r\n\tremove: function( owner, key ) {\r\n\t\tvar i, name, camel,\r\n\t\t\tcache = owner[ this.expando ];\r\n\r\n\t\tif ( cache === undefined ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( key === undefined ) {\r\n\t\t\tthis.register( owner );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Support array or space separated string of keys\r\n\t\t\tif ( jQuery.isArray( key ) ) {\r\n\r\n\t\t\t\t// If \"name\" is an array of keys...\r\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\r\n\t\t\t\t// keys will be converted to camelCase.\r\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\r\n\t\t\t\t// both plain key and camelCase key. #12786\r\n\t\t\t\t// This will only penalize the array argument path.\r\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\r\n\t\t\t} else {\r\n\t\t\t\tcamel = jQuery.camelCase( key );\r\n\r\n\t\t\t\t// Try the string as a key before any manipulation\r\n\t\t\t\tif ( key in cache ) {\r\n\t\t\t\t\tname = [ key, camel ];\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// If a key with the spaces exists, use it.\r\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\r\n\t\t\t\t\tname = camel;\r\n\t\t\t\t\tname = name in cache ?\r\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ti = name.length;\r\n\r\n\t\t\twhile ( i-- ) {\r\n\t\t\t\tdelete cache[ name[ i ] ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove the expando if there's no more data\r\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\r\n\r\n\t\t\t// Support: Chrome <= 35-45+\r\n\t\t\t// Webkit & Blink performance suffers when deleting properties\r\n\t\t\t// from DOM nodes, so set to undefined instead\r\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\r\n\t\t\tif ( owner.nodeType ) {\r\n\t\t\t\towner[ this.expando ] = undefined;\r\n\t\t\t} else {\r\n\t\t\t\tdelete owner[ this.expando ];\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\thasData: function( owner ) {\r\n\t\tvar cache = owner[ this.expando ];\r\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\r\n\t}\r\n};\r\nvar dataPriv = new Data();\r\n\r\nvar dataUser = new Data();\r\n\r\n\r\n\r\n//\tImplementation Summary\r\n//\r\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\r\n//\t2. Improve the module's maintainability by reducing the storage\r\n//\t\tpaths to a single mechanism.\r\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\r\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\r\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\r\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\r\n\r\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\r\n\trmultiDash = /[A-Z]/g;\r\n\r\nfunction dataAttr( elem, key, data ) {\r\n\tvar name;\r\n\r\n\t// If nothing was found internally, try to fetch any\r\n\t// data from the HTML5 data-* attribute\r\n\tif ( data === undefined && elem.nodeType === 1 ) {\r\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\r\n\t\tdata = elem.getAttribute( name );\r\n\r\n\t\tif ( typeof data === \"string\" ) {\r\n\t\t\ttry {\r\n\t\t\t\tdata = data === \"true\" ? true :\r\n\t\t\t\t\tdata === \"false\" ? false :\r\n\t\t\t\t\tdata === \"null\" ? null :\r\n\r\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\r\n\t\t\t\t\t+data + \"\" === data ? +data :\r\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\r\n\t\t\t\t\tdata;\r\n\t\t\t} catch ( e ) {}\r\n\r\n\t\t\t// Make sure we set the data so it isn't changed later\r\n\t\t\tdataUser.set( elem, key, data );\r\n\t\t} else {\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\njQuery.extend( {\r\n\thasData: function( elem ) {\r\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\r\n\t},\r\n\r\n\tdata: function( elem, name, data ) {\r\n\t\treturn dataUser.access( elem, name, data );\r\n\t},\r\n\r\n\tremoveData: function( elem, name ) {\r\n\t\tdataUser.remove( elem, name );\r\n\t},\r\n\r\n\t// TODO: Now that all calls to _data and _removeData have been replaced\r\n\t// with direct calls to dataPriv methods, these can be deprecated.\r\n\t_data: function( elem, name, data ) {\r\n\t\treturn dataPriv.access( elem, name, data );\r\n\t},\r\n\r\n\t_removeData: function( elem, name ) {\r\n\t\tdataPriv.remove( elem, name );\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tdata: function( key, value ) {\r\n\t\tvar i, name, data,\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tattrs = elem && elem.attributes;\r\n\r\n\t\t// Gets all values\r\n\t\tif ( key === undefined ) {\r\n\t\t\tif ( this.length ) {\r\n\t\t\t\tdata = dataUser.get( elem );\r\n\r\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\r\n\t\t\t\t\ti = attrs.length;\r\n\t\t\t\t\twhile ( i-- ) {\r\n\r\n\t\t\t\t\t\t// Support: IE11+\r\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\r\n\t\t\t\t\t\tif ( attrs[ i ] ) {\r\n\t\t\t\t\t\t\tname = attrs[ i ].name;\r\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\r\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\r\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}\r\n\r\n\t\t// Sets multiple values\r\n\t\tif ( typeof key === \"object\" ) {\r\n\t\t\treturn this.each( function() {\r\n\t\t\t\tdataUser.set( this, key );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn access( this, function( value ) {\r\n\t\t\tvar data, camelKey;\r\n\r\n\t\t\t// The calling jQuery object (element matches) is not empty\r\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\r\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\r\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\r\n\t\t\t// throw an exception if an attempt to read a data cache is made.\r\n\t\t\tif ( elem && value === undefined ) {\r\n\r\n\t\t\t\t// Attempt to get data from the cache\r\n\t\t\t\t// with the key as-is\r\n\t\t\t\tdata = dataUser.get( elem, key ) ||\r\n\r\n\t\t\t\t\t// Try to find dashed key if it exists (gh-2779)\r\n\t\t\t\t\t// This is for 2.2.x only\r\n\t\t\t\t\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\r\n\r\n\t\t\t\tif ( data !== undefined ) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcamelKey = jQuery.camelCase( key );\r\n\r\n\t\t\t\t// Attempt to get data from the cache\r\n\t\t\t\t// with the key camelized\r\n\t\t\t\tdata = dataUser.get( elem, camelKey );\r\n\t\t\t\tif ( data !== undefined ) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Attempt to \"discover\" the data in\r\n\t\t\t\t// HTML5 custom data-* attrs\r\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\r\n\t\t\t\tif ( data !== undefined ) {\r\n\t\t\t\t\treturn data;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We tried really hard, but the data doesn't exist.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Set the data...\r\n\t\t\tcamelKey = jQuery.camelCase( key );\r\n\t\t\tthis.each( function() {\r\n\r\n\t\t\t\t// First, attempt to store a copy or reference of any\r\n\t\t\t\t// data that might've been store with a camelCased key.\r\n\t\t\t\tvar data = dataUser.get( this, camelKey );\r\n\r\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\r\n\t\t\t\t// store property names with dashes in a camelCase form.\r\n\t\t\t\t// This might not apply to all properties...*\r\n\t\t\t\tdataUser.set( this, camelKey, value );\r\n\r\n\t\t\t\t// *... In the case of properties that might _actually_\r\n\t\t\t\t// have dashes, we need to also store a copy of that\r\n\t\t\t\t// unchanged property.\r\n\t\t\t\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\r\n\t\t\t\t\tdataUser.set( this, key, value );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}, null, value, arguments.length > 1, null, true );\r\n\t},\r\n\r\n\tremoveData: function( key ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tdataUser.remove( this, key );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n\r\njQuery.extend( {\r\n\tqueue: function( elem, type, data ) {\r\n\t\tvar queue;\r\n\r\n\t\tif ( elem ) {\r\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\r\n\t\t\tqueue = dataPriv.get( elem, type );\r\n\r\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\r\n\t\t\tif ( data ) {\r\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\r\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqueue.push( data );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn queue || [];\r\n\t\t}\r\n\t},\r\n\r\n\tdequeue: function( elem, type ) {\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\tvar queue = jQuery.queue( elem, type ),\r\n\t\t\tstartLength = queue.length,\r\n\t\t\tfn = queue.shift(),\r\n\t\t\thooks = jQuery._queueHooks( elem, type ),\r\n\t\t\tnext = function() {\r\n\t\t\t\tjQuery.dequeue( elem, type );\r\n\t\t\t};\r\n\r\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\r\n\t\tif ( fn === \"inprogress\" ) {\r\n\t\t\tfn = queue.shift();\r\n\t\t\tstartLength--;\r\n\t\t}\r\n\r\n\t\tif ( fn ) {\r\n\r\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\r\n\t\t\t// automatically dequeued\r\n\t\t\tif ( type === \"fx\" ) {\r\n\t\t\t\tqueue.unshift( \"inprogress\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Clear up the last queue stop function\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tfn.call( elem, next, hooks );\r\n\t\t}\r\n\r\n\t\tif ( !startLength && hooks ) {\r\n\t\t\thooks.empty.fire();\r\n\t\t}\r\n\t},\r\n\r\n\t// Not public - generate a queueHooks object, or return the current one\r\n\t_queueHooks: function( elem, type ) {\r\n\t\tvar key = type + \"queueHooks\";\r\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\r\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\r\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\r\n\t\t\t} )\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tqueue: function( type, data ) {\r\n\t\tvar setter = 2;\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tdata = type;\r\n\t\t\ttype = \"fx\";\r\n\t\t\tsetter--;\r\n\t\t}\r\n\r\n\t\tif ( arguments.length < setter ) {\r\n\t\t\treturn jQuery.queue( this[ 0 ], type );\r\n\t\t}\r\n\r\n\t\treturn data === undefined ?\r\n\t\t\tthis :\r\n\t\t\tthis.each( function() {\r\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\r\n\r\n\t\t\t\t// Ensure a hooks for this queue\r\n\t\t\t\tjQuery._queueHooks( this, type );\r\n\r\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\r\n\t\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t},\r\n\tdequeue: function( type ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.dequeue( this, type );\r\n\t\t} );\r\n\t},\r\n\tclearQueue: function( type ) {\r\n\t\treturn this.queue( type || \"fx\", [] );\r\n\t},\r\n\r\n\t// Get a promise resolved when queues of a certain type\r\n\t// are emptied (fx is the type by default)\r\n\tpromise: function( type, obj ) {\r\n\t\tvar tmp,\r\n\t\t\tcount = 1,\r\n\t\t\tdefer = jQuery.Deferred(),\r\n\t\t\telements = this,\r\n\t\t\ti = this.length,\r\n\t\t\tresolve = function() {\r\n\t\t\t\tif ( !( --count ) ) {\r\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tobj = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\ttype = type || \"fx\";\r\n\r\n\t\twhile ( i-- ) {\r\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\r\n\t\t\tif ( tmp && tmp.empty ) {\r\n\t\t\t\tcount++;\r\n\t\t\t\ttmp.empty.add( resolve );\r\n\t\t\t}\r\n\t\t}\r\n\t\tresolve();\r\n\t\treturn defer.promise( obj );\r\n\t}\r\n} );\r\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\r\n\r\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\r\n\r\n\r\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\r\n\r\nvar isHidden = function( elem, el ) {\r\n\r\n\t\t// isHidden might be called from jQuery#filter function;\r\n\t\t// in that case, element will be second argument\r\n\t\telem = el || elem;\r\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\r\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\r\n\t};\r\n\r\n\r\n\r\nfunction adjustCSS( elem, prop, valueParts, tween ) {\r\n\tvar adjusted,\r\n\t\tscale = 1,\r\n\t\tmaxIterations = 20,\r\n\t\tcurrentValue = tween ?\r\n\t\t\tfunction() { return tween.cur(); } :\r\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\r\n\t\tinitial = currentValue(),\r\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\r\n\r\n\t\t// Starting value computation is required for potential unit mismatches\r\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\r\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\r\n\r\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\r\n\r\n\t\t// Trust units reported by jQuery.css\r\n\t\tunit = unit || initialInUnit[ 3 ];\r\n\r\n\t\t// Make sure we update the tween properties later on\r\n\t\tvalueParts = valueParts || [];\r\n\r\n\t\t// Iteratively approximate from a nonzero starting point\r\n\t\tinitialInUnit = +initial || 1;\r\n\r\n\t\tdo {\r\n\r\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\r\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\r\n\t\t\tscale = scale || \".5\";\r\n\r\n\t\t\t// Adjust and apply\r\n\t\t\tinitialInUnit = initialInUnit / scale;\r\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\r\n\r\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\r\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\r\n\t\t} while (\r\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\r\n\t\t);\r\n\t}\r\n\r\n\tif ( valueParts ) {\r\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\r\n\r\n\t\t// Apply relative offset (+=/-=) if specified\r\n\t\tadjusted = valueParts[ 1 ] ?\r\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\r\n\t\t\t+valueParts[ 2 ];\r\n\t\tif ( tween ) {\r\n\t\t\ttween.unit = unit;\r\n\t\t\ttween.start = initialInUnit;\r\n\t\t\ttween.end = adjusted;\r\n\t\t}\r\n\t}\r\n\treturn adjusted;\r\n}\r\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\r\n\r\nvar rtagName = ( /<([\\w:-]+)/ );\r\n\r\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\r\n\r\n\r\n\r\n// We have to close these tags to support XHTML (#13200)\r\nvar wrapMap = {\r\n\r\n\t// Support: IE9\r\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\r\n\r\n\t// XHTML parsers do not magically insert elements in the\r\n\t// same way that tag soup parsers do. So we cannot shorten\r\n\t// this by omitting <tbody> or other required elements.\r\n\tthead: [ 1, \"<table>\", \"</table>\" ],\r\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\r\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\r\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\r\n\r\n\t_default: [ 0, \"\", \"\" ]\r\n};\r\n\r\n// Support: IE9\r\nwrapMap.optgroup = wrapMap.option;\r\n\r\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\r\nwrapMap.th = wrapMap.td;\r\n\r\n\r\nfunction getAll( context, tag ) {\r\n\r\n\t// Support: IE9-11+\r\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\r\n\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\r\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\r\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\r\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\r\n\t\t\t[];\r\n\r\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\r\n\t\tjQuery.merge( [ context ], ret ) :\r\n\t\tret;\r\n}\r\n\r\n\r\n// Mark scripts as having already been evaluated\r\nfunction setGlobalEval( elems, refElements ) {\r\n\tvar i = 0,\r\n\t\tl = elems.length;\r\n\r\n\tfor ( ; i < l; i++ ) {\r\n\t\tdataPriv.set(\r\n\t\t\telems[ i ],\r\n\t\t\t\"globalEval\",\r\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nvar rhtml = /<|&#?\\w+;/;\r\n\r\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\r\n\tvar elem, tmp, tag, wrap, contains, j,\r\n\t\tfragment = context.createDocumentFragment(),\r\n\t\tnodes = [],\r\n\t\ti = 0,\r\n\t\tl = elems.length;\r\n\r\n\tfor ( ; i < l; i++ ) {\r\n\t\telem = elems[ i ];\r\n\r\n\t\tif ( elem || elem === 0 ) {\r\n\r\n\t\t\t// Add nodes directly\r\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\r\n\r\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\r\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\r\n\r\n\t\t\t// Convert non-html into a text node\r\n\t\t\t} else if ( !rhtml.test( elem ) ) {\r\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\r\n\r\n\t\t\t// Convert html into DOM nodes\r\n\t\t\t} else {\r\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\r\n\r\n\t\t\t\t// Deserialize a standard representation\r\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\r\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\r\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\r\n\r\n\t\t\t\t// Descend through wrappers to the right content\r\n\t\t\t\tj = wrap[ 0 ];\r\n\t\t\t\twhile ( j-- ) {\r\n\t\t\t\t\ttmp = tmp.lastChild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\r\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\r\n\r\n\t\t\t\t// Remember the top-level container\r\n\t\t\t\ttmp = fragment.firstChild;\r\n\r\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\r\n\t\t\t\ttmp.textContent = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove wrapper from fragment\r\n\tfragment.textContent = \"\";\r\n\r\n\ti = 0;\r\n\twhile ( ( elem = nodes[ i++ ] ) ) {\r\n\r\n\t\t// Skip elements already in the context collection (trac-4087)\r\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\r\n\t\t\tif ( ignored ) {\r\n\t\t\t\tignored.push( elem );\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\r\n\r\n\t\t// Append to fragment\r\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\r\n\r\n\t\t// Preserve script evaluation history\r\n\t\tif ( contains ) {\r\n\t\t\tsetGlobalEval( tmp );\r\n\t\t}\r\n\r\n\t\t// Capture executables\r\n\t\tif ( scripts ) {\r\n\t\t\tj = 0;\r\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\r\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\r\n\t\t\t\t\tscripts.push( elem );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn fragment;\r\n}\r\n\r\n\r\n( function() {\r\n\tvar fragment = document.createDocumentFragment(),\r\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\r\n\t\tinput = document.createElement( \"input\" );\r\n\r\n\t// Support: Android 4.0-4.3, Safari<=5.1\r\n\t// Check state lost if the name is set (#11217)\r\n\t// Support: Windows Web Apps (WWA)\r\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\r\n\tinput.setAttribute( \"type\", \"radio\" );\r\n\tinput.setAttribute( \"checked\", \"checked\" );\r\n\tinput.setAttribute( \"name\", \"t\" );\r\n\r\n\tdiv.appendChild( input );\r\n\r\n\t// Support: Safari<=5.1, Android<4.2\r\n\t// Older WebKit doesn't clone checked state correctly in fragments\r\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\r\n\r\n\t// Support: IE<=11+\r\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\r\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\r\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\r\n} )();\r\n\r\n\r\nvar\r\n\trkeyEvent = /^key/,\r\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\r\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\r\n\r\nfunction returnTrue() {\r\n\treturn true;\r\n}\r\n\r\nfunction returnFalse() {\r\n\treturn false;\r\n}\r\n\r\n// Support: IE9\r\n// See #13393 for more info\r\nfunction safeActiveElement() {\r\n\ttry {\r\n\t\treturn document.activeElement;\r\n\t} catch ( err ) { }\r\n}\r\n\r\nfunction on( elem, types, selector, data, fn, one ) {\r\n\tvar origFn, type;\r\n\r\n\t// Types can be a map of types/handlers\r\n\tif ( typeof types === \"object\" ) {\r\n\r\n\t\t// ( types-Object, selector, data )\r\n\t\tif ( typeof selector !== \"string\" ) {\r\n\r\n\t\t\t// ( types-Object, data )\r\n\t\t\tdata = data || selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t\tfor ( type in types ) {\r\n\t\t\ton( elem, type, selector, data, types[ type ], one );\r\n\t\t}\r\n\t\treturn elem;\r\n\t}\r\n\r\n\tif ( data == null && fn == null ) {\r\n\r\n\t\t// ( types, fn )\r\n\t\tfn = selector;\r\n\t\tdata = selector = undefined;\r\n\t} else if ( fn == null ) {\r\n\t\tif ( typeof selector === \"string\" ) {\r\n\r\n\t\t\t// ( types, selector, fn )\r\n\t\t\tfn = data;\r\n\t\t\tdata = undefined;\r\n\t\t} else {\r\n\r\n\t\t\t// ( types, data, fn )\r\n\t\t\tfn = data;\r\n\t\t\tdata = selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t}\r\n\tif ( fn === false ) {\r\n\t\tfn = returnFalse;\r\n\t} else if ( !fn ) {\r\n\t\treturn elem;\r\n\t}\r\n\r\n\tif ( one === 1 ) {\r\n\t\torigFn = fn;\r\n\t\tfn = function( event ) {\r\n\r\n\t\t\t// Can use an empty set, since event contains the info\r\n\t\t\tjQuery().off( event );\r\n\t\t\treturn origFn.apply( this, arguments );\r\n\t\t};\r\n\r\n\t\t// Use same guid so caller can remove using origFn\r\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\r\n\t}\r\n\treturn elem.each( function() {\r\n\t\tjQuery.event.add( this, types, fn, data, selector );\r\n\t} );\r\n}\r\n\r\n/*\r\n * Helper functions for managing events -- not part of the public interface.\r\n * Props to Dean Edwards' addEvent library for many of the ideas.\r\n */\r\njQuery.event = {\r\n\r\n\tglobal: {},\r\n\r\n\tadd: function( elem, types, handler, data, selector ) {\r\n\r\n\t\tvar handleObjIn, eventHandle, tmp,\r\n\t\t\tevents, t, handleObj,\r\n\t\t\tspecial, handlers, type, namespaces, origType,\r\n\t\t\telemData = dataPriv.get( elem );\r\n\r\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\r\n\t\tif ( !elemData ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Caller can pass in an object of custom data in lieu of the handler\r\n\t\tif ( handler.handler ) {\r\n\t\t\thandleObjIn = handler;\r\n\t\t\thandler = handleObjIn.handler;\r\n\t\t\tselector = handleObjIn.selector;\r\n\t\t}\r\n\r\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\r\n\t\tif ( !handler.guid ) {\r\n\t\t\thandler.guid = jQuery.guid++;\r\n\t\t}\r\n\r\n\t\t// Init the element's event structure and main handler, if this is the first\r\n\t\tif ( !( events = elemData.events ) ) {\r\n\t\t\tevents = elemData.events = {};\r\n\t\t}\r\n\t\tif ( !( eventHandle = elemData.handle ) ) {\r\n\t\t\teventHandle = elemData.handle = function( e ) {\r\n\r\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\r\n\t\t\t\t// when an event is called after a page has unloaded\r\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\r\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Handle multiple events separated by a space\r\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\r\n\t\t\ttype = origType = tmp[ 1 ];\r\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// If event changes its type, use the special event handlers for the changed type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// If selector defined, determine special event api type, otherwise given type\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\r\n\t\t\t// Update special based on newly reset type\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\r\n\t\t\t// handleObj is passed to all event handlers\r\n\t\t\thandleObj = jQuery.extend( {\r\n\t\t\t\ttype: type,\r\n\t\t\t\torigType: origType,\r\n\t\t\t\tdata: data,\r\n\t\t\t\thandler: handler,\r\n\t\t\t\tguid: handler.guid,\r\n\t\t\t\tselector: selector,\r\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\r\n\t\t\t\tnamespace: namespaces.join( \".\" )\r\n\t\t\t}, handleObjIn );\r\n\r\n\t\t\t// Init the event handler queue if we're the first\r\n\t\t\tif ( !( handlers = events[ type ] ) ) {\r\n\t\t\t\thandlers = events[ type ] = [];\r\n\t\t\t\thandlers.delegateCount = 0;\r\n\r\n\t\t\t\t// Only use addEventListener if the special events handler returns false\r\n\t\t\t\tif ( !special.setup ||\r\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\r\n\r\n\t\t\t\t\tif ( elem.addEventListener ) {\r\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( special.add ) {\r\n\t\t\t\tspecial.add.call( elem, handleObj );\r\n\r\n\t\t\t\tif ( !handleObj.handler.guid ) {\r\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Add to the element's handler list, delegates in front\r\n\t\t\tif ( selector ) {\r\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\r\n\t\t\t} else {\r\n\t\t\t\thandlers.push( handleObj );\r\n\t\t\t}\r\n\r\n\t\t\t// Keep track of which events have ever been used, for event optimization\r\n\t\t\tjQuery.event.global[ type ] = true;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Detach an event or set of events from an element\r\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\r\n\r\n\t\tvar j, origCount, tmp,\r\n\t\t\tevents, t, handleObj,\r\n\t\t\tspecial, handlers, type, namespaces, origType,\r\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\r\n\r\n\t\tif ( !elemData || !( events = elemData.events ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Once for each type.namespace in types; type may be omitted\r\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\r\n\t\tt = types.length;\r\n\t\twhile ( t-- ) {\r\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\r\n\t\t\ttype = origType = tmp[ 1 ];\r\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\r\n\r\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\r\n\t\t\tif ( !type ) {\r\n\t\t\t\tfor ( type in events ) {\r\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\r\n\t\t\thandlers = events[ type ] || [];\r\n\t\t\ttmp = tmp[ 2 ] &&\r\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\r\n\r\n\t\t\t// Remove matching events\r\n\t\t\torigCount = j = handlers.length;\r\n\t\t\twhile ( j-- ) {\r\n\t\t\t\thandleObj = handlers[ j ];\r\n\r\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\r\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\r\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\r\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\r\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\r\n\t\t\t\t\thandlers.splice( j, 1 );\r\n\r\n\t\t\t\t\tif ( handleObj.selector ) {\r\n\t\t\t\t\t\thandlers.delegateCount--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( special.remove ) {\r\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\r\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\r\n\t\t\tif ( origCount && !handlers.length ) {\r\n\t\t\t\tif ( !special.teardown ||\r\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\r\n\r\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete events[ type ];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Remove data and the expando if it's no longer used\r\n\t\tif ( jQuery.isEmptyObject( events ) ) {\r\n\t\t\tdataPriv.remove( elem, \"handle events\" );\r\n\t\t}\r\n\t},\r\n\r\n\tdispatch: function( event ) {\r\n\r\n\t\t// Make a writable jQuery.Event from the native event object\r\n\t\tevent = jQuery.event.fix( event );\r\n\r\n\t\tvar i, j, ret, matched, handleObj,\r\n\t\t\thandlerQueue = [],\r\n\t\t\targs = slice.call( arguments ),\r\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\r\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\r\n\r\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\r\n\t\targs[ 0 ] = event;\r\n\t\tevent.delegateTarget = this;\r\n\r\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\r\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine handlers\r\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\r\n\r\n\t\t// Run delegates first; they may want to stop propagation beneath us\r\n\t\ti = 0;\r\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\r\n\t\t\tevent.currentTarget = matched.elem;\r\n\r\n\t\t\tj = 0;\r\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\r\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\r\n\r\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\r\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\r\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\r\n\r\n\t\t\t\t\tevent.handleObj = handleObj;\r\n\t\t\t\t\tevent.data = handleObj.data;\r\n\r\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\r\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\r\n\r\n\t\t\t\t\tif ( ret !== undefined ) {\r\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\tevent.stopPropagation();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Call the postDispatch hook for the mapped type\r\n\t\tif ( special.postDispatch ) {\r\n\t\t\tspecial.postDispatch.call( this, event );\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\thandlers: function( event, handlers ) {\r\n\t\tvar i, matches, sel, handleObj,\r\n\t\t\thandlerQueue = [],\r\n\t\t\tdelegateCount = handlers.delegateCount,\r\n\t\t\tcur = event.target;\r\n\r\n\t\t// Support (at least): Chrome, IE9\r\n\t\t// Find delegate handlers\r\n\t\t// Black-hole SVG <use> instance trees (#13180)\r\n\t\t//\r\n\t\t// Support: Firefox<=42+\r\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\r\n\t\tif ( delegateCount && cur.nodeType &&\r\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\r\n\r\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\r\n\r\n\t\t\t\t// Don't check non-elements (#13208)\r\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\r\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\r\n\t\t\t\t\tmatches = [];\r\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\r\n\t\t\t\t\t\thandleObj = handlers[ i ];\r\n\r\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\r\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\r\n\r\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\r\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\r\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\r\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( matches[ sel ] ) {\r\n\t\t\t\t\t\t\tmatches.push( handleObj );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( matches.length ) {\r\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add the remaining (directly-bound) handlers\r\n\t\tif ( delegateCount < handlers.length ) {\r\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\r\n\t\t}\r\n\r\n\t\treturn handlerQueue;\r\n\t},\r\n\r\n\t// Includes some event props shared by KeyEvent and MouseEvent\r\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\r\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\r\n\r\n\tfixHooks: {},\r\n\r\n\tkeyHooks: {\r\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\r\n\t\tfilter: function( event, original ) {\r\n\r\n\t\t\t// Add which for key events\r\n\t\t\tif ( event.which == null ) {\r\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\r\n\t\t\t}\r\n\r\n\t\t\treturn event;\r\n\t\t}\r\n\t},\r\n\r\n\tmouseHooks: {\r\n\t\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\r\n\t\t\t\"screenX screenY toElement\" ).split( \" \" ),\r\n\t\tfilter: function( event, original ) {\r\n\t\t\tvar eventDoc, doc, body,\r\n\t\t\t\tbutton = original.button;\r\n\r\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\r\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\r\n\t\t\t\teventDoc = event.target.ownerDocument || document;\r\n\t\t\t\tdoc = eventDoc.documentElement;\r\n\t\t\t\tbody = eventDoc.body;\r\n\r\n\t\t\t\tevent.pageX = original.clientX +\r\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\r\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\r\n\t\t\t\tevent.pageY = original.clientY +\r\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\r\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\r\n\t\t\t}\r\n\r\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\r\n\t\t\t// Note: button is not normalized, so don't use it\r\n\t\t\tif ( !event.which && button !== undefined ) {\r\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\r\n\t\t\t}\r\n\r\n\t\t\treturn event;\r\n\t\t}\r\n\t},\r\n\r\n\tfix: function( event ) {\r\n\t\tif ( event[ jQuery.expando ] ) {\r\n\t\t\treturn event;\r\n\t\t}\r\n\r\n\t\t// Create a writable copy of the event object and normalize some properties\r\n\t\tvar i, prop, copy,\r\n\t\t\ttype = event.type,\r\n\t\t\toriginalEvent = event,\r\n\t\t\tfixHook = this.fixHooks[ type ];\r\n\r\n\t\tif ( !fixHook ) {\r\n\t\t\tthis.fixHooks[ type ] = fixHook =\r\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\r\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\r\n\t\t\t\t{};\r\n\t\t}\r\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\r\n\r\n\t\tevent = new jQuery.Event( originalEvent );\r\n\r\n\t\ti = copy.length;\r\n\t\twhile ( i-- ) {\r\n\t\t\tprop = copy[ i ];\r\n\t\t\tevent[ prop ] = originalEvent[ prop ];\r\n\t\t}\r\n\r\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\r\n\t\t// All events should have a target; Cordova deviceready doesn't\r\n\t\tif ( !event.target ) {\r\n\t\t\tevent.target = document;\r\n\t\t}\r\n\r\n\t\t// Support: Safari 6.0+, Chrome<28\r\n\t\t// Target should not be a text node (#504, #13143)\r\n\t\tif ( event.target.nodeType === 3 ) {\r\n\t\t\tevent.target = event.target.parentNode;\r\n\t\t}\r\n\r\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\r\n\t},\r\n\r\n\tspecial: {\r\n\t\tload: {\r\n\r\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\r\n\t\t\tnoBubble: true\r\n\t\t},\r\n\t\tfocus: {\r\n\r\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\r\n\t\t\t\t\tthis.focus();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdelegateType: \"focusin\"\r\n\t\t},\r\n\t\tblur: {\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\r\n\t\t\t\t\tthis.blur();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tdelegateType: \"focusout\"\r\n\t\t},\r\n\t\tclick: {\r\n\r\n\t\t\t// For checkbox, fire native event so checked state will be right\r\n\t\t\ttrigger: function() {\r\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\r\n\t\t\t\t\tthis.click();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\r\n\t\t\t_default: function( event ) {\r\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tbeforeunload: {\r\n\t\t\tpostDispatch: function( event ) {\r\n\r\n\t\t\t\t// Support: Firefox 20+\r\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\r\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\r\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.removeEvent = function( elem, type, handle ) {\r\n\r\n\t// This \"if\" is needed for plain objects\r\n\tif ( elem.removeEventListener ) {\r\n\t\telem.removeEventListener( type, handle );\r\n\t}\r\n};\r\n\r\njQuery.Event = function( src, props ) {\r\n\r\n\t// Allow instantiation without the 'new' keyword\r\n\tif ( !( this instanceof jQuery.Event ) ) {\r\n\t\treturn new jQuery.Event( src, props );\r\n\t}\r\n\r\n\t// Event object\r\n\tif ( src && src.type ) {\r\n\t\tthis.originalEvent = src;\r\n\t\tthis.type = src.type;\r\n\r\n\t\t// Events bubbling up the document may have been marked as prevented\r\n\t\t// by a handler lower down the tree; reflect the correct value.\r\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\r\n\t\t\t\tsrc.defaultPrevented === undefined &&\r\n\r\n\t\t\t\t// Support: Android<4.0\r\n\t\t\t\tsrc.returnValue === false ?\r\n\t\t\treturnTrue :\r\n\t\t\treturnFalse;\r\n\r\n\t// Event type\r\n\t} else {\r\n\t\tthis.type = src;\r\n\t}\r\n\r\n\t// Put explicitly provided properties onto the event object\r\n\tif ( props ) {\r\n\t\tjQuery.extend( this, props );\r\n\t}\r\n\r\n\t// Create a timestamp if incoming event doesn't have one\r\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\r\n\r\n\t// Mark it as fixed\r\n\tthis[ jQuery.expando ] = true;\r\n};\r\n\r\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\r\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\r\njQuery.Event.prototype = {\r\n\tconstructor: jQuery.Event,\r\n\tisDefaultPrevented: returnFalse,\r\n\tisPropagationStopped: returnFalse,\r\n\tisImmediatePropagationStopped: returnFalse,\r\n\r\n\tpreventDefault: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isDefaultPrevented = returnTrue;\r\n\r\n\t\tif ( e ) {\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\t},\r\n\tstopPropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isPropagationStopped = returnTrue;\r\n\r\n\t\tif ( e ) {\r\n\t\t\te.stopPropagation();\r\n\t\t}\r\n\t},\r\n\tstopImmediatePropagation: function() {\r\n\t\tvar e = this.originalEvent;\r\n\r\n\t\tthis.isImmediatePropagationStopped = returnTrue;\r\n\r\n\t\tif ( e ) {\r\n\t\t\te.stopImmediatePropagation();\r\n\t\t}\r\n\r\n\t\tthis.stopPropagation();\r\n\t}\r\n};\r\n\r\n// Create mouseenter/leave events using mouseover/out and event-time checks\r\n// so that event delegation works in jQuery.\r\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\r\n//\r\n// Support: Safari 7 only\r\n// Safari sends mouseenter too often; see:\r\n// https://code.google.com/p/chromium/issues/detail?id=470258\r\n// for the description of the bug (it existed in older Chrome versions as well).\r\njQuery.each( {\r\n\tmouseenter: \"mouseover\",\r\n\tmouseleave: \"mouseout\",\r\n\tpointerenter: \"pointerover\",\r\n\tpointerleave: \"pointerout\"\r\n}, function( orig, fix ) {\r\n\tjQuery.event.special[ orig ] = {\r\n\t\tdelegateType: fix,\r\n\t\tbindType: fix,\r\n\r\n\t\thandle: function( event ) {\r\n\t\t\tvar ret,\r\n\t\t\t\ttarget = this,\r\n\t\t\t\trelated = event.relatedTarget,\r\n\t\t\t\thandleObj = event.handleObj;\r\n\r\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\r\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\r\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\r\n\t\t\t\tevent.type = handleObj.origType;\r\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\r\n\t\t\t\tevent.type = fix;\r\n\t\t\t}\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t};\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\ton: function( types, selector, data, fn ) {\r\n\t\treturn on( this, types, selector, data, fn );\r\n\t},\r\n\tone: function( types, selector, data, fn ) {\r\n\t\treturn on( this, types, selector, data, fn, 1 );\r\n\t},\r\n\toff: function( types, selector, fn ) {\r\n\t\tvar handleObj, type;\r\n\t\tif ( types && types.preventDefault && types.handleObj ) {\r\n\r\n\t\t\t// ( event )  dispatched jQuery.Event\r\n\t\t\thandleObj = types.handleObj;\r\n\t\t\tjQuery( types.delegateTarget ).off(\r\n\t\t\t\thandleObj.namespace ?\r\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\r\n\t\t\t\t\thandleObj.origType,\r\n\t\t\t\thandleObj.selector,\r\n\t\t\t\thandleObj.handler\r\n\t\t\t);\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( typeof types === \"object\" ) {\r\n\r\n\t\t\t// ( types-object [, selector] )\r\n\t\t\tfor ( type in types ) {\r\n\t\t\t\tthis.off( type, selector, types[ type ] );\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tif ( selector === false || typeof selector === \"function\" ) {\r\n\r\n\t\t\t// ( types [, fn] )\r\n\t\t\tfn = selector;\r\n\t\t\tselector = undefined;\r\n\t\t}\r\n\t\tif ( fn === false ) {\r\n\t\t\tfn = returnFalse;\r\n\t\t}\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.event.remove( this, types, fn, selector );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n\r\nvar\r\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\r\n\r\n\t// Support: IE 10-11, Edge 10240+\r\n\t// In IE/Edge using regex groups here causes severe slowdowns.\r\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\r\n\trnoInnerhtml = /<script|<style|<link/i,\r\n\r\n\t// checked=\"checked\" or checked\r\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\r\n\trscriptTypeMasked = /^true\\/(.*)/,\r\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\r\n\r\n// Manipulating tables requires a tbody\r\nfunction manipulationTarget( elem, content ) {\r\n\treturn jQuery.nodeName( elem, \"table\" ) &&\r\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\r\n\r\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\r\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\r\n\t\telem;\r\n}\r\n\r\n// Replace/restore the type attribute of script elements for safe DOM manipulation\r\nfunction disableScript( elem ) {\r\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\r\n\treturn elem;\r\n}\r\nfunction restoreScript( elem ) {\r\n\tvar match = rscriptTypeMasked.exec( elem.type );\r\n\r\n\tif ( match ) {\r\n\t\telem.type = match[ 1 ];\r\n\t} else {\r\n\t\telem.removeAttribute( \"type\" );\r\n\t}\r\n\r\n\treturn elem;\r\n}\r\n\r\nfunction cloneCopyEvent( src, dest ) {\r\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\r\n\r\n\tif ( dest.nodeType !== 1 ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// 1. Copy private data: events, handlers, etc.\r\n\tif ( dataPriv.hasData( src ) ) {\r\n\t\tpdataOld = dataPriv.access( src );\r\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\r\n\t\tevents = pdataOld.events;\r\n\r\n\t\tif ( events ) {\r\n\t\t\tdelete pdataCur.handle;\r\n\t\t\tpdataCur.events = {};\r\n\r\n\t\t\tfor ( type in events ) {\r\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\r\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// 2. Copy user data\r\n\tif ( dataUser.hasData( src ) ) {\r\n\t\tudataOld = dataUser.access( src );\r\n\t\tudataCur = jQuery.extend( {}, udataOld );\r\n\r\n\t\tdataUser.set( dest, udataCur );\r\n\t}\r\n}\r\n\r\n// Fix IE bugs, see support tests\r\nfunction fixInput( src, dest ) {\r\n\tvar nodeName = dest.nodeName.toLowerCase();\r\n\r\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\r\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\r\n\t\tdest.checked = src.checked;\r\n\r\n\t// Fails to return the selected option to the default selected state when cloning options\r\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\r\n\t\tdest.defaultValue = src.defaultValue;\r\n\t}\r\n}\r\n\r\nfunction domManip( collection, args, callback, ignored ) {\r\n\r\n\t// Flatten any nested arrays\r\n\targs = concat.apply( [], args );\r\n\r\n\tvar fragment, first, scripts, hasScripts, node, doc,\r\n\t\ti = 0,\r\n\t\tl = collection.length,\r\n\t\tiNoClone = l - 1,\r\n\t\tvalue = args[ 0 ],\r\n\t\tisFunction = jQuery.isFunction( value );\r\n\r\n\t// We can't cloneNode fragments that contain checked, in WebKit\r\n\tif ( isFunction ||\r\n\t\t\t( l > 1 && typeof value === \"string\" &&\r\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\r\n\t\treturn collection.each( function( index ) {\r\n\t\t\tvar self = collection.eq( index );\r\n\t\t\tif ( isFunction ) {\r\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\r\n\t\t\t}\r\n\t\t\tdomManip( self, args, callback, ignored );\r\n\t\t} );\r\n\t}\r\n\r\n\tif ( l ) {\r\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\r\n\t\tfirst = fragment.firstChild;\r\n\r\n\t\tif ( fragment.childNodes.length === 1 ) {\r\n\t\t\tfragment = first;\r\n\t\t}\r\n\r\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\r\n\t\tif ( first || ignored ) {\r\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\r\n\t\t\thasScripts = scripts.length;\r\n\r\n\t\t\t// Use the original fragment for the last item\r\n\t\t\t// instead of the first because it can end up\r\n\t\t\t// being emptied incorrectly in certain situations (#8070).\r\n\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\tnode = fragment;\r\n\r\n\t\t\t\tif ( i !== iNoClone ) {\r\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\r\n\r\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\r\n\t\t\t\t\tif ( hasScripts ) {\r\n\r\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\r\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\r\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback.call( collection[ i ], node, i );\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasScripts ) {\r\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\r\n\r\n\t\t\t\t// Reenable scripts\r\n\t\t\t\tjQuery.map( scripts, restoreScript );\r\n\r\n\t\t\t\t// Evaluate executable scripts on first document insertion\r\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\r\n\t\t\t\t\tnode = scripts[ i ];\r\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\r\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\r\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\r\n\r\n\t\t\t\t\t\tif ( node.src ) {\r\n\r\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\r\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\r\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn collection;\r\n}\r\n\r\nfunction remove( elem, selector, keepData ) {\r\n\tvar node,\r\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\r\n\t\ti = 0;\r\n\r\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\r\n\t\tif ( !keepData && node.nodeType === 1 ) {\r\n\t\t\tjQuery.cleanData( getAll( node ) );\r\n\t\t}\r\n\r\n\t\tif ( node.parentNode ) {\r\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\r\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\r\n\t\t\t}\r\n\t\t\tnode.parentNode.removeChild( node );\r\n\t\t}\r\n\t}\r\n\r\n\treturn elem;\r\n}\r\n\r\njQuery.extend( {\r\n\thtmlPrefilter: function( html ) {\r\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n\t},\r\n\r\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\r\n\t\tvar i, l, srcElements, destElements,\r\n\t\t\tclone = elem.cloneNode( true ),\r\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\r\n\r\n\t\t// Fix IE cloning issues\r\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\r\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\r\n\r\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\r\n\t\t\tdestElements = getAll( clone );\r\n\t\t\tsrcElements = getAll( elem );\r\n\r\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\r\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy the events from the original to the clone\r\n\t\tif ( dataAndEvents ) {\r\n\t\t\tif ( deepDataAndEvents ) {\r\n\t\t\t\tsrcElements = srcElements || getAll( elem );\r\n\t\t\t\tdestElements = destElements || getAll( clone );\r\n\r\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\r\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcloneCopyEvent( elem, clone );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Preserve script evaluation history\r\n\t\tdestElements = getAll( clone, \"script\" );\r\n\t\tif ( destElements.length > 0 ) {\r\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\r\n\t\t}\r\n\r\n\t\t// Return the cloned set\r\n\t\treturn clone;\r\n\t},\r\n\r\n\tcleanData: function( elems ) {\r\n\t\tvar data, elem, type,\r\n\t\t\tspecial = jQuery.event.special,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\r\n\t\t\tif ( acceptData( elem ) ) {\r\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\r\n\t\t\t\t\tif ( data.events ) {\r\n\t\t\t\t\t\tfor ( type in data.events ) {\r\n\t\t\t\t\t\t\tif ( special[ type ] ) {\r\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\r\n\r\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Support: Chrome <= 35-45+\r\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\r\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\r\n\r\n\t\t\t\t\t// Support: Chrome <= 35-45+\r\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\r\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\r\n\t// Keep domManip exposed until 3.0 (gh-2225)\r\n\tdomManip: domManip,\r\n\r\n\tdetach: function( selector ) {\r\n\t\treturn remove( this, selector, true );\r\n\t},\r\n\r\n\tremove: function( selector ) {\r\n\t\treturn remove( this, selector );\r\n\t},\r\n\r\n\ttext: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\treturn value === undefined ?\r\n\t\t\t\tjQuery.text( this ) :\r\n\t\t\t\tthis.empty().each( function() {\r\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\t\t\tthis.textContent = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\tappend: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.appendChild( elem );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tprepend: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\r\n\t\t\t\tvar target = manipulationTarget( this, elem );\r\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tbefore: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tafter: function() {\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tif ( this.parentNode ) {\r\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\tempty: function() {\r\n\t\tvar elem,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\r\n\t\t\tif ( elem.nodeType === 1 ) {\r\n\r\n\t\t\t\t// Prevent memory leaks\r\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\r\n\t\t\t\t// Remove any remaining nodes\r\n\t\t\t\telem.textContent = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\r\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\r\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\r\n\r\n\t\treturn this.map( function() {\r\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\r\n\t\t} );\r\n\t},\r\n\r\n\thtml: function( value ) {\r\n\t\treturn access( this, function( value ) {\r\n\t\t\tvar elem = this[ 0 ] || {},\r\n\t\t\t\ti = 0,\r\n\t\t\t\tl = this.length;\r\n\r\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\r\n\t\t\t\treturn elem.innerHTML;\r\n\t\t\t}\r\n\r\n\t\t\t// See if we can take a shortcut and just use innerHTML\r\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\r\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\r\n\r\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfor ( ; i < l; i++ ) {\r\n\t\t\t\t\t\telem = this[ i ] || {};\r\n\r\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\r\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\r\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\r\n\t\t\t\t\t\t\telem.innerHTML = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telem = 0;\r\n\r\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\r\n\t\t\t\t} catch ( e ) {}\r\n\t\t\t}\r\n\r\n\t\t\tif ( elem ) {\r\n\t\t\t\tthis.empty().append( value );\r\n\t\t\t}\r\n\t\t}, null, value, arguments.length );\r\n\t},\r\n\r\n\treplaceWith: function() {\r\n\t\tvar ignored = [];\r\n\r\n\t\t// Make the changes, replacing each non-ignored context element with the new content\r\n\t\treturn domManip( this, arguments, function( elem ) {\r\n\t\t\tvar parent = this.parentNode;\r\n\r\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\r\n\t\t\t\tjQuery.cleanData( getAll( this ) );\r\n\t\t\t\tif ( parent ) {\r\n\t\t\t\t\tparent.replaceChild( elem, this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t// Force callback invocation\r\n\t\t}, ignored );\r\n\t}\r\n} );\r\n\r\njQuery.each( {\r\n\tappendTo: \"append\",\r\n\tprependTo: \"prepend\",\r\n\tinsertBefore: \"before\",\r\n\tinsertAfter: \"after\",\r\n\treplaceAll: \"replaceWith\"\r\n}, function( name, original ) {\r\n\tjQuery.fn[ name ] = function( selector ) {\r\n\t\tvar elems,\r\n\t\t\tret = [],\r\n\t\t\tinsert = jQuery( selector ),\r\n\t\t\tlast = insert.length - 1,\r\n\t\t\ti = 0;\r\n\r\n\t\tfor ( ; i <= last; i++ ) {\r\n\t\t\telems = i === last ? this : this.clone( true );\r\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\r\n\r\n\t\t\t// Support: QtWebKit\r\n\t\t\t// .get() because push.apply(_, arraylike) throws\r\n\t\t\tpush.apply( ret, elems.get() );\r\n\t\t}\r\n\r\n\t\treturn this.pushStack( ret );\r\n\t};\r\n} );\r\n\r\n\r\nvar iframe,\r\n\telemdisplay = {\r\n\r\n\t\t// Support: Firefox\r\n\t\t// We have to pre-define these values for FF (#10227)\r\n\t\tHTML: \"block\",\r\n\t\tBODY: \"block\"\r\n\t};\r\n\r\n/**\r\n * Retrieve the actual display of a element\r\n * @param {String} name nodeName of the element\r\n * @param {Object} doc Document object\r\n */\r\n\r\n// Called only from within defaultDisplay\r\nfunction actualDisplay( name, doc ) {\r\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\r\n\r\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\r\n\r\n\t// We don't have any data stored on the element,\r\n\t// so use \"detach\" method as fast way to get rid of the element\r\n\telem.detach();\r\n\r\n\treturn display;\r\n}\r\n\r\n/**\r\n * Try to determine the default display value of an element\r\n * @param {String} nodeName\r\n */\r\nfunction defaultDisplay( nodeName ) {\r\n\tvar doc = document,\r\n\t\tdisplay = elemdisplay[ nodeName ];\r\n\r\n\tif ( !display ) {\r\n\t\tdisplay = actualDisplay( nodeName, doc );\r\n\r\n\t\t// If the simple way fails, read from inside an iframe\r\n\t\tif ( display === \"none\" || !display ) {\r\n\r\n\t\t\t// Use the already-created iframe if possible\r\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\r\n\t\t\t\t.appendTo( doc.documentElement );\r\n\r\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\r\n\t\t\tdoc = iframe[ 0 ].contentDocument;\r\n\r\n\t\t\t// Support: IE\r\n\t\t\tdoc.write();\r\n\t\t\tdoc.close();\r\n\r\n\t\t\tdisplay = actualDisplay( nodeName, doc );\r\n\t\t\tiframe.detach();\r\n\t\t}\r\n\r\n\t\t// Store the correct default display\r\n\t\telemdisplay[ nodeName ] = display;\r\n\t}\r\n\r\n\treturn display;\r\n}\r\nvar rmargin = ( /^margin/ );\r\n\r\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\r\n\r\nvar getStyles = function( elem ) {\r\n\r\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\r\n\t\t// IE throws on elements created in popups\r\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n\t\tvar view = elem.ownerDocument.defaultView;\r\n\r\n\t\tif ( !view || !view.opener ) {\r\n\t\t\tview = window;\r\n\t\t}\r\n\r\n\t\treturn view.getComputedStyle( elem );\r\n\t};\r\n\r\nvar swap = function( elem, options, callback, args ) {\r\n\tvar ret, name,\r\n\t\told = {};\r\n\r\n\t// Remember the old values, and insert the new ones\r\n\tfor ( name in options ) {\r\n\t\told[ name ] = elem.style[ name ];\r\n\t\telem.style[ name ] = options[ name ];\r\n\t}\r\n\r\n\tret = callback.apply( elem, args || [] );\r\n\r\n\t// Revert the old values\r\n\tfor ( name in options ) {\r\n\t\telem.style[ name ] = old[ name ];\r\n\t}\r\n\r\n\treturn ret;\r\n};\r\n\r\n\r\nvar documentElement = document.documentElement;\r\n\r\n\r\n\r\n( function() {\r\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\r\n\t\tcontainer = document.createElement( \"div\" ),\r\n\t\tdiv = document.createElement( \"div\" );\r\n\r\n\t// Finish early in limited (non-browser) environments\r\n\tif ( !div.style ) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Support: IE9-11+\r\n\t// Style of cloned element affects source element cloned (#8908)\r\n\tdiv.style.backgroundClip = \"content-box\";\r\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\r\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\r\n\r\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\r\n\t\t\"padding:0;margin-top:1px;position:absolute\";\r\n\tcontainer.appendChild( div );\r\n\r\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\r\n\t// so they're executed at the same time to save the second computation.\r\n\tfunction computeStyleTests() {\r\n\t\tdiv.style.cssText =\r\n\r\n\t\t\t// Support: Firefox<29, Android 2.3\r\n\t\t\t// Vendor-prefix box-sizing\r\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\r\n\t\t\t\"position:relative;display:block;\" +\r\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\r\n\t\t\t\"top:1%;width:50%\";\r\n\t\tdiv.innerHTML = \"\";\r\n\t\tdocumentElement.appendChild( container );\r\n\r\n\t\tvar divStyle = window.getComputedStyle( div );\r\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\r\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\r\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\r\n\r\n\t\t// Support: Android 4.0 - 4.3 only\r\n\t\t// Some styles come back with percentage values, even though they shouldn't\r\n\t\tdiv.style.marginRight = \"50%\";\r\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\r\n\r\n\t\tdocumentElement.removeChild( container );\r\n\t}\r\n\r\n\tjQuery.extend( support, {\r\n\t\tpixelPosition: function() {\r\n\r\n\t\t\t// This test is executed only once but we still do memoizing\r\n\t\t\t// since we can use the boxSizingReliable pre-computing.\r\n\t\t\t// No need to check if the test was already performed, though.\r\n\t\t\tcomputeStyleTests();\r\n\t\t\treturn pixelPositionVal;\r\n\t\t},\r\n\t\tboxSizingReliable: function() {\r\n\t\t\tif ( boxSizingReliableVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn boxSizingReliableVal;\r\n\t\t},\r\n\t\tpixelMarginRight: function() {\r\n\r\n\t\t\t// Support: Android 4.0-4.3\r\n\t\t\t// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal\r\n\t\t\t// since that compresses better and they're computed together anyway.\r\n\t\t\tif ( boxSizingReliableVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn pixelMarginRightVal;\r\n\t\t},\r\n\t\treliableMarginLeft: function() {\r\n\r\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\r\n\t\t\tif ( boxSizingReliableVal == null ) {\r\n\t\t\t\tcomputeStyleTests();\r\n\t\t\t}\r\n\t\t\treturn reliableMarginLeftVal;\r\n\t\t},\r\n\t\treliableMarginRight: function() {\r\n\r\n\t\t\t// Support: Android 2.3\r\n\t\t\t// Check if div with explicit width and no margin-right incorrectly\r\n\t\t\t// gets computed margin-right based on width of container. (#3333)\r\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\r\n\t\t\t// This support function is only executed once so no memoizing is needed.\r\n\t\t\tvar ret,\r\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\r\n\r\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\r\n\t\t\tmarginDiv.style.cssText = div.style.cssText =\r\n\r\n\t\t\t\t// Support: Android 2.3\r\n\t\t\t\t// Vendor-prefix box-sizing\r\n\t\t\t\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\r\n\t\t\t\t\"display:block;margin:0;border:0;padding:0\";\r\n\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\r\n\t\t\tdiv.style.width = \"1px\";\r\n\t\t\tdocumentElement.appendChild( container );\r\n\r\n\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\r\n\r\n\t\t\tdocumentElement.removeChild( container );\r\n\t\t\tdiv.removeChild( marginDiv );\r\n\r\n\t\t\treturn ret;\r\n\t\t}\r\n\t} );\r\n} )();\r\n\r\n\r\nfunction curCSS( elem, name, computed ) {\r\n\tvar width, minWidth, maxWidth, ret,\r\n\t\tstyle = elem.style;\r\n\r\n\tcomputed = computed || getStyles( elem );\r\n\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\r\n\r\n\t// Support: Opera 12.1x only\r\n\t// Fall back to style even without computed\r\n\t// computed is undefined for elems on document fragments\r\n\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\r\n\t\tret = jQuery.style( elem, name );\r\n\t}\r\n\r\n\t// Support: IE9\r\n\t// getPropertyValue is only needed for .css('filter') (#12537)\r\n\tif ( computed ) {\r\n\r\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\r\n\t\t// Android Browser returns percentage for some values,\r\n\t\t// but width seems to be reliably pixels.\r\n\t\t// This is against the CSSOM draft spec:\r\n\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\r\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\r\n\r\n\t\t\t// Remember the original values\r\n\t\t\twidth = style.width;\r\n\t\t\tminWidth = style.minWidth;\r\n\t\t\tmaxWidth = style.maxWidth;\r\n\r\n\t\t\t// Put in the new values to get a computed value out\r\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\r\n\t\t\tret = computed.width;\r\n\r\n\t\t\t// Revert the changed values\r\n\t\t\tstyle.width = width;\r\n\t\t\tstyle.minWidth = minWidth;\r\n\t\t\tstyle.maxWidth = maxWidth;\r\n\t\t}\r\n\t}\r\n\r\n\treturn ret !== undefined ?\r\n\r\n\t\t// Support: IE9-11+\r\n\t\t// IE returns zIndex value as an integer.\r\n\t\tret + \"\" :\r\n\t\tret;\r\n}\r\n\r\n\r\nfunction addGetHookIf( conditionFn, hookFn ) {\r\n\r\n\t// Define the hook, we'll check on the first run if it's really needed.\r\n\treturn {\r\n\t\tget: function() {\r\n\t\t\tif ( conditionFn() ) {\r\n\r\n\t\t\t\t// Hook not needed (or it's not possible to use it due\r\n\t\t\t\t// to missing dependency), remove it.\r\n\t\t\t\tdelete this.get;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\r\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\r\n\t\t}\r\n\t};\r\n}\r\n\r\n\r\nvar\r\n\r\n\t// Swappable if display is none or starts with table\r\n\t// except \"table\", \"table-cell\", or \"table-caption\"\r\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\r\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\r\n\r\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\r\n\tcssNormalTransform = {\r\n\t\tletterSpacing: \"0\",\r\n\t\tfontWeight: \"400\"\r\n\t},\r\n\r\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\r\n\temptyStyle = document.createElement( \"div\" ).style;\r\n\r\n// Return a css property mapped to a potentially vendor prefixed property\r\nfunction vendorPropName( name ) {\r\n\r\n\t// Shortcut for names that are not vendor prefixed\r\n\tif ( name in emptyStyle ) {\r\n\t\treturn name;\r\n\t}\r\n\r\n\t// Check for vendor prefixed names\r\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\r\n\t\ti = cssPrefixes.length;\r\n\r\n\twhile ( i-- ) {\r\n\t\tname = cssPrefixes[ i ] + capName;\r\n\t\tif ( name in emptyStyle ) {\r\n\t\t\treturn name;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction setPositiveNumber( elem, value, subtract ) {\r\n\r\n\t// Any relative (+/-) values have already been\r\n\t// normalized at this point\r\n\tvar matches = rcssNum.exec( value );\r\n\treturn matches ?\r\n\r\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\r\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\r\n\t\tvalue;\r\n}\r\n\r\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\r\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\r\n\r\n\t\t// If we already have the right measurement, avoid augmentation\r\n\t\t4 :\r\n\r\n\t\t// Otherwise initialize for horizontal or vertical properties\r\n\t\tname === \"width\" ? 1 : 0,\r\n\r\n\t\tval = 0;\r\n\r\n\tfor ( ; i < 4; i += 2 ) {\r\n\r\n\t\t// Both box models exclude margin, so add it if we want it\r\n\t\tif ( extra === \"margin\" ) {\r\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\r\n\t\t}\r\n\r\n\t\tif ( isBorderBox ) {\r\n\r\n\t\t\t// border-box includes padding, so remove it if we want content\r\n\t\t\tif ( extra === \"content\" ) {\r\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\t\t\t}\r\n\r\n\t\t\t// At this point, extra isn't border nor margin, so remove border\r\n\t\t\tif ( extra !== \"margin\" ) {\r\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\t\t} else {\r\n\r\n\t\t\t// At this point, extra isn't content, so add padding\r\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\r\n\r\n\t\t\t// At this point, extra isn't content nor padding, so add border\r\n\t\t\tif ( extra !== \"padding\" ) {\r\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn val;\r\n}\r\n\r\nfunction getWidthOrHeight( elem, name, extra ) {\r\n\r\n\t// Start with offset property, which is equivalent to the border-box value\r\n\tvar valueIsBorderBox = true,\r\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\r\n\t\tstyles = getStyles( elem ),\r\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\r\n\r\n\t// Support: IE11 only\r\n\t// In IE 11 fullscreen elements inside of an iframe have\r\n\t// 100x too small dimensions (gh-1764).\r\n\tif ( document.msFullscreenElement && window.top !== window ) {\r\n\r\n\t\t// Support: IE11 only\r\n\t\t// Running getBoundingClientRect on a disconnected node\r\n\t\t// in IE throws an error.\r\n\t\tif ( elem.getClientRects().length ) {\r\n\t\t\tval = Math.round( elem.getBoundingClientRect()[ name ] * 100 );\r\n\t\t}\r\n\t}\r\n\r\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\r\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\r\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\r\n\tif ( val <= 0 || val == null ) {\r\n\r\n\t\t// Fall back to computed then uncomputed css if necessary\r\n\t\tval = curCSS( elem, name, styles );\r\n\t\tif ( val < 0 || val == null ) {\r\n\t\t\tval = elem.style[ name ];\r\n\t\t}\r\n\r\n\t\t// Computed unit is not pixels. Stop here and return.\r\n\t\tif ( rnumnonpx.test( val ) ) {\r\n\t\t\treturn val;\r\n\t\t}\r\n\r\n\t\t// Check for style in case a browser which returns unreliable values\r\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\r\n\t\tvalueIsBorderBox = isBorderBox &&\r\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\r\n\r\n\t\t// Normalize \"\", auto, and prepare for extra\r\n\t\tval = parseFloat( val ) || 0;\r\n\t}\r\n\r\n\t// Use the active box-sizing model to add/subtract irrelevant styles\r\n\treturn ( val +\r\n\t\taugmentWidthOrHeight(\r\n\t\t\telem,\r\n\t\t\tname,\r\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\r\n\t\t\tvalueIsBorderBox,\r\n\t\t\tstyles\r\n\t\t)\r\n\t) + \"px\";\r\n}\r\n\r\nfunction showHide( elements, show ) {\r\n\tvar display, elem, hidden,\r\n\t\tvalues = [],\r\n\t\tindex = 0,\r\n\t\tlength = elements.length;\r\n\r\n\tfor ( ; index < length; index++ ) {\r\n\t\telem = elements[ index ];\r\n\t\tif ( !elem.style ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\r\n\t\tdisplay = elem.style.display;\r\n\t\tif ( show ) {\r\n\r\n\t\t\t// Reset the inline display of this element to learn if it is\r\n\t\t\t// being hidden by cascaded rules or not\r\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\r\n\t\t\t\telem.style.display = \"\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set elements which have been overridden with display: none\r\n\t\t\t// in a stylesheet to whatever the default browser style is\r\n\t\t\t// for such an element\r\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\r\n\t\t\t\tvalues[ index ] = dataPriv.access(\r\n\t\t\t\t\telem,\r\n\t\t\t\t\t\"olddisplay\",\r\n\t\t\t\t\tdefaultDisplay( elem.nodeName )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\thidden = isHidden( elem );\r\n\r\n\t\t\tif ( display !== \"none\" || !hidden ) {\r\n\t\t\t\tdataPriv.set(\r\n\t\t\t\t\telem,\r\n\t\t\t\t\t\"olddisplay\",\r\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Set the display of most of the elements in a second loop\r\n\t// to avoid the constant reflow\r\n\tfor ( index = 0; index < length; index++ ) {\r\n\t\telem = elements[ index ];\r\n\t\tif ( !elem.style ) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\r\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\r\n\t\t}\r\n\t}\r\n\r\n\treturn elements;\r\n}\r\n\r\njQuery.extend( {\r\n\r\n\t// Add in style property hooks for overriding the default\r\n\t// behavior of getting and setting a style property\r\n\tcssHooks: {\r\n\t\topacity: {\r\n\t\t\tget: function( elem, computed ) {\r\n\t\t\t\tif ( computed ) {\r\n\r\n\t\t\t\t\t// We should always get a number back from opacity\r\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\r\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t// Don't automatically add \"px\" to these possibly-unitless properties\r\n\tcssNumber: {\r\n\t\t\"animationIterationCount\": true,\r\n\t\t\"columnCount\": true,\r\n\t\t\"fillOpacity\": true,\r\n\t\t\"flexGrow\": true,\r\n\t\t\"flexShrink\": true,\r\n\t\t\"fontWeight\": true,\r\n\t\t\"lineHeight\": true,\r\n\t\t\"opacity\": true,\r\n\t\t\"order\": true,\r\n\t\t\"orphans\": true,\r\n\t\t\"widows\": true,\r\n\t\t\"zIndex\": true,\r\n\t\t\"zoom\": true\r\n\t},\r\n\r\n\t// Add in properties whose names you wish to fix before\r\n\t// setting or getting the value\r\n\tcssProps: {\r\n\t\t\"float\": \"cssFloat\"\r\n\t},\r\n\r\n\t// Get and set the style property on a DOM Node\r\n\tstyle: function( elem, name, value, extra ) {\r\n\r\n\t\t// Don't set styles on text and comment nodes\r\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Make sure that we're working with the right name\r\n\t\tvar ret, type, hooks,\r\n\t\t\torigName = jQuery.camelCase( name ),\r\n\t\t\tstyle = elem.style;\r\n\r\n\t\tname = jQuery.cssProps[ origName ] ||\r\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\r\n\r\n\t\t// Gets hook for the prefixed version, then unprefixed version\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// Check if we're setting a value\r\n\t\tif ( value !== undefined ) {\r\n\t\t\ttype = typeof value;\r\n\r\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\r\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\r\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\r\n\r\n\t\t\t\t// Fixes bug #9237\r\n\t\t\t\ttype = \"number\";\r\n\t\t\t}\r\n\r\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\r\n\t\t\tif ( value == null || value !== value ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\r\n\t\t\tif ( type === \"number\" ) {\r\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\r\n\t\t\t}\r\n\r\n\t\t\t// Support: IE9-11+\r\n\t\t\t// background-* props affect original clone's values\r\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\r\n\t\t\t\tstyle[ name ] = \"inherit\";\r\n\t\t\t}\r\n\r\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\r\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\r\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\r\n\r\n\t\t\t\tstyle[ name ] = value;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// If a hook was provided get the non-computed value from there\r\n\t\t\tif ( hooks && \"get\" in hooks &&\r\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\r\n\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\t// Otherwise just get the value from the style object\r\n\t\t\treturn style[ name ];\r\n\t\t}\r\n\t},\r\n\r\n\tcss: function( elem, name, extra, styles ) {\r\n\t\tvar val, num, hooks,\r\n\t\t\torigName = jQuery.camelCase( name );\r\n\r\n\t\t// Make sure that we're working with the right name\r\n\t\tname = jQuery.cssProps[ origName ] ||\r\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\r\n\r\n\t\t// Try prefixed name followed by the unprefixed name\r\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\r\n\r\n\t\t// If a hook was provided get the computed value from there\r\n\t\tif ( hooks && \"get\" in hooks ) {\r\n\t\t\tval = hooks.get( elem, true, extra );\r\n\t\t}\r\n\r\n\t\t// Otherwise, if a way to get the computed value exists, use that\r\n\t\tif ( val === undefined ) {\r\n\t\t\tval = curCSS( elem, name, styles );\r\n\t\t}\r\n\r\n\t\t// Convert \"normal\" to computed value\r\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\r\n\t\t\tval = cssNormalTransform[ name ];\r\n\t\t}\r\n\r\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\r\n\t\tif ( extra === \"\" || extra ) {\r\n\t\t\tnum = parseFloat( val );\r\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\r\n\tjQuery.cssHooks[ name ] = {\r\n\t\tget: function( elem, computed, extra ) {\r\n\t\t\tif ( computed ) {\r\n\r\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\r\n\t\t\t\t// but it must have a current display style that would benefit\r\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\r\n\t\t\t\t\telem.offsetWidth === 0 ?\r\n\t\t\t\t\t\tswap( elem, cssShow, function() {\r\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\r\n\t\t\t\t\t\t} ) :\r\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tset: function( elem, value, extra ) {\r\n\t\t\tvar matches,\r\n\t\t\t\tstyles = extra && getStyles( elem ),\r\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\r\n\t\t\t\t\telem,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\textra,\r\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\r\n\t\t\t\t\tstyles\r\n\t\t\t\t);\r\n\r\n\t\t\t// Convert to pixels if value adjustment is needed\r\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\r\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\r\n\r\n\t\t\t\telem.style[ name ] = value;\r\n\t\t\t\tvalue = jQuery.css( elem, name );\r\n\t\t\t}\r\n\r\n\t\t\treturn setPositiveNumber( elem, value, subtract );\r\n\t\t}\r\n\t};\r\n} );\r\n\r\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\r\n\tfunction( elem, computed ) {\r\n\t\tif ( computed ) {\r\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\r\n\t\t\t\telem.getBoundingClientRect().left -\r\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\r\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\r\n\t\t\t\t\t} )\r\n\t\t\t\t) + \"px\";\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// Support: Android 2.3\r\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\r\n\tfunction( elem, computed ) {\r\n\t\tif ( computed ) {\r\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\r\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\r\n\t\t}\r\n\t}\r\n);\r\n\r\n// These hooks are used by animate to expand properties\r\njQuery.each( {\r\n\tmargin: \"\",\r\n\tpadding: \"\",\r\n\tborder: \"Width\"\r\n}, function( prefix, suffix ) {\r\n\tjQuery.cssHooks[ prefix + suffix ] = {\r\n\t\texpand: function( value ) {\r\n\t\t\tvar i = 0,\r\n\t\t\t\texpanded = {},\r\n\r\n\t\t\t\t// Assumes a single number if not a string\r\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\r\n\r\n\t\t\tfor ( ; i < 4; i++ ) {\r\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\r\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\r\n\t\t\t}\r\n\r\n\t\t\treturn expanded;\r\n\t\t}\r\n\t};\r\n\r\n\tif ( !rmargin.test( prefix ) ) {\r\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\r\n\t}\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\tcss: function( name, value ) {\r\n\t\treturn access( this, function( elem, name, value ) {\r\n\t\t\tvar styles, len,\r\n\t\t\t\tmap = {},\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\tif ( jQuery.isArray( name ) ) {\r\n\t\t\t\tstyles = getStyles( elem );\r\n\t\t\t\tlen = name.length;\r\n\r\n\t\t\t\tfor ( ; i < len; i++ ) {\r\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn map;\r\n\t\t\t}\r\n\r\n\t\t\treturn value !== undefined ?\r\n\t\t\t\tjQuery.style( elem, name, value ) :\r\n\t\t\t\tjQuery.css( elem, name );\r\n\t\t}, name, value, arguments.length > 1 );\r\n\t},\r\n\tshow: function() {\r\n\t\treturn showHide( this, true );\r\n\t},\r\n\thide: function() {\r\n\t\treturn showHide( this );\r\n\t},\r\n\ttoggle: function( state ) {\r\n\t\tif ( typeof state === \"boolean\" ) {\r\n\t\t\treturn state ? this.show() : this.hide();\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tif ( isHidden( this ) ) {\r\n\t\t\t\tjQuery( this ).show();\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this ).hide();\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n\r\nfunction Tween( elem, options, prop, end, easing ) {\r\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\r\n}\r\njQuery.Tween = Tween;\r\n\r\nTween.prototype = {\r\n\tconstructor: Tween,\r\n\tinit: function( elem, options, prop, end, easing, unit ) {\r\n\t\tthis.elem = elem;\r\n\t\tthis.prop = prop;\r\n\t\tthis.easing = easing || jQuery.easing._default;\r\n\t\tthis.options = options;\r\n\t\tthis.start = this.now = this.cur();\r\n\t\tthis.end = end;\r\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\r\n\t},\r\n\tcur: function() {\r\n\t\tvar hooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\treturn hooks && hooks.get ?\r\n\t\t\thooks.get( this ) :\r\n\t\t\tTween.propHooks._default.get( this );\r\n\t},\r\n\trun: function( percent ) {\r\n\t\tvar eased,\r\n\t\t\thooks = Tween.propHooks[ this.prop ];\r\n\r\n\t\tif ( this.options.duration ) {\r\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\r\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.pos = eased = percent;\r\n\t\t}\r\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\r\n\r\n\t\tif ( this.options.step ) {\r\n\t\t\tthis.options.step.call( this.elem, this.now, this );\r\n\t\t}\r\n\r\n\t\tif ( hooks && hooks.set ) {\r\n\t\t\thooks.set( this );\r\n\t\t} else {\r\n\t\t\tTween.propHooks._default.set( this );\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\nTween.prototype.init.prototype = Tween.prototype;\r\n\r\nTween.propHooks = {\r\n\t_default: {\r\n\t\tget: function( tween ) {\r\n\t\t\tvar result;\r\n\r\n\t\t\t// Use a property on the element directly when it is not a DOM element,\r\n\t\t\t// or when there is no matching style property that exists.\r\n\t\t\tif ( tween.elem.nodeType !== 1 ||\r\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\r\n\t\t\t\treturn tween.elem[ tween.prop ];\r\n\t\t\t}\r\n\r\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\r\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\r\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\r\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\r\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\r\n\r\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\r\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\r\n\t\t},\r\n\t\tset: function( tween ) {\r\n\r\n\t\t\t// Use step hook for back compat.\r\n\t\t\t// Use cssHook if its there.\r\n\t\t\t// Use .style if available and use plain properties where available.\r\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\r\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\r\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\r\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\r\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\r\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\r\n\t\t\t} else {\r\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Support: IE9\r\n// Panic based approach to setting things on disconnected nodes\r\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\r\n\tset: function( tween ) {\r\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\r\n\t\t\ttween.elem[ tween.prop ] = tween.now;\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.easing = {\r\n\tlinear: function( p ) {\r\n\t\treturn p;\r\n\t},\r\n\tswing: function( p ) {\r\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\r\n\t},\r\n\t_default: \"swing\"\r\n};\r\n\r\njQuery.fx = Tween.prototype.init;\r\n\r\n// Back Compat <1.8 extension point\r\njQuery.fx.step = {};\r\n\r\n\r\n\r\n\r\nvar\r\n\tfxNow, timerId,\r\n\trfxtypes = /^(?:toggle|show|hide)$/,\r\n\trrun = /queueHooks$/;\r\n\r\n// Animations created synchronously will run synchronously\r\nfunction createFxNow() {\r\n\twindow.setTimeout( function() {\r\n\t\tfxNow = undefined;\r\n\t} );\r\n\treturn ( fxNow = jQuery.now() );\r\n}\r\n\r\n// Generate parameters to create a standard animation\r\nfunction genFx( type, includeWidth ) {\r\n\tvar which,\r\n\t\ti = 0,\r\n\t\tattrs = { height: type };\r\n\r\n\t// If we include width, step value is 1 to do all cssExpand values,\r\n\t// otherwise step value is 2 to skip over Left and Right\r\n\tincludeWidth = includeWidth ? 1 : 0;\r\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\r\n\t\twhich = cssExpand[ i ];\r\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\r\n\t}\r\n\r\n\tif ( includeWidth ) {\r\n\t\tattrs.opacity = attrs.width = type;\r\n\t}\r\n\r\n\treturn attrs;\r\n}\r\n\r\nfunction createTween( value, prop, animation ) {\r\n\tvar tween,\r\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\r\n\t\tindex = 0,\r\n\t\tlength = collection.length;\r\n\tfor ( ; index < length; index++ ) {\r\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\r\n\r\n\t\t\t// We're done with this property\r\n\t\t\treturn tween;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction defaultPrefilter( elem, props, opts ) {\r\n\t/* jshint validthis: true */\r\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\r\n\t\tanim = this,\r\n\t\torig = {},\r\n\t\tstyle = elem.style,\r\n\t\thidden = elem.nodeType && isHidden( elem ),\r\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\r\n\r\n\t// Handle queue: false promises\r\n\tif ( !opts.queue ) {\r\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\r\n\t\tif ( hooks.unqueued == null ) {\r\n\t\t\thooks.unqueued = 0;\r\n\t\t\toldfire = hooks.empty.fire;\r\n\t\t\thooks.empty.fire = function() {\r\n\t\t\t\tif ( !hooks.unqueued ) {\r\n\t\t\t\t\toldfire();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t\thooks.unqueued++;\r\n\r\n\t\tanim.always( function() {\r\n\r\n\t\t\t// Ensure the complete handler is called before this completes\r\n\t\t\tanim.always( function() {\r\n\t\t\t\thooks.unqueued--;\r\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\r\n\t\t\t\t\thooks.empty.fire();\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\t// Height/width overflow pass\r\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\r\n\r\n\t\t// Make sure that nothing sneaks out\r\n\t\t// Record all 3 overflow attributes because IE9-10 do not\r\n\t\t// change the overflow attribute when overflowX and\r\n\t\t// overflowY are set to the same value\r\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\r\n\r\n\t\t// Set display property to inline-block for height/width\r\n\t\t// animations on inline elements that are having width/height animated\r\n\t\tdisplay = jQuery.css( elem, \"display\" );\r\n\r\n\t\t// Test default display if display is currently \"none\"\r\n\t\tcheckDisplay = display === \"none\" ?\r\n\t\t\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\r\n\r\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\r\n\t\t\tstyle.display = \"inline-block\";\r\n\t\t}\r\n\t}\r\n\r\n\tif ( opts.overflow ) {\r\n\t\tstyle.overflow = \"hidden\";\r\n\t\tanim.always( function() {\r\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\r\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\r\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\r\n\t\t} );\r\n\t}\r\n\r\n\t// show/hide pass\r\n\tfor ( prop in props ) {\r\n\t\tvalue = props[ prop ];\r\n\t\tif ( rfxtypes.exec( value ) ) {\r\n\t\t\tdelete props[ prop ];\r\n\t\t\ttoggle = toggle || value === \"toggle\";\r\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\r\n\r\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\r\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\r\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\r\n\t\t\t\t\thidden = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\r\n\r\n\t\t// Any non-fx value stops us from restoring the original display value\r\n\t\t} else {\r\n\t\t\tdisplay = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !jQuery.isEmptyObject( orig ) ) {\r\n\t\tif ( dataShow ) {\r\n\t\t\tif ( \"hidden\" in dataShow ) {\r\n\t\t\t\thidden = dataShow.hidden;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\r\n\t\t}\r\n\r\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\r\n\t\tif ( toggle ) {\r\n\t\t\tdataShow.hidden = !hidden;\r\n\t\t}\r\n\t\tif ( hidden ) {\r\n\t\t\tjQuery( elem ).show();\r\n\t\t} else {\r\n\t\t\tanim.done( function() {\r\n\t\t\t\tjQuery( elem ).hide();\r\n\t\t\t} );\r\n\t\t}\r\n\t\tanim.done( function() {\r\n\t\t\tvar prop;\r\n\r\n\t\t\tdataPriv.remove( elem, \"fxshow\" );\r\n\t\t\tfor ( prop in orig ) {\r\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\r\n\t\t\t}\r\n\t\t} );\r\n\t\tfor ( prop in orig ) {\r\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\r\n\r\n\t\t\tif ( !( prop in dataShow ) ) {\r\n\t\t\t\tdataShow[ prop ] = tween.start;\r\n\t\t\t\tif ( hidden ) {\r\n\t\t\t\t\ttween.end = tween.start;\r\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\r\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\r\n\t\tstyle.display = display;\r\n\t}\r\n}\r\n\r\nfunction propFilter( props, specialEasing ) {\r\n\tvar index, name, easing, value, hooks;\r\n\r\n\t// camelCase, specialEasing and expand cssHook pass\r\n\tfor ( index in props ) {\r\n\t\tname = jQuery.camelCase( index );\r\n\t\teasing = specialEasing[ name ];\r\n\t\tvalue = props[ index ];\r\n\t\tif ( jQuery.isArray( value ) ) {\r\n\t\t\teasing = value[ 1 ];\r\n\t\t\tvalue = props[ index ] = value[ 0 ];\r\n\t\t}\r\n\r\n\t\tif ( index !== name ) {\r\n\t\t\tprops[ name ] = value;\r\n\t\t\tdelete props[ index ];\r\n\t\t}\r\n\r\n\t\thooks = jQuery.cssHooks[ name ];\r\n\t\tif ( hooks && \"expand\" in hooks ) {\r\n\t\t\tvalue = hooks.expand( value );\r\n\t\t\tdelete props[ name ];\r\n\r\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\r\n\t\t\t// Reusing 'index' because we have the correct \"name\"\r\n\t\t\tfor ( index in value ) {\r\n\t\t\t\tif ( !( index in props ) ) {\r\n\t\t\t\t\tprops[ index ] = value[ index ];\r\n\t\t\t\t\tspecialEasing[ index ] = easing;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tspecialEasing[ name ] = easing;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction Animation( elem, properties, options ) {\r\n\tvar result,\r\n\t\tstopped,\r\n\t\tindex = 0,\r\n\t\tlength = Animation.prefilters.length,\r\n\t\tdeferred = jQuery.Deferred().always( function() {\r\n\r\n\t\t\t// Don't match elem in the :animated selector\r\n\t\t\tdelete tick.elem;\r\n\t\t} ),\r\n\t\ttick = function() {\r\n\t\t\tif ( stopped ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar currentTime = fxNow || createFxNow(),\r\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\r\n\r\n\t\t\t\t// Support: Android 2.3\r\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\r\n\t\t\t\ttemp = remaining / animation.duration || 0,\r\n\t\t\t\tpercent = 1 - temp,\r\n\t\t\t\tindex = 0,\r\n\t\t\t\tlength = animation.tweens.length;\r\n\r\n\t\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\t\tanimation.tweens[ index ].run( percent );\r\n\t\t\t}\r\n\r\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\r\n\r\n\t\t\tif ( percent < 1 && length ) {\r\n\t\t\t\treturn remaining;\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\t\tanimation = deferred.promise( {\r\n\t\t\telem: elem,\r\n\t\t\tprops: jQuery.extend( {}, properties ),\r\n\t\t\topts: jQuery.extend( true, {\r\n\t\t\t\tspecialEasing: {},\r\n\t\t\t\teasing: jQuery.easing._default\r\n\t\t\t}, options ),\r\n\t\t\toriginalProperties: properties,\r\n\t\t\toriginalOptions: options,\r\n\t\t\tstartTime: fxNow || createFxNow(),\r\n\t\t\tduration: options.duration,\r\n\t\t\ttweens: [],\r\n\t\t\tcreateTween: function( prop, end ) {\r\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\r\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\r\n\t\t\t\tanimation.tweens.push( tween );\r\n\t\t\t\treturn tween;\r\n\t\t\t},\r\n\t\t\tstop: function( gotoEnd ) {\r\n\t\t\t\tvar index = 0,\r\n\r\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\r\n\t\t\t\t\t// otherwise we skip this part\r\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\r\n\t\t\t\tif ( stopped ) {\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t\tstopped = true;\r\n\t\t\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\r\n\t\t\t\tif ( gotoEnd ) {\r\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\r\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t} ),\r\n\t\tprops = animation.props;\r\n\r\n\tpropFilter( props, animation.opts.specialEasing );\r\n\r\n\tfor ( ; index < length ; index++ ) {\r\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\r\n\t\tif ( result ) {\r\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\r\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\r\n\t\t\t\t\tjQuery.proxy( result.stop, result );\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\r\n\tjQuery.map( props, createTween, animation );\r\n\r\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\r\n\t\tanimation.opts.start.call( elem, animation );\r\n\t}\r\n\r\n\tjQuery.fx.timer(\r\n\t\tjQuery.extend( tick, {\r\n\t\t\telem: elem,\r\n\t\t\tanim: animation,\r\n\t\t\tqueue: animation.opts.queue\r\n\t\t} )\r\n\t);\r\n\r\n\t// attach callbacks from options\r\n\treturn animation.progress( animation.opts.progress )\r\n\t\t.done( animation.opts.done, animation.opts.complete )\r\n\t\t.fail( animation.opts.fail )\r\n\t\t.always( animation.opts.always );\r\n}\r\n\r\njQuery.Animation = jQuery.extend( Animation, {\r\n\ttweeners: {\r\n\t\t\"*\": [ function( prop, value ) {\r\n\t\t\tvar tween = this.createTween( prop, value );\r\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\r\n\t\t\treturn tween;\r\n\t\t} ]\r\n\t},\r\n\r\n\ttweener: function( props, callback ) {\r\n\t\tif ( jQuery.isFunction( props ) ) {\r\n\t\t\tcallback = props;\r\n\t\t\tprops = [ \"*\" ];\r\n\t\t} else {\r\n\t\t\tprops = props.match( rnotwhite );\r\n\t\t}\r\n\r\n\t\tvar prop,\r\n\t\t\tindex = 0,\r\n\t\t\tlength = props.length;\r\n\r\n\t\tfor ( ; index < length ; index++ ) {\r\n\t\t\tprop = props[ index ];\r\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\r\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\r\n\t\t}\r\n\t},\r\n\r\n\tprefilters: [ defaultPrefilter ],\r\n\r\n\tprefilter: function( callback, prepend ) {\r\n\t\tif ( prepend ) {\r\n\t\t\tAnimation.prefilters.unshift( callback );\r\n\t\t} else {\r\n\t\t\tAnimation.prefilters.push( callback );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\njQuery.speed = function( speed, easing, fn ) {\r\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\r\n\t\tcomplete: fn || !fn && easing ||\r\n\t\t\tjQuery.isFunction( speed ) && speed,\r\n\t\tduration: speed,\r\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\r\n\t};\r\n\r\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\r\n\t\topt.duration : opt.duration in jQuery.fx.speeds ?\r\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\r\n\r\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\r\n\tif ( opt.queue == null || opt.queue === true ) {\r\n\t\topt.queue = \"fx\";\r\n\t}\r\n\r\n\t// Queueing\r\n\topt.old = opt.complete;\r\n\r\n\topt.complete = function() {\r\n\t\tif ( jQuery.isFunction( opt.old ) ) {\r\n\t\t\topt.old.call( this );\r\n\t\t}\r\n\r\n\t\tif ( opt.queue ) {\r\n\t\t\tjQuery.dequeue( this, opt.queue );\r\n\t\t}\r\n\t};\r\n\r\n\treturn opt;\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tfadeTo: function( speed, to, easing, callback ) {\r\n\r\n\t\t// Show any hidden elements after setting opacity to 0\r\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\r\n\r\n\t\t\t// Animate to the value specified\r\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\r\n\t},\r\n\tanimate: function( prop, speed, easing, callback ) {\r\n\t\tvar empty = jQuery.isEmptyObject( prop ),\r\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\r\n\t\t\tdoAnimation = function() {\r\n\r\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\r\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\r\n\r\n\t\t\t\t// Empty animations, or finishing resolves immediately\r\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\r\n\t\t\t\t\tanim.stop( true );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tdoAnimation.finish = doAnimation;\r\n\r\n\t\treturn empty || optall.queue === false ?\r\n\t\t\tthis.each( doAnimation ) :\r\n\t\t\tthis.queue( optall.queue, doAnimation );\r\n\t},\r\n\tstop: function( type, clearQueue, gotoEnd ) {\r\n\t\tvar stopQueue = function( hooks ) {\r\n\t\t\tvar stop = hooks.stop;\r\n\t\t\tdelete hooks.stop;\r\n\t\t\tstop( gotoEnd );\r\n\t\t};\r\n\r\n\t\tif ( typeof type !== \"string\" ) {\r\n\t\t\tgotoEnd = clearQueue;\r\n\t\t\tclearQueue = type;\r\n\t\t\ttype = undefined;\r\n\t\t}\r\n\t\tif ( clearQueue && type !== false ) {\r\n\t\t\tthis.queue( type || \"fx\", [] );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar dequeue = true,\r\n\t\t\t\tindex = type != null && type + \"queueHooks\",\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tdata = dataPriv.get( this );\r\n\r\n\t\t\tif ( index ) {\r\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\r\n\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor ( index in data ) {\r\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\r\n\t\t\t\t\t\tstopQueue( data[ index ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this &&\r\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\r\n\r\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\r\n\t\t\t\t\tdequeue = false;\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Start the next in the queue if the last step wasn't forced.\r\n\t\t\t// Timers currently will call their complete callbacks, which\r\n\t\t\t// will dequeue but only if they were gotoEnd.\r\n\t\t\tif ( dequeue || !gotoEnd ) {\r\n\t\t\t\tjQuery.dequeue( this, type );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\tfinish: function( type ) {\r\n\t\tif ( type !== false ) {\r\n\t\t\ttype = type || \"fx\";\r\n\t\t}\r\n\t\treturn this.each( function() {\r\n\t\t\tvar index,\r\n\t\t\t\tdata = dataPriv.get( this ),\r\n\t\t\t\tqueue = data[ type + \"queue\" ],\r\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\r\n\t\t\t\ttimers = jQuery.timers,\r\n\t\t\t\tlength = queue ? queue.length : 0;\r\n\r\n\t\t\t// Enable finishing flag on private data\r\n\t\t\tdata.finish = true;\r\n\r\n\t\t\t// Empty the queue first\r\n\t\t\tjQuery.queue( this, type, [] );\r\n\r\n\t\t\tif ( hooks && hooks.stop ) {\r\n\t\t\t\thooks.stop.call( this, true );\r\n\t\t\t}\r\n\r\n\t\t\t// Look for any active animations, and finish them\r\n\t\t\tfor ( index = timers.length; index--; ) {\r\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\r\n\t\t\t\t\ttimers[ index ].anim.stop( true );\r\n\t\t\t\t\ttimers.splice( index, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Look for any animations in the old queue and finish them\r\n\t\t\tfor ( index = 0; index < length; index++ ) {\r\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\r\n\t\t\t\t\tqueue[ index ].finish.call( this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Turn off finishing flag\r\n\t\t\tdelete data.finish;\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\r\n\tvar cssFn = jQuery.fn[ name ];\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn speed == null || typeof speed === \"boolean\" ?\r\n\t\t\tcssFn.apply( this, arguments ) :\r\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\r\n\t};\r\n} );\r\n\r\n// Generate shortcuts for custom animations\r\njQuery.each( {\r\n\tslideDown: genFx( \"show\" ),\r\n\tslideUp: genFx( \"hide\" ),\r\n\tslideToggle: genFx( \"toggle\" ),\r\n\tfadeIn: { opacity: \"show\" },\r\n\tfadeOut: { opacity: \"hide\" },\r\n\tfadeToggle: { opacity: \"toggle\" }\r\n}, function( name, props ) {\r\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\r\n\t\treturn this.animate( props, speed, easing, callback );\r\n\t};\r\n} );\r\n\r\njQuery.timers = [];\r\njQuery.fx.tick = function() {\r\n\tvar timer,\r\n\t\ti = 0,\r\n\t\ttimers = jQuery.timers;\r\n\r\n\tfxNow = jQuery.now();\r\n\r\n\tfor ( ; i < timers.length; i++ ) {\r\n\t\ttimer = timers[ i ];\r\n\r\n\t\t// Checks the timer has not already been removed\r\n\t\tif ( !timer() && timers[ i ] === timer ) {\r\n\t\t\ttimers.splice( i--, 1 );\r\n\t\t}\r\n\t}\r\n\r\n\tif ( !timers.length ) {\r\n\t\tjQuery.fx.stop();\r\n\t}\r\n\tfxNow = undefined;\r\n};\r\n\r\njQuery.fx.timer = function( timer ) {\r\n\tjQuery.timers.push( timer );\r\n\tif ( timer() ) {\r\n\t\tjQuery.fx.start();\r\n\t} else {\r\n\t\tjQuery.timers.pop();\r\n\t}\r\n};\r\n\r\njQuery.fx.interval = 13;\r\njQuery.fx.start = function() {\r\n\tif ( !timerId ) {\r\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\r\n\t}\r\n};\r\n\r\njQuery.fx.stop = function() {\r\n\twindow.clearInterval( timerId );\r\n\r\n\ttimerId = null;\r\n};\r\n\r\njQuery.fx.speeds = {\r\n\tslow: 600,\r\n\tfast: 200,\r\n\r\n\t// Default speed\r\n\t_default: 400\r\n};\r\n\r\n\r\n// Based off of the plugin by Clint Helfers, with permission.\r\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\r\njQuery.fn.delay = function( time, type ) {\r\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\r\n\ttype = type || \"fx\";\r\n\r\n\treturn this.queue( type, function( next, hooks ) {\r\n\t\tvar timeout = window.setTimeout( next, time );\r\n\t\thooks.stop = function() {\r\n\t\t\twindow.clearTimeout( timeout );\r\n\t\t};\r\n\t} );\r\n};\r\n\r\n\r\n( function() {\r\n\tvar input = document.createElement( \"input\" ),\r\n\t\tselect = document.createElement( \"select\" ),\r\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\r\n\r\n\tinput.type = \"checkbox\";\r\n\r\n\t// Support: iOS<=5.1, Android<=4.2+\r\n\t// Default value for a checkbox should be \"on\"\r\n\tsupport.checkOn = input.value !== \"\";\r\n\r\n\t// Support: IE<=11+\r\n\t// Must access selectedIndex to make default options select\r\n\tsupport.optSelected = opt.selected;\r\n\r\n\t// Support: Android<=2.3\r\n\t// Options inside disabled selects are incorrectly marked as disabled\r\n\tselect.disabled = true;\r\n\tsupport.optDisabled = !opt.disabled;\r\n\r\n\t// Support: IE<=11+\r\n\t// An input loses its value after becoming a radio\r\n\tinput = document.createElement( \"input\" );\r\n\tinput.value = \"t\";\r\n\tinput.type = \"radio\";\r\n\tsupport.radioValue = input.value === \"t\";\r\n} )();\r\n\r\n\r\nvar boolHook,\r\n\tattrHandle = jQuery.expr.attrHandle;\r\n\r\njQuery.fn.extend( {\r\n\tattr: function( name, value ) {\r\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveAttr: function( name ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.removeAttr( this, name );\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tattr: function( elem, name, value ) {\r\n\t\tvar ret, hooks,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// Don't get/set attributes on text, comment and attribute nodes\r\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Fallback to prop when attributes are not supported\r\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\r\n\t\t\treturn jQuery.prop( elem, name, value );\r\n\t\t}\r\n\r\n\t\t// All attributes are lowercase\r\n\t\t// Grab necessary hook if one is defined\r\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\r\n\t\t\tname = name.toLowerCase();\r\n\t\t\thooks = jQuery.attrHooks[ name ] ||\r\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\t\t\tif ( value === null ) {\r\n\t\t\t\tjQuery.removeAttr( elem, name );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( hooks && \"set\" in hooks &&\r\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\telem.setAttribute( name, value + \"\" );\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\r\n\t\t\treturn ret;\r\n\t\t}\r\n\r\n\t\tret = jQuery.find.attr( elem, name );\r\n\r\n\t\t// Non-existent attributes return null, we normalize to undefined\r\n\t\treturn ret == null ? undefined : ret;\r\n\t},\r\n\r\n\tattrHooks: {\r\n\t\ttype: {\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\r\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\r\n\t\t\t\t\tvar val = elem.value;\r\n\t\t\t\t\telem.setAttribute( \"type\", value );\r\n\t\t\t\t\tif ( val ) {\r\n\t\t\t\t\t\telem.value = val;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremoveAttr: function( elem, value ) {\r\n\t\tvar name, propName,\r\n\t\t\ti = 0,\r\n\t\t\tattrNames = value && value.match( rnotwhite );\r\n\r\n\t\tif ( attrNames && elem.nodeType === 1 ) {\r\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\r\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\r\n\r\n\t\t\t\t// Boolean attributes get special treatment (#10870)\r\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\r\n\r\n\t\t\t\t\t// Set corresponding property to false\r\n\t\t\t\t\telem[ propName ] = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\telem.removeAttribute( name );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Hooks for boolean attributes\r\nboolHook = {\r\n\tset: function( elem, value, name ) {\r\n\t\tif ( value === false ) {\r\n\r\n\t\t\t// Remove boolean attributes when set to false\r\n\t\t\tjQuery.removeAttr( elem, name );\r\n\t\t} else {\r\n\t\t\telem.setAttribute( name, name );\r\n\t\t}\r\n\t\treturn name;\r\n\t}\r\n};\r\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\r\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\r\n\r\n\tattrHandle[ name ] = function( elem, name, isXML ) {\r\n\t\tvar ret, handle;\r\n\t\tif ( !isXML ) {\r\n\r\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\r\n\t\t\thandle = attrHandle[ name ];\r\n\t\t\tattrHandle[ name ] = ret;\r\n\t\t\tret = getter( elem, name, isXML ) != null ?\r\n\t\t\t\tname.toLowerCase() :\r\n\t\t\t\tnull;\r\n\t\t\tattrHandle[ name ] = handle;\r\n\t\t}\r\n\t\treturn ret;\r\n\t};\r\n} );\r\n\r\n\r\n\r\n\r\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\r\n\trclickable = /^(?:a|area)$/i;\r\n\r\njQuery.fn.extend( {\r\n\tprop: function( name, value ) {\r\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\r\n\t},\r\n\r\n\tremoveProp: function( name ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tprop: function( elem, name, value ) {\r\n\t\tvar ret, hooks,\r\n\t\t\tnType = elem.nodeType;\r\n\r\n\t\t// Don't get/set properties on text, comment and attribute nodes\r\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\r\n\r\n\t\t\t// Fix name and attach hooks\r\n\t\t\tname = jQuery.propFix[ name ] || name;\r\n\t\t\thooks = jQuery.propHooks[ name ];\r\n\t\t}\r\n\r\n\t\tif ( value !== undefined ) {\r\n\t\t\tif ( hooks && \"set\" in hooks &&\r\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\r\n\t\t\treturn ( elem[ name ] = value );\r\n\t\t}\r\n\r\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\r\n\t\t\treturn ret;\r\n\t\t}\r\n\r\n\t\treturn elem[ name ];\r\n\t},\r\n\r\n\tpropHooks: {\r\n\t\ttabIndex: {\r\n\t\t\tget: function( elem ) {\r\n\r\n\t\t\t\t// elem.tabIndex doesn't always return the\r\n\t\t\t\t// correct value when it hasn't been explicitly set\r\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\r\n\t\t\t\t// Use proper attribute retrieval(#12072)\r\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\r\n\r\n\t\t\t\treturn tabindex ?\r\n\t\t\t\t\tparseInt( tabindex, 10 ) :\r\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\r\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\r\n\t\t\t\t\t\t\t0 :\r\n\t\t\t\t\t\t\t-1;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tpropFix: {\r\n\t\t\"for\": \"htmlFor\",\r\n\t\t\"class\": \"className\"\r\n\t}\r\n} );\r\n\r\n// Support: IE <=11 only\r\n// Accessing the selectedIndex property\r\n// forces the browser to respect setting selected\r\n// on the option\r\n// The getter ensures a default option is selected\r\n// when in an optgroup\r\nif ( !support.optSelected ) {\r\n\tjQuery.propHooks.selected = {\r\n\t\tget: function( elem ) {\r\n\t\t\tvar parent = elem.parentNode;\r\n\t\t\tif ( parent && parent.parentNode ) {\r\n\t\t\t\tparent.parentNode.selectedIndex;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\tset: function( elem ) {\r\n\t\t\tvar parent = elem.parentNode;\r\n\t\t\tif ( parent ) {\r\n\t\t\t\tparent.selectedIndex;\r\n\r\n\t\t\t\tif ( parent.parentNode ) {\r\n\t\t\t\t\tparent.parentNode.selectedIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\njQuery.each( [\r\n\t\"tabIndex\",\r\n\t\"readOnly\",\r\n\t\"maxLength\",\r\n\t\"cellSpacing\",\r\n\t\"cellPadding\",\r\n\t\"rowSpan\",\r\n\t\"colSpan\",\r\n\t\"useMap\",\r\n\t\"frameBorder\",\r\n\t\"contentEditable\"\r\n], function() {\r\n\tjQuery.propFix[ this.toLowerCase() ] = this;\r\n} );\r\n\r\n\r\n\r\n\r\nvar rclass = /[\\t\\r\\n\\f]/g;\r\n\r\nfunction getClass( elem ) {\r\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\r\n}\r\n\r\njQuery.fn.extend( {\r\n\taddClass: function( value ) {\r\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\r\n\t\t\ti = 0;\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each( function( j ) {\r\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tif ( typeof value === \"string\" && value ) {\r\n\t\t\tclasses = value.match( rnotwhite ) || [];\r\n\r\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\t\tcurValue = getClass( elem );\r\n\t\t\t\tcur = elem.nodeType === 1 &&\r\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\r\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\r\n\t\t\t\t\t\t\tcur += clazz + \" \";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\r\n\t\t\t\t\tif ( curValue !== finalValue ) {\r\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\tremoveClass: function( value ) {\r\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\r\n\t\t\ti = 0;\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each( function( j ) {\r\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tif ( !arguments.length ) {\r\n\t\t\treturn this.attr( \"class\", \"\" );\r\n\t\t}\r\n\r\n\t\tif ( typeof value === \"string\" && value ) {\r\n\t\t\tclasses = value.match( rnotwhite ) || [];\r\n\r\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\t\tcurValue = getClass( elem );\r\n\r\n\t\t\t\t// This expression is here for better compressibility (see addClass)\r\n\t\t\t\tcur = elem.nodeType === 1 &&\r\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\r\n\r\n\t\t\t\tif ( cur ) {\r\n\t\t\t\t\tj = 0;\r\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\r\n\r\n\t\t\t\t\t\t// Remove *all* instances\r\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\r\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\r\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\r\n\t\t\t\t\tif ( curValue !== finalValue ) {\r\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoggleClass: function( value, stateVal ) {\r\n\t\tvar type = typeof value;\r\n\r\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\r\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\r\n\t\t}\r\n\r\n\t\tif ( jQuery.isFunction( value ) ) {\r\n\t\t\treturn this.each( function( i ) {\r\n\t\t\t\tjQuery( this ).toggleClass(\r\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\r\n\t\t\t\t\tstateVal\r\n\t\t\t\t);\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar className, i, self, classNames;\r\n\r\n\t\t\tif ( type === \"string\" ) {\r\n\r\n\t\t\t\t// Toggle individual class names\r\n\t\t\t\ti = 0;\r\n\t\t\t\tself = jQuery( this );\r\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\r\n\r\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\r\n\r\n\t\t\t\t\t// Check each className given, space separated list\r\n\t\t\t\t\tif ( self.hasClass( className ) ) {\r\n\t\t\t\t\t\tself.removeClass( className );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tself.addClass( className );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t// Toggle whole class name\r\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\r\n\t\t\t\tclassName = getClass( this );\r\n\t\t\t\tif ( className ) {\r\n\r\n\t\t\t\t\t// Store className if set\r\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the element has a class name or if we're passed `false`,\r\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\r\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\r\n\t\t\t\t// falling back to the empty string if nothing was stored.\r\n\t\t\t\tif ( this.setAttribute ) {\r\n\t\t\t\t\tthis.setAttribute( \"class\",\r\n\t\t\t\t\t\tclassName || value === false ?\r\n\t\t\t\t\t\t\"\" :\r\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\thasClass: function( selector ) {\r\n\t\tvar className, elem,\r\n\t\t\ti = 0;\r\n\r\n\t\tclassName = \" \" + selector + \" \";\r\n\t\twhile ( ( elem = this[ i++ ] ) ) {\r\n\t\t\tif ( elem.nodeType === 1 &&\r\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\r\n\t\t\t\t\t.indexOf( className ) > -1\r\n\t\t\t) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\nvar rreturn = /\\r/g,\r\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\r\n\r\njQuery.fn.extend( {\r\n\tval: function( value ) {\r\n\t\tvar hooks, ret, isFunction,\r\n\t\t\telem = this[ 0 ];\r\n\r\n\t\tif ( !arguments.length ) {\r\n\t\t\tif ( elem ) {\r\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\r\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\r\n\r\n\t\t\t\tif ( hooks &&\r\n\t\t\t\t\t\"get\" in hooks &&\r\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn ret;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tret = elem.value;\r\n\r\n\t\t\t\treturn typeof ret === \"string\" ?\r\n\r\n\t\t\t\t\t// Handle most common string cases\r\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\r\n\r\n\t\t\t\t\t// Handle cases where value is null/undef or number\r\n\t\t\t\t\tret == null ? \"\" : ret;\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tisFunction = jQuery.isFunction( value );\r\n\r\n\t\treturn this.each( function( i ) {\r\n\t\t\tvar val;\r\n\r\n\t\t\tif ( this.nodeType !== 1 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif ( isFunction ) {\r\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\r\n\t\t\t} else {\r\n\t\t\t\tval = value;\r\n\t\t\t}\r\n\r\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\r\n\t\t\tif ( val == null ) {\r\n\t\t\t\tval = \"\";\r\n\r\n\t\t\t} else if ( typeof val === \"number\" ) {\r\n\t\t\t\tval += \"\";\r\n\r\n\t\t\t} else if ( jQuery.isArray( val ) ) {\r\n\t\t\t\tval = jQuery.map( val, function( value ) {\r\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\r\n\r\n\t\t\t// If set returns undefined, fall back to normal setting\r\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\r\n\t\t\t\tthis.value = val;\r\n\t\t\t}\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\njQuery.extend( {\r\n\tvalHooks: {\r\n\t\toption: {\r\n\t\t\tget: function( elem ) {\r\n\r\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\r\n\t\t\t\treturn val != null ?\r\n\t\t\t\t\tval :\r\n\r\n\t\t\t\t\t// Support: IE10-11+\r\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\r\n\t\t\t\t\t// Strip and collapse whitespace\r\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\r\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\r\n\t\t\t}\r\n\t\t},\r\n\t\tselect: {\r\n\t\t\tget: function( elem ) {\r\n\t\t\t\tvar value, option,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tindex = elem.selectedIndex,\r\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\r\n\t\t\t\t\tvalues = one ? null : [],\r\n\t\t\t\t\tmax = one ? index + 1 : options.length,\r\n\t\t\t\t\ti = index < 0 ?\r\n\t\t\t\t\t\tmax :\r\n\t\t\t\t\t\tone ? index : 0;\r\n\r\n\t\t\t\t// Loop through all the selected options\r\n\t\t\t\tfor ( ; i < max; i++ ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\r\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\r\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\r\n\r\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\r\n\t\t\t\t\t\t\t( support.optDisabled ?\r\n\t\t\t\t\t\t\t\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\r\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\r\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n\t\t\t\t\t\t// Get the specific value for the option\r\n\t\t\t\t\t\tvalue = jQuery( option ).val();\r\n\r\n\t\t\t\t\t\t// We don't need an array for one selects\r\n\t\t\t\t\t\tif ( one ) {\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Multi-Selects return an array\r\n\t\t\t\t\t\tvalues.push( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\t\t\t},\r\n\r\n\t\t\tset: function( elem, value ) {\r\n\t\t\t\tvar optionSet, option,\r\n\t\t\t\t\toptions = elem.options,\r\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\r\n\t\t\t\t\ti = options.length;\r\n\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\toption = options[ i ];\r\n\t\t\t\t\tif ( option.selected =\r\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\toptionSet = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\r\n\t\t\t\tif ( !optionSet ) {\r\n\t\t\t\t\telem.selectedIndex = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Radios and checkboxes getter/setter\r\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\r\n\tjQuery.valHooks[ this ] = {\r\n\t\tset: function( elem, value ) {\r\n\t\t\tif ( jQuery.isArray( value ) ) {\r\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif ( !support.checkOn ) {\r\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\r\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Return jQuery for attributes-only inclusion\r\n\r\n\r\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\r\n\r\njQuery.extend( jQuery.event, {\r\n\r\n\ttrigger: function( event, data, elem, onlyHandlers ) {\r\n\r\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\r\n\t\t\teventPath = [ elem || document ],\r\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\r\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\r\n\r\n\t\tcur = tmp = elem = elem || document;\r\n\r\n\t\t// Don't do events on text and comment nodes\r\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\r\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\r\n\r\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\r\n\t\t\tnamespaces = type.split( \".\" );\r\n\t\t\ttype = namespaces.shift();\r\n\t\t\tnamespaces.sort();\r\n\t\t}\r\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\r\n\r\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\r\n\t\tevent = event[ jQuery.expando ] ?\r\n\t\t\tevent :\r\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\r\n\r\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\r\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\r\n\t\tevent.namespace = namespaces.join( \".\" );\r\n\t\tevent.rnamespace = event.namespace ?\r\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\r\n\t\t\tnull;\r\n\r\n\t\t// Clean up the event in case it is being reused\r\n\t\tevent.result = undefined;\r\n\t\tif ( !event.target ) {\r\n\t\t\tevent.target = elem;\r\n\t\t}\r\n\r\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\r\n\t\tdata = data == null ?\r\n\t\t\t[ event ] :\r\n\t\t\tjQuery.makeArray( data, [ event ] );\r\n\r\n\t\t// Allow special events to draw outside the lines\r\n\t\tspecial = jQuery.event.special[ type ] || {};\r\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\r\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\r\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\r\n\r\n\t\t\tbubbleType = special.delegateType || type;\r\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\r\n\t\t\t\tcur = cur.parentNode;\r\n\t\t\t}\r\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\r\n\t\t\t\teventPath.push( cur );\r\n\t\t\t\ttmp = cur;\r\n\t\t\t}\r\n\r\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\r\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\r\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Fire handlers on the event path\r\n\t\ti = 0;\r\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\r\n\r\n\t\t\tevent.type = i > 1 ?\r\n\t\t\t\tbubbleType :\r\n\t\t\t\tspecial.bindType || type;\r\n\r\n\t\t\t// jQuery handler\r\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\r\n\t\t\t\tdataPriv.get( cur, \"handle\" );\r\n\t\t\tif ( handle ) {\r\n\t\t\t\thandle.apply( cur, data );\r\n\t\t\t}\r\n\r\n\t\t\t// Native handler\r\n\t\t\thandle = ontype && cur[ ontype ];\r\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\r\n\t\t\t\tevent.result = handle.apply( cur, data );\r\n\t\t\t\tif ( event.result === false ) {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tevent.type = type;\r\n\r\n\t\t// If nobody prevented the default action, do it now\r\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\r\n\r\n\t\t\tif ( ( !special._default ||\r\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\r\n\t\t\t\tacceptData( elem ) ) {\r\n\r\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\r\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\r\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\r\n\r\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\r\n\t\t\t\t\ttmp = elem[ ontype ];\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = null;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\r\n\t\t\t\t\tjQuery.event.triggered = type;\r\n\t\t\t\t\telem[ type ]();\r\n\t\t\t\t\tjQuery.event.triggered = undefined;\r\n\r\n\t\t\t\t\tif ( tmp ) {\r\n\t\t\t\t\t\telem[ ontype ] = tmp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn event.result;\r\n\t},\r\n\r\n\t// Piggyback on a donor event to simulate a different one\r\n\tsimulate: function( type, elem, event ) {\r\n\t\tvar e = jQuery.extend(\r\n\t\t\tnew jQuery.Event(),\r\n\t\t\tevent,\r\n\t\t\t{\r\n\t\t\t\ttype: type,\r\n\t\t\t\tisSimulated: true\r\n\r\n\t\t\t\t// Previously, `originalEvent: {}` was set here, so stopPropagation call\r\n\t\t\t\t// would not be triggered on donor event, since in our own\r\n\t\t\t\t// jQuery.event.stopPropagation function we had a check for existence of\r\n\t\t\t\t// originalEvent.stopPropagation method, so, consequently it would be a noop.\r\n\t\t\t\t//\r\n\t\t\t\t// But now, this \"simulate\" function is used only for events\r\n\t\t\t\t// for which stopPropagation() is noop, so there is no need for that anymore.\r\n\t\t\t\t//\r\n\t\t\t\t// For the 1.x branch though, guard for \"click\" and \"submit\"\r\n\t\t\t\t// events is still used, but was moved to jQuery.event.stopPropagation function\r\n\t\t\t\t// because `originalEvent` should point to the original event for the constancy\r\n\t\t\t\t// with other events and for more focused logic\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tjQuery.event.trigger( e, null, elem );\r\n\r\n\t\tif ( e.isDefaultPrevented() ) {\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\r\n\ttrigger: function( type, data ) {\r\n\t\treturn this.each( function() {\r\n\t\t\tjQuery.event.trigger( type, data, this );\r\n\t\t} );\r\n\t},\r\n\ttriggerHandler: function( type, data ) {\r\n\t\tvar elem = this[ 0 ];\r\n\t\tif ( elem ) {\r\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n\r\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\r\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\r\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\r\n\tfunction( i, name ) {\r\n\r\n\t// Handle event binding\r\n\tjQuery.fn[ name ] = function( data, fn ) {\r\n\t\treturn arguments.length > 0 ?\r\n\t\t\tthis.on( name, null, data, fn ) :\r\n\t\t\tthis.trigger( name );\r\n\t};\r\n} );\r\n\r\njQuery.fn.extend( {\r\n\thover: function( fnOver, fnOut ) {\r\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\nsupport.focusin = \"onfocusin\" in window;\r\n\r\n\r\n// Support: Firefox\r\n// Firefox doesn't have focus(in | out) events\r\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\r\n//\r\n// Support: Chrome, Safari\r\n// focus(in | out) events fire after focus & blur events,\r\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\r\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\r\nif ( !support.focusin ) {\r\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\r\n\r\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\r\n\t\tvar handler = function( event ) {\r\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\r\n\t\t};\r\n\r\n\t\tjQuery.event.special[ fix ] = {\r\n\t\t\tsetup: function() {\r\n\t\t\t\tvar doc = this.ownerDocument || this,\r\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\r\n\t\t\t\t}\r\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\r\n\t\t\t},\r\n\t\t\tteardown: function() {\r\n\t\t\t\tvar doc = this.ownerDocument || this,\r\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\r\n\r\n\t\t\t\tif ( !attaches ) {\r\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\r\n\t\t\t\t\tdataPriv.remove( doc, fix );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t} );\r\n}\r\nvar location = window.location;\r\n\r\nvar nonce = jQuery.now();\r\n\r\nvar rquery = ( /\\?/ );\r\n\r\n\r\n\r\n// Support: Android 2.3\r\n// Workaround failure to string-cast null input\r\njQuery.parseJSON = function( data ) {\r\n\treturn JSON.parse( data + \"\" );\r\n};\r\n\r\n\r\n// Cross-browser xml parsing\r\njQuery.parseXML = function( data ) {\r\n\tvar xml;\r\n\tif ( !data || typeof data !== \"string\" ) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Support: IE9\r\n\ttry {\r\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\r\n\t} catch ( e ) {\r\n\t\txml = undefined;\r\n\t}\r\n\r\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\r\n\t\tjQuery.error( \"Invalid XML: \" + data );\r\n\t}\r\n\treturn xml;\r\n};\r\n\r\n\r\nvar\r\n\trhash = /#.*$/,\r\n\trts = /([?&])_=[^&]*/,\r\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\r\n\r\n\t// #7653, #8125, #8152: local protocol detection\r\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\r\n\trnoContent = /^(?:GET|HEAD)$/,\r\n\trprotocol = /^\\/\\//,\r\n\r\n\t/* Prefilters\r\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n\t * 2) These are called:\r\n\t *    - BEFORE asking for a transport\r\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n\t * 3) key is the dataType\r\n\t * 4) the catchall symbol \"*\" can be used\r\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n\t */\r\n\tprefilters = {},\r\n\r\n\t/* Transports bindings\r\n\t * 1) key is the dataType\r\n\t * 2) the catchall symbol \"*\" can be used\r\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n\t */\r\n\ttransports = {},\r\n\r\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\r\n\tallTypes = \"*/\".concat( \"*\" ),\r\n\r\n\t// Anchor tag for parsing the document origin\r\n\toriginAnchor = document.createElement( \"a\" );\r\n\toriginAnchor.href = location.href;\r\n\r\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\nfunction addToPrefiltersOrTransports( structure ) {\r\n\r\n\t// dataTypeExpression is optional and defaults to \"*\"\r\n\treturn function( dataTypeExpression, func ) {\r\n\r\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\r\n\t\t\tfunc = dataTypeExpression;\r\n\t\t\tdataTypeExpression = \"*\";\r\n\t\t}\r\n\r\n\t\tvar dataType,\r\n\t\t\ti = 0,\r\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\r\n\r\n\t\tif ( jQuery.isFunction( func ) ) {\r\n\r\n\t\t\t// For each dataType in the dataTypeExpression\r\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\r\n\r\n\t\t\t\t// Prepend if requested\r\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\r\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\r\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\r\n\r\n\t\t\t\t// Otherwise append\r\n\t\t\t\t} else {\r\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// Base inspection function for prefilters and transports\r\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\r\n\r\n\tvar inspected = {},\r\n\t\tseekingTransport = ( structure === transports );\r\n\r\n\tfunction inspect( dataType ) {\r\n\t\tvar selected;\r\n\t\tinspected[ dataType ] = true;\r\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\r\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\r\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\r\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\r\n\r\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\r\n\t\t\t\tinspect( dataTypeOrTransport );\r\n\t\t\t\treturn false;\r\n\t\t\t} else if ( seekingTransport ) {\r\n\t\t\t\treturn !( selected = dataTypeOrTransport );\r\n\t\t\t}\r\n\t\t} );\r\n\t\treturn selected;\r\n\t}\r\n\r\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\r\n}\r\n\r\n// A special extend for ajax options\r\n// that takes \"flat\" options (not to be deep extended)\r\n// Fixes #9887\r\nfunction ajaxExtend( target, src ) {\r\n\tvar key, deep,\r\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\r\n\r\n\tfor ( key in src ) {\r\n\t\tif ( src[ key ] !== undefined ) {\r\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\r\n\t\t}\r\n\t}\r\n\tif ( deep ) {\r\n\t\tjQuery.extend( true, target, deep );\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n\r\n/* Handles responses to an ajax request:\r\n * - finds the right dataType (mediates between content-type and expected dataType)\r\n * - returns the corresponding response\r\n */\r\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\r\n\r\n\tvar ct, type, finalDataType, firstDataType,\r\n\t\tcontents = s.contents,\r\n\t\tdataTypes = s.dataTypes;\r\n\r\n\t// Remove auto dataType and get content-type in the process\r\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\r\n\t\tdataTypes.shift();\r\n\t\tif ( ct === undefined ) {\r\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if we're dealing with a known content-type\r\n\tif ( ct ) {\r\n\t\tfor ( type in contents ) {\r\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\r\n\t\t\t\tdataTypes.unshift( type );\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Check to see if we have a response for the expected dataType\r\n\tif ( dataTypes[ 0 ] in responses ) {\r\n\t\tfinalDataType = dataTypes[ 0 ];\r\n\t} else {\r\n\r\n\t\t// Try convertible dataTypes\r\n\t\tfor ( type in responses ) {\r\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\r\n\t\t\t\tfinalDataType = type;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif ( !firstDataType ) {\r\n\t\t\t\tfirstDataType = type;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Or just use first one\r\n\t\tfinalDataType = finalDataType || firstDataType;\r\n\t}\r\n\r\n\t// If we found a dataType\r\n\t// We add the dataType to the list if needed\r\n\t// and return the corresponding response\r\n\tif ( finalDataType ) {\r\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\r\n\t\t\tdataTypes.unshift( finalDataType );\r\n\t\t}\r\n\t\treturn responses[ finalDataType ];\r\n\t}\r\n}\r\n\r\n/* Chain conversions given the request and the original response\r\n * Also sets the responseXXX fields on the jqXHR instance\r\n */\r\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\r\n\tvar conv2, current, conv, tmp, prev,\r\n\t\tconverters = {},\r\n\r\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\r\n\t\tdataTypes = s.dataTypes.slice();\r\n\r\n\t// Create converters map with lowercased keys\r\n\tif ( dataTypes[ 1 ] ) {\r\n\t\tfor ( conv in s.converters ) {\r\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\r\n\t\t}\r\n\t}\r\n\r\n\tcurrent = dataTypes.shift();\r\n\r\n\t// Convert to each sequential dataType\r\n\twhile ( current ) {\r\n\r\n\t\tif ( s.responseFields[ current ] ) {\r\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\r\n\t\t}\r\n\r\n\t\t// Apply the dataFilter if provided\r\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\r\n\t\t\tresponse = s.dataFilter( response, s.dataType );\r\n\t\t}\r\n\r\n\t\tprev = current;\r\n\t\tcurrent = dataTypes.shift();\r\n\r\n\t\tif ( current ) {\r\n\r\n\t\t// There's only work to do if current dataType is non-auto\r\n\t\t\tif ( current === \"*\" ) {\r\n\r\n\t\t\t\tcurrent = prev;\r\n\r\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\r\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\r\n\r\n\t\t\t\t// Seek a direct converter\r\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\r\n\r\n\t\t\t\t// If none found, seek a pair\r\n\t\t\t\tif ( !conv ) {\r\n\t\t\t\t\tfor ( conv2 in converters ) {\r\n\r\n\t\t\t\t\t\t// If conv2 outputs current\r\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\r\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\r\n\r\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\r\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\r\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\r\n\t\t\t\t\t\t\tif ( conv ) {\r\n\r\n\t\t\t\t\t\t\t\t// Condense equivalence converters\r\n\t\t\t\t\t\t\t\tif ( conv === true ) {\r\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\r\n\r\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\r\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\r\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\r\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply converter (if not an equivalence)\r\n\t\t\t\tif ( conv !== true ) {\r\n\r\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\r\n\t\t\t\t\tif ( conv && s.throws ) {\r\n\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tresponse = conv( response );\r\n\t\t\t\t\t\t} catch ( e ) {\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\r\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { state: \"success\", data: response };\r\n}\r\n\r\njQuery.extend( {\r\n\r\n\t// Counter for holding the number of active queries\r\n\tactive: 0,\r\n\r\n\t// Last-Modified header cache for next request\r\n\tlastModified: {},\r\n\tetag: {},\r\n\r\n\tajaxSettings: {\r\n\t\turl: location.href,\r\n\t\ttype: \"GET\",\r\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\r\n\t\tglobal: true,\r\n\t\tprocessData: true,\r\n\t\tasync: true,\r\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n\t\t/*\r\n\t\ttimeout: 0,\r\n\t\tdata: null,\r\n\t\tdataType: null,\r\n\t\tusername: null,\r\n\t\tpassword: null,\r\n\t\tcache: null,\r\n\t\tthrows: false,\r\n\t\ttraditional: false,\r\n\t\theaders: {},\r\n\t\t*/\r\n\r\n\t\taccepts: {\r\n\t\t\t\"*\": allTypes,\r\n\t\t\ttext: \"text/plain\",\r\n\t\t\thtml: \"text/html\",\r\n\t\t\txml: \"application/xml, text/xml\",\r\n\t\t\tjson: \"application/json, text/javascript\"\r\n\t\t},\r\n\r\n\t\tcontents: {\r\n\t\t\txml: /\\bxml\\b/,\r\n\t\t\thtml: /\\bhtml/,\r\n\t\t\tjson: /\\bjson\\b/\r\n\t\t},\r\n\r\n\t\tresponseFields: {\r\n\t\t\txml: \"responseXML\",\r\n\t\t\ttext: \"responseText\",\r\n\t\t\tjson: \"responseJSON\"\r\n\t\t},\r\n\r\n\t\t// Data converters\r\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\r\n\t\tconverters: {\r\n\r\n\t\t\t// Convert anything to text\r\n\t\t\t\"* text\": String,\r\n\r\n\t\t\t// Text to html (true = no transformation)\r\n\t\t\t\"text html\": true,\r\n\r\n\t\t\t// Evaluate text as a json expression\r\n\t\t\t\"text json\": jQuery.parseJSON,\r\n\r\n\t\t\t// Parse text as xml\r\n\t\t\t\"text xml\": jQuery.parseXML\r\n\t\t},\r\n\r\n\t\t// For options that shouldn't be deep extended:\r\n\t\t// you can add your own custom options here if\r\n\t\t// and when you create one that shouldn't be\r\n\t\t// deep extended (see ajaxExtend)\r\n\t\tflatOptions: {\r\n\t\t\turl: true,\r\n\t\t\tcontext: true\r\n\t\t}\r\n\t},\r\n\r\n\t// Creates a full fledged settings object into target\r\n\t// with both ajaxSettings and settings fields.\r\n\t// If target is omitted, writes into ajaxSettings.\r\n\tajaxSetup: function( target, settings ) {\r\n\t\treturn settings ?\r\n\r\n\t\t\t// Building a settings object\r\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\r\n\r\n\t\t\t// Extending ajaxSettings\r\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\r\n\t},\r\n\r\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\r\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\r\n\r\n\t// Main method\r\n\tajax: function( url, options ) {\r\n\r\n\t\t// If url is an object, simulate pre-1.5 signature\r\n\t\tif ( typeof url === \"object\" ) {\r\n\t\t\toptions = url;\r\n\t\t\turl = undefined;\r\n\t\t}\r\n\r\n\t\t// Force options to be an object\r\n\t\toptions = options || {};\r\n\r\n\t\tvar transport,\r\n\r\n\t\t\t// URL without anti-cache param\r\n\t\t\tcacheURL,\r\n\r\n\t\t\t// Response headers\r\n\t\t\tresponseHeadersString,\r\n\t\t\tresponseHeaders,\r\n\r\n\t\t\t// timeout handle\r\n\t\t\ttimeoutTimer,\r\n\r\n\t\t\t// Url cleanup var\r\n\t\t\turlAnchor,\r\n\r\n\t\t\t// To know if global events are to be dispatched\r\n\t\t\tfireGlobals,\r\n\r\n\t\t\t// Loop variable\r\n\t\t\ti,\r\n\r\n\t\t\t// Create the final options object\r\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\r\n\r\n\t\t\t// Callbacks context\r\n\t\t\tcallbackContext = s.context || s,\r\n\r\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\r\n\t\t\tglobalEventContext = s.context &&\r\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\r\n\t\t\t\t\tjQuery( callbackContext ) :\r\n\t\t\t\t\tjQuery.event,\r\n\r\n\t\t\t// Deferreds\r\n\t\t\tdeferred = jQuery.Deferred(),\r\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\r\n\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tstatusCode = s.statusCode || {},\r\n\r\n\t\t\t// Headers (they are sent all at once)\r\n\t\t\trequestHeaders = {},\r\n\t\t\trequestHeadersNames = {},\r\n\r\n\t\t\t// The jqXHR state\r\n\t\t\tstate = 0,\r\n\r\n\t\t\t// Default abort message\r\n\t\t\tstrAbort = \"canceled\",\r\n\r\n\t\t\t// Fake xhr\r\n\t\t\tjqXHR = {\r\n\t\t\t\treadyState: 0,\r\n\r\n\t\t\t\t// Builds headers hashtable if needed\r\n\t\t\t\tgetResponseHeader: function( key ) {\r\n\t\t\t\t\tvar match;\r\n\t\t\t\t\tif ( state === 2 ) {\r\n\t\t\t\t\t\tif ( !responseHeaders ) {\r\n\t\t\t\t\t\t\tresponseHeaders = {};\r\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\r\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match == null ? null : match;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Raw string\r\n\t\t\t\tgetAllResponseHeaders: function() {\r\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Caches the header\r\n\t\t\t\tsetRequestHeader: function( name, value ) {\r\n\t\t\t\t\tvar lname = name.toLowerCase();\r\n\t\t\t\t\tif ( !state ) {\r\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\r\n\t\t\t\t\t\trequestHeaders[ name ] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Overrides response content-type header\r\n\t\t\t\toverrideMimeType: function( type ) {\r\n\t\t\t\t\tif ( !state ) {\r\n\t\t\t\t\t\ts.mimeType = type;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Status-dependent callbacks\r\n\t\t\t\tstatusCode: function( map ) {\r\n\t\t\t\t\tvar code;\r\n\t\t\t\t\tif ( map ) {\r\n\t\t\t\t\t\tif ( state < 2 ) {\r\n\t\t\t\t\t\t\tfor ( code in map ) {\r\n\r\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\r\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\r\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t},\r\n\r\n\t\t\t\t// Cancel the request\r\n\t\t\t\tabort: function( statusText ) {\r\n\t\t\t\t\tvar finalText = statusText || strAbort;\r\n\t\t\t\t\tif ( transport ) {\r\n\t\t\t\t\t\ttransport.abort( finalText );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdone( 0, finalText );\r\n\t\t\t\t\treturn this;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t// Attach deferreds\r\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\r\n\t\tjqXHR.success = jqXHR.done;\r\n\t\tjqXHR.error = jqXHR.fail;\r\n\r\n\t\t// Remove hash character (#7531: and string promotion)\r\n\t\t// Add protocol if not provided (prefilters might expect it)\r\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\r\n\t\t// We also use the url parameter if available\r\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\r\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\r\n\r\n\t\t// Alias method option to type as per ticket #12004\r\n\t\ts.type = options.method || options.type || s.method || s.type;\r\n\r\n\t\t// Extract dataTypes list\r\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\r\n\r\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\r\n\t\tif ( s.crossDomain == null ) {\r\n\t\t\turlAnchor = document.createElement( \"a\" );\r\n\r\n\t\t\t// Support: IE8-11+\r\n\t\t\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\r\n\t\t\ttry {\r\n\t\t\t\turlAnchor.href = s.url;\r\n\r\n\t\t\t\t// Support: IE8-11+\r\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\r\n\t\t\t\turlAnchor.href = urlAnchor.href;\r\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\r\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\r\n\t\t\t\t// it can be rejected by the transport if it is invalid\r\n\t\t\t\ts.crossDomain = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Convert data if not already a string\r\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\r\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\r\n\t\t}\r\n\r\n\t\t// Apply prefilters\r\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\r\n\r\n\t\t// If request was aborted inside a prefilter, stop there\r\n\t\tif ( state === 2 ) {\r\n\t\t\treturn jqXHR;\r\n\t\t}\r\n\r\n\t\t// We can fire global events as of now if asked to\r\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\r\n\t\tfireGlobals = jQuery.event && s.global;\r\n\r\n\t\t// Watch for a new set of requests\r\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\r\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\r\n\t\t}\r\n\r\n\t\t// Uppercase the type\r\n\t\ts.type = s.type.toUpperCase();\r\n\r\n\t\t// Determine if request has content\r\n\t\ts.hasContent = !rnoContent.test( s.type );\r\n\r\n\t\t// Save the URL in case we're toying with the If-Modified-Since\r\n\t\t// and/or If-None-Match header later on\r\n\t\tcacheURL = s.url;\r\n\r\n\t\t// More options handling for requests with no content\r\n\t\tif ( !s.hasContent ) {\r\n\r\n\t\t\t// If data is available, append data to url\r\n\t\t\tif ( s.data ) {\r\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\r\n\r\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\r\n\t\t\t\tdelete s.data;\r\n\t\t\t}\r\n\r\n\t\t\t// Add anti-cache in url if needed\r\n\t\t\tif ( s.cache === false ) {\r\n\t\t\t\ts.url = rts.test( cacheURL ) ?\r\n\r\n\t\t\t\t\t// If there is already a '_' parameter, set its value\r\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\r\n\r\n\t\t\t\t\t// Otherwise add one to the end\r\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\tif ( s.ifModified ) {\r\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\r\n\t\t\t}\r\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\r\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Set the correct header, if data is being sent\r\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\r\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\r\n\t\t}\r\n\r\n\t\t// Set the Accepts header for the server, depending on the dataType\r\n\t\tjqXHR.setRequestHeader(\r\n\t\t\t\"Accept\",\r\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\r\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\r\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\r\n\t\t\t\ts.accepts[ \"*\" ]\r\n\t\t);\r\n\r\n\t\t// Check for headers option\r\n\t\tfor ( i in s.headers ) {\r\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\r\n\t\t}\r\n\r\n\t\t// Allow custom headers/mimetypes and early abort\r\n\t\tif ( s.beforeSend &&\r\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\r\n\r\n\t\t\t// Abort if not done already and return\r\n\t\t\treturn jqXHR.abort();\r\n\t\t}\r\n\r\n\t\t// Aborting is no longer a cancellation\r\n\t\tstrAbort = \"abort\";\r\n\r\n\t\t// Install callbacks on deferreds\r\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\r\n\t\t\tjqXHR[ i ]( s[ i ] );\r\n\t\t}\r\n\r\n\t\t// Get transport\r\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\r\n\r\n\t\t// If no transport, we auto-abort\r\n\t\tif ( !transport ) {\r\n\t\t\tdone( -1, \"No Transport\" );\r\n\t\t} else {\r\n\t\t\tjqXHR.readyState = 1;\r\n\r\n\t\t\t// Send global event\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\r\n\t\t\t}\r\n\r\n\t\t\t// If request was aborted inside ajaxSend, stop there\r\n\t\t\tif ( state === 2 ) {\r\n\t\t\t\treturn jqXHR;\r\n\t\t\t}\r\n\r\n\t\t\t// Timeout\r\n\t\t\tif ( s.async && s.timeout > 0 ) {\r\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\r\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\r\n\t\t\t\t}, s.timeout );\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tstate = 1;\r\n\t\t\t\ttransport.send( requestHeaders, done );\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t// Propagate exception as error if not done\r\n\t\t\t\tif ( state < 2 ) {\r\n\t\t\t\t\tdone( -1, e );\r\n\r\n\t\t\t\t// Simply rethrow otherwise\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Callback for when everything is done\r\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\r\n\t\t\tvar isSuccess, success, error, response, modified,\r\n\t\t\t\tstatusText = nativeStatusText;\r\n\r\n\t\t\t// Called once\r\n\t\t\tif ( state === 2 ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// State is \"done\" now\r\n\t\t\tstate = 2;\r\n\r\n\t\t\t// Clear timeout if it exists\r\n\t\t\tif ( timeoutTimer ) {\r\n\t\t\t\twindow.clearTimeout( timeoutTimer );\r\n\t\t\t}\r\n\r\n\t\t\t// Dereference transport for early garbage collection\r\n\t\t\t// (no matter how long the jqXHR object will be used)\r\n\t\t\ttransport = undefined;\r\n\r\n\t\t\t// Cache response headers\r\n\t\t\tresponseHeadersString = headers || \"\";\r\n\r\n\t\t\t// Set readyState\r\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\r\n\r\n\t\t\t// Determine if successful\r\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\r\n\r\n\t\t\t// Get response data\r\n\t\t\tif ( responses ) {\r\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\r\n\t\t\t}\r\n\r\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\r\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\r\n\r\n\t\t\t// If successful, handle type chaining\r\n\t\t\tif ( isSuccess ) {\r\n\r\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\r\n\t\t\t\tif ( s.ifModified ) {\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\r\n\t\t\t\t\tif ( modified ) {\r\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if no content\r\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\r\n\t\t\t\t\tstatusText = \"nocontent\";\r\n\r\n\t\t\t\t// if not modified\r\n\t\t\t\t} else if ( status === 304 ) {\r\n\t\t\t\t\tstatusText = \"notmodified\";\r\n\r\n\t\t\t\t// If we have data, let's convert it\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstatusText = response.state;\r\n\t\t\t\t\tsuccess = response.data;\r\n\t\t\t\t\terror = response.error;\r\n\t\t\t\t\tisSuccess = !error;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\r\n\t\t\t\terror = statusText;\r\n\t\t\t\tif ( status || !statusText ) {\r\n\t\t\t\t\tstatusText = \"error\";\r\n\t\t\t\t\tif ( status < 0 ) {\r\n\t\t\t\t\t\tstatus = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set data for the fake xhr object\r\n\t\t\tjqXHR.status = status;\r\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\r\n\r\n\t\t\t// Success/Error\r\n\t\t\tif ( isSuccess ) {\r\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\r\n\t\t\t} else {\r\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Status-dependent callbacks\r\n\t\t\tjqXHR.statusCode( statusCode );\r\n\t\t\tstatusCode = undefined;\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\r\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\r\n\t\t\t}\r\n\r\n\t\t\t// Complete\r\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\r\n\r\n\t\t\tif ( fireGlobals ) {\r\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\r\n\r\n\t\t\t\t// Handle the global AJAX counter\r\n\t\t\t\tif ( !( --jQuery.active ) ) {\r\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn jqXHR;\r\n\t},\r\n\r\n\tgetJSON: function( url, data, callback ) {\r\n\t\treturn jQuery.get( url, data, callback, \"json\" );\r\n\t},\r\n\r\n\tgetScript: function( url, callback ) {\r\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\r\n\t}\r\n} );\r\n\r\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\r\n\tjQuery[ method ] = function( url, data, callback, type ) {\r\n\r\n\t\t// Shift arguments if data argument was omitted\r\n\t\tif ( jQuery.isFunction( data ) ) {\r\n\t\t\ttype = type || callback;\r\n\t\t\tcallback = data;\r\n\t\t\tdata = undefined;\r\n\t\t}\r\n\r\n\t\t// The url can be an options object (which then must have .url)\r\n\t\treturn jQuery.ajax( jQuery.extend( {\r\n\t\t\turl: url,\r\n\t\t\ttype: method,\r\n\t\t\tdataType: type,\r\n\t\t\tdata: data,\r\n\t\t\tsuccess: callback\r\n\t\t}, jQuery.isPlainObject( url ) && url ) );\r\n\t};\r\n} );\r\n\r\n\r\njQuery._evalUrl = function( url ) {\r\n\treturn jQuery.ajax( {\r\n\t\turl: url,\r\n\r\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\r\n\t\ttype: \"GET\",\r\n\t\tdataType: \"script\",\r\n\t\tasync: false,\r\n\t\tglobal: false,\r\n\t\t\"throws\": true\r\n\t} );\r\n};\r\n\r\n\r\njQuery.fn.extend( {\r\n\twrapAll: function( html ) {\r\n\t\tvar wrap;\r\n\r\n\t\tif ( jQuery.isFunction( html ) ) {\r\n\t\t\treturn this.each( function( i ) {\r\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\tif ( this[ 0 ] ) {\r\n\r\n\t\t\t// The elements to wrap the target around\r\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\r\n\r\n\t\t\tif ( this[ 0 ].parentNode ) {\r\n\t\t\t\twrap.insertBefore( this[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\twrap.map( function() {\r\n\t\t\t\tvar elem = this;\r\n\r\n\t\t\t\twhile ( elem.firstElementChild ) {\r\n\t\t\t\t\telem = elem.firstElementChild;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn elem;\r\n\t\t\t} ).append( this );\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t},\r\n\r\n\twrapInner: function( html ) {\r\n\t\tif ( jQuery.isFunction( html ) ) {\r\n\t\t\treturn this.each( function( i ) {\r\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\treturn this.each( function() {\r\n\t\t\tvar self = jQuery( this ),\r\n\t\t\t\tcontents = self.contents();\r\n\r\n\t\t\tif ( contents.length ) {\r\n\t\t\t\tcontents.wrapAll( html );\r\n\r\n\t\t\t} else {\r\n\t\t\t\tself.append( html );\r\n\t\t\t}\r\n\t\t} );\r\n\t},\r\n\r\n\twrap: function( html ) {\r\n\t\tvar isFunction = jQuery.isFunction( html );\r\n\r\n\t\treturn this.each( function( i ) {\r\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\r\n\t\t} );\r\n\t},\r\n\r\n\tunwrap: function() {\r\n\t\treturn this.parent().each( function() {\r\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\r\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\r\n\t\t\t}\r\n\t\t} ).end();\r\n\t}\r\n} );\r\n\r\n\r\njQuery.expr.filters.hidden = function( elem ) {\r\n\treturn !jQuery.expr.filters.visible( elem );\r\n};\r\njQuery.expr.filters.visible = function( elem ) {\r\n\r\n\t// Support: Opera <= 12.12\r\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\r\n\t// Use OR instead of AND as the element is not visible if either is true\r\n\t// See tickets #10406 and #13132\r\n\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\r\n};\r\n\r\n\r\n\r\n\r\nvar r20 = /%20/g,\r\n\trbracket = /\\[\\]$/,\r\n\trCRLF = /\\r?\\n/g,\r\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\r\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\r\n\r\nfunction buildParams( prefix, obj, traditional, add ) {\r\n\tvar name;\r\n\r\n\tif ( jQuery.isArray( obj ) ) {\r\n\r\n\t\t// Serialize array item.\r\n\t\tjQuery.each( obj, function( i, v ) {\r\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\r\n\r\n\t\t\t\t// Treat each array item as a scalar.\r\n\t\t\t\tadd( prefix, v );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\r\n\t\t\t\tbuildParams(\r\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\r\n\t\t\t\t\tv,\r\n\t\t\t\t\ttraditional,\r\n\t\t\t\t\tadd\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\r\n\r\n\t\t// Serialize object item.\r\n\t\tfor ( name in obj ) {\r\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Serialize scalar item.\r\n\t\tadd( prefix, obj );\r\n\t}\r\n}\r\n\r\n// Serialize an array of form elements or a set of\r\n// key/values into a query string\r\njQuery.param = function( a, traditional ) {\r\n\tvar prefix,\r\n\t\ts = [],\r\n\t\tadd = function( key, value ) {\r\n\r\n\t\t\t// If value is a function, invoke it and return its value\r\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\r\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\r\n\t\t};\r\n\r\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\r\n\tif ( traditional === undefined ) {\r\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\r\n\t}\r\n\r\n\t// If an array was passed in, assume that it is an array of form elements.\r\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\r\n\r\n\t\t// Serialize the form elements\r\n\t\tjQuery.each( a, function() {\r\n\t\t\tadd( this.name, this.value );\r\n\t\t} );\r\n\r\n\t} else {\r\n\r\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\r\n\t\t// did it), otherwise encode params recursively.\r\n\t\tfor ( prefix in a ) {\r\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\r\n\t\t}\r\n\t}\r\n\r\n\t// Return the resulting serialization\r\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\r\n};\r\n\r\njQuery.fn.extend( {\r\n\tserialize: function() {\r\n\t\treturn jQuery.param( this.serializeArray() );\r\n\t},\r\n\tserializeArray: function() {\r\n\t\treturn this.map( function() {\r\n\r\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\r\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\r\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\r\n\t\t} )\r\n\t\t.filter( function() {\r\n\t\t\tvar type = this.type;\r\n\r\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\r\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\r\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\r\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\r\n\t\t} )\r\n\t\t.map( function( i, elem ) {\r\n\t\t\tvar val = jQuery( this ).val();\r\n\r\n\t\t\treturn val == null ?\r\n\t\t\t\tnull :\r\n\t\t\t\tjQuery.isArray( val ) ?\r\n\t\t\t\t\tjQuery.map( val, function( val ) {\r\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t\t\t\t} ) :\r\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\r\n\t\t} ).get();\r\n\t}\r\n} );\r\n\r\n\r\njQuery.ajaxSettings.xhr = function() {\r\n\ttry {\r\n\t\treturn new window.XMLHttpRequest();\r\n\t} catch ( e ) {}\r\n};\r\n\r\nvar xhrSuccessStatus = {\r\n\r\n\t\t// File protocol always yields status code 0, assume 200\r\n\t\t0: 200,\r\n\r\n\t\t// Support: IE9\r\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\r\n\t\t1223: 204\r\n\t},\r\n\txhrSupported = jQuery.ajaxSettings.xhr();\r\n\r\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\r\nsupport.ajax = xhrSupported = !!xhrSupported;\r\n\r\njQuery.ajaxTransport( function( options ) {\r\n\tvar callback, errorCallback;\r\n\r\n\t// Cross domain only allowed if supported through XMLHttpRequest\r\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\r\n\t\treturn {\r\n\t\t\tsend: function( headers, complete ) {\r\n\t\t\t\tvar i,\r\n\t\t\t\t\txhr = options.xhr();\r\n\r\n\t\t\t\txhr.open(\r\n\t\t\t\t\toptions.type,\r\n\t\t\t\t\toptions.url,\r\n\t\t\t\t\toptions.async,\r\n\t\t\t\t\toptions.username,\r\n\t\t\t\t\toptions.password\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Apply custom fields if provided\r\n\t\t\t\tif ( options.xhrFields ) {\r\n\t\t\t\t\tfor ( i in options.xhrFields ) {\r\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Override mime type if needed\r\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\r\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// X-Requested-With header\r\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\r\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\r\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\r\n\t\t\t\t// For same-domain requests, won't change header if already provided.\r\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\r\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set headers\r\n\t\t\t\tfor ( i in headers ) {\r\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Callback\r\n\t\t\t\tcallback = function( type ) {\r\n\t\t\t\t\treturn function() {\r\n\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\r\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\r\n\r\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\r\n\t\t\t\t\t\t\t\txhr.abort();\r\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\r\n\r\n\t\t\t\t\t\t\t\t// Support: IE9\r\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\r\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\r\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\r\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tcomplete(\r\n\r\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\r\n\t\t\t\t\t\t\t\t\t\txhr.status,\r\n\t\t\t\t\t\t\t\t\t\txhr.statusText\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcomplete(\r\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\r\n\t\t\t\t\t\t\t\t\txhr.statusText,\r\n\r\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\r\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\r\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\r\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\r\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\r\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\r\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\r\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Listen to events\r\n\t\t\t\txhr.onload = callback();\r\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\r\n\r\n\t\t\t\t// Support: IE9\r\n\t\t\t\t// Use onreadystatechange to replace onabort\r\n\t\t\t\t// to handle uncaught aborts\r\n\t\t\t\tif ( xhr.onabort !== undefined ) {\r\n\t\t\t\t\txhr.onabort = errorCallback;\r\n\t\t\t\t} else {\r\n\t\t\t\t\txhr.onreadystatechange = function() {\r\n\r\n\t\t\t\t\t\t// Check readyState before timeout as it changes\r\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\r\n\r\n\t\t\t\t\t\t\t// Allow onerror to be called first,\r\n\t\t\t\t\t\t\t// but that will not handle a native abort\r\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\r\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\r\n\t\t\t\t\t\t\twindow.setTimeout( function() {\r\n\t\t\t\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\t\t\t\terrorCallback();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Create the abort callback\r\n\t\t\t\tcallback = callback( \"abort\" );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\t// Do send the request (this may raise an exception)\r\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\r\n\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Install script dataType\r\njQuery.ajaxSetup( {\r\n\taccepts: {\r\n\t\tscript: \"text/javascript, application/javascript, \" +\r\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\r\n\t},\r\n\tcontents: {\r\n\t\tscript: /\\b(?:java|ecma)script\\b/\r\n\t},\r\n\tconverters: {\r\n\t\t\"text script\": function( text ) {\r\n\t\t\tjQuery.globalEval( text );\r\n\t\t\treturn text;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n// Handle cache's special case and crossDomain\r\njQuery.ajaxPrefilter( \"script\", function( s ) {\r\n\tif ( s.cache === undefined ) {\r\n\t\ts.cache = false;\r\n\t}\r\n\tif ( s.crossDomain ) {\r\n\t\ts.type = \"GET\";\r\n\t}\r\n} );\r\n\r\n// Bind script tag hack transport\r\njQuery.ajaxTransport( \"script\", function( s ) {\r\n\r\n\t// This transport only deals with cross domain requests\r\n\tif ( s.crossDomain ) {\r\n\t\tvar script, callback;\r\n\t\treturn {\r\n\t\t\tsend: function( _, complete ) {\r\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\r\n\t\t\t\t\tcharset: s.scriptCharset,\r\n\t\t\t\t\tsrc: s.url\r\n\t\t\t\t} ).on(\r\n\t\t\t\t\t\"load error\",\r\n\t\t\t\t\tcallback = function( evt ) {\r\n\t\t\t\t\t\tscript.remove();\r\n\t\t\t\t\t\tcallback = null;\r\n\t\t\t\t\t\tif ( evt ) {\r\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\r\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\r\n\t\t\t},\r\n\t\t\tabort: function() {\r\n\t\t\t\tif ( callback ) {\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\nvar oldCallbacks = [],\r\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\r\n\r\n// Default jsonp settings\r\njQuery.ajaxSetup( {\r\n\tjsonp: \"callback\",\r\n\tjsonpCallback: function() {\r\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\r\n\t\tthis[ callback ] = true;\r\n\t\treturn callback;\r\n\t}\r\n} );\r\n\r\n// Detect, normalize options and install callbacks for jsonp requests\r\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\r\n\r\n\tvar callbackName, overwritten, responseContainer,\r\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\r\n\t\t\t\"url\" :\r\n\t\t\ttypeof s.data === \"string\" &&\r\n\t\t\t\t( s.contentType || \"\" )\r\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\r\n\t\t\t\trjsonp.test( s.data ) && \"data\"\r\n\t\t);\r\n\r\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\r\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\r\n\r\n\t\t// Get callback name, remembering preexisting value associated with it\r\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\r\n\t\t\ts.jsonpCallback() :\r\n\t\t\ts.jsonpCallback;\r\n\r\n\t\t// Insert callback into url or form data\r\n\t\tif ( jsonProp ) {\r\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\r\n\t\t} else if ( s.jsonp !== false ) {\r\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\r\n\t\t}\r\n\r\n\t\t// Use data converter to retrieve json after script execution\r\n\t\ts.converters[ \"script json\" ] = function() {\r\n\t\t\tif ( !responseContainer ) {\r\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\r\n\t\t\t}\r\n\t\t\treturn responseContainer[ 0 ];\r\n\t\t};\r\n\r\n\t\t// Force json dataType\r\n\t\ts.dataTypes[ 0 ] = \"json\";\r\n\r\n\t\t// Install callback\r\n\t\toverwritten = window[ callbackName ];\r\n\t\twindow[ callbackName ] = function() {\r\n\t\t\tresponseContainer = arguments;\r\n\t\t};\r\n\r\n\t\t// Clean-up function (fires after converters)\r\n\t\tjqXHR.always( function() {\r\n\r\n\t\t\t// If previous value didn't exist - remove it\r\n\t\t\tif ( overwritten === undefined ) {\r\n\t\t\t\tjQuery( window ).removeProp( callbackName );\r\n\r\n\t\t\t// Otherwise restore preexisting value\r\n\t\t\t} else {\r\n\t\t\t\twindow[ callbackName ] = overwritten;\r\n\t\t\t}\r\n\r\n\t\t\t// Save back as free\r\n\t\t\tif ( s[ callbackName ] ) {\r\n\r\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\r\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\r\n\r\n\t\t\t\t// Save the callback name for future use\r\n\t\t\t\toldCallbacks.push( callbackName );\r\n\t\t\t}\r\n\r\n\t\t\t// Call if it was a function and we have a response\r\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\r\n\t\t\t\toverwritten( responseContainer[ 0 ] );\r\n\t\t\t}\r\n\r\n\t\t\tresponseContainer = overwritten = undefined;\r\n\t\t} );\r\n\r\n\t\t// Delegate to script\r\n\t\treturn \"script\";\r\n\t}\r\n} );\r\n\r\n\r\n\r\n\r\n// Argument \"data\" should be string of html\r\n// context (optional): If specified, the fragment will be created in this context,\r\n// defaults to document\r\n// keepScripts (optional): If true, will include scripts passed in the html string\r\njQuery.parseHTML = function( data, context, keepScripts ) {\r\n\tif ( !data || typeof data !== \"string\" ) {\r\n\t\treturn null;\r\n\t}\r\n\tif ( typeof context === \"boolean\" ) {\r\n\t\tkeepScripts = context;\r\n\t\tcontext = false;\r\n\t}\r\n\tcontext = context || document;\r\n\r\n\tvar parsed = rsingleTag.exec( data ),\r\n\t\tscripts = !keepScripts && [];\r\n\r\n\t// Single tag\r\n\tif ( parsed ) {\r\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\r\n\t}\r\n\r\n\tparsed = buildFragment( [ data ], context, scripts );\r\n\r\n\tif ( scripts && scripts.length ) {\r\n\t\tjQuery( scripts ).remove();\r\n\t}\r\n\r\n\treturn jQuery.merge( [], parsed.childNodes );\r\n};\r\n\r\n\r\n// Keep a copy of the old load method\r\nvar _load = jQuery.fn.load;\r\n\r\n/**\r\n * Load a url into a page\r\n */\r\njQuery.fn.load = function( url, params, callback ) {\r\n\tif ( typeof url !== \"string\" && _load ) {\r\n\t\treturn _load.apply( this, arguments );\r\n\t}\r\n\r\n\tvar selector, type, response,\r\n\t\tself = this,\r\n\t\toff = url.indexOf( \" \" );\r\n\r\n\tif ( off > -1 ) {\r\n\t\tselector = jQuery.trim( url.slice( off ) );\r\n\t\turl = url.slice( 0, off );\r\n\t}\r\n\r\n\t// If it's a function\r\n\tif ( jQuery.isFunction( params ) ) {\r\n\r\n\t\t// We assume that it's the callback\r\n\t\tcallback = params;\r\n\t\tparams = undefined;\r\n\r\n\t// Otherwise, build a param string\r\n\t} else if ( params && typeof params === \"object\" ) {\r\n\t\ttype = \"POST\";\r\n\t}\r\n\r\n\t// If we have elements to modify, make the request\r\n\tif ( self.length > 0 ) {\r\n\t\tjQuery.ajax( {\r\n\t\t\turl: url,\r\n\r\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\r\n\t\t\t// Make value of this field explicit since\r\n\t\t\t// user can override it through ajaxSetup method\r\n\t\t\ttype: type || \"GET\",\r\n\t\t\tdataType: \"html\",\r\n\t\t\tdata: params\r\n\t\t} ).done( function( responseText ) {\r\n\r\n\t\t\t// Save response for use in complete callback\r\n\t\t\tresponse = arguments;\r\n\r\n\t\t\tself.html( selector ?\r\n\r\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\r\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\r\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\r\n\r\n\t\t\t\t// Otherwise use the full result\r\n\t\t\t\tresponseText );\r\n\r\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\r\n\t\t// but they are ignored because response was set above.\r\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\r\n\t\t} ).always( callback && function( jqXHR, status ) {\r\n\t\t\tself.each( function() {\r\n\t\t\t\tcallback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\treturn this;\r\n};\r\n\r\n\r\n\r\n\r\n// Attach a bunch of functions for handling common AJAX events\r\njQuery.each( [\r\n\t\"ajaxStart\",\r\n\t\"ajaxStop\",\r\n\t\"ajaxComplete\",\r\n\t\"ajaxError\",\r\n\t\"ajaxSuccess\",\r\n\t\"ajaxSend\"\r\n], function( i, type ) {\r\n\tjQuery.fn[ type ] = function( fn ) {\r\n\t\treturn this.on( type, fn );\r\n\t};\r\n} );\r\n\r\n\r\n\r\n\r\njQuery.expr.filters.animated = function( elem ) {\r\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\r\n\t\treturn elem === fn.elem;\r\n\t} ).length;\r\n};\r\n\r\n\r\n\r\n\r\n/**\r\n * Gets a window from an element\r\n */\r\nfunction getWindow( elem ) {\r\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\r\n}\r\n\r\njQuery.offset = {\r\n\tsetOffset: function( elem, options, i ) {\r\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\r\n\t\t\tposition = jQuery.css( elem, \"position\" ),\r\n\t\t\tcurElem = jQuery( elem ),\r\n\t\t\tprops = {};\r\n\r\n\t\t// Set position first, in-case top/left are set even on static elem\r\n\t\tif ( position === \"static\" ) {\r\n\t\t\telem.style.position = \"relative\";\r\n\t\t}\r\n\r\n\t\tcurOffset = curElem.offset();\r\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\r\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\r\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\r\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\r\n\r\n\t\t// Need to be able to calculate position if either\r\n\t\t// top or left is auto and position is either absolute or fixed\r\n\t\tif ( calculatePosition ) {\r\n\t\t\tcurPosition = curElem.position();\r\n\t\t\tcurTop = curPosition.top;\r\n\t\t\tcurLeft = curPosition.left;\r\n\r\n\t\t} else {\r\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\r\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\r\n\t\t}\r\n\r\n\t\tif ( jQuery.isFunction( options ) ) {\r\n\r\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\r\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\r\n\t\t}\r\n\r\n\t\tif ( options.top != null ) {\r\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\r\n\t\t}\r\n\t\tif ( options.left != null ) {\r\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\r\n\t\t}\r\n\r\n\t\tif ( \"using\" in options ) {\r\n\t\t\toptions.using.call( elem, props );\r\n\r\n\t\t} else {\r\n\t\t\tcurElem.css( props );\r\n\t\t}\r\n\t}\r\n};\r\n\r\njQuery.fn.extend( {\r\n\toffset: function( options ) {\r\n\t\tif ( arguments.length ) {\r\n\t\t\treturn options === undefined ?\r\n\t\t\t\tthis :\r\n\t\t\t\tthis.each( function( i ) {\r\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\r\n\t\t\t\t} );\r\n\t\t}\r\n\r\n\t\tvar docElem, win,\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tbox = { top: 0, left: 0 },\r\n\t\t\tdoc = elem && elem.ownerDocument;\r\n\r\n\t\tif ( !doc ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdocElem = doc.documentElement;\r\n\r\n\t\t// Make sure it's not a disconnected DOM node\r\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\r\n\t\t\treturn box;\r\n\t\t}\r\n\r\n\t\tbox = elem.getBoundingClientRect();\r\n\t\twin = getWindow( doc );\r\n\t\treturn {\r\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\r\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\r\n\t\t};\r\n\t},\r\n\r\n\tposition: function() {\r\n\t\tif ( !this[ 0 ] ) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar offsetParent, offset,\r\n\t\t\telem = this[ 0 ],\r\n\t\t\tparentOffset = { top: 0, left: 0 };\r\n\r\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\r\n\t\t// because it is its only offset parent\r\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\r\n\r\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\r\n\t\t\toffset = elem.getBoundingClientRect();\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Get *real* offsetParent\r\n\t\t\toffsetParent = this.offsetParent();\r\n\r\n\t\t\t// Get correct offsets\r\n\t\t\toffset = this.offset();\r\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\r\n\t\t\t\tparentOffset = offsetParent.offset();\r\n\t\t\t}\r\n\r\n\t\t\t// Add offsetParent borders\r\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\r\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\r\n\t\t}\r\n\r\n\t\t// Subtract parent offsets and element margins\r\n\t\treturn {\r\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\r\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\r\n\t\t};\r\n\t},\r\n\r\n\t// This method will return documentElement in the following cases:\r\n\t// 1) For the element inside the iframe without offsetParent, this method will return\r\n\t//    documentElement of the parent window\r\n\t// 2) For the hidden or detached element\r\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\r\n\t//\r\n\t// but those exceptions were never presented as a real life use-cases\r\n\t// and might be considered as more preferable results.\r\n\t//\r\n\t// This logic, however, is not guaranteed and can change at any point in the future\r\n\toffsetParent: function() {\r\n\t\treturn this.map( function() {\r\n\t\t\tvar offsetParent = this.offsetParent;\r\n\r\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\r\n\t\t\t\toffsetParent = offsetParent.offsetParent;\r\n\t\t\t}\r\n\r\n\t\t\treturn offsetParent || documentElement;\r\n\t\t} );\r\n\t}\r\n} );\r\n\r\n// Create scrollLeft and scrollTop methods\r\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\r\n\tvar top = \"pageYOffset\" === prop;\r\n\r\n\tjQuery.fn[ method ] = function( val ) {\r\n\t\treturn access( this, function( elem, method, val ) {\r\n\t\t\tvar win = getWindow( elem );\r\n\r\n\t\t\tif ( val === undefined ) {\r\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\r\n\t\t\t}\r\n\r\n\t\t\tif ( win ) {\r\n\t\t\t\twin.scrollTo(\r\n\t\t\t\t\t!top ? val : win.pageXOffset,\r\n\t\t\t\t\ttop ? val : win.pageYOffset\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\t\t\t\telem[ method ] = val;\r\n\t\t\t}\r\n\t\t}, method, val, arguments.length );\r\n\t};\r\n} );\r\n\r\n// Support: Safari<7-8+, Chrome<37-44+\r\n// Add the top/left cssHooks using jQuery.fn.position\r\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\r\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\r\n// getComputedStyle returns percent when specified for top/left/bottom/right;\r\n// rather than make the css module depend on the offset module, just check for it here\r\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\r\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\r\n\t\tfunction( elem, computed ) {\r\n\t\t\tif ( computed ) {\r\n\t\t\t\tcomputed = curCSS( elem, prop );\r\n\r\n\t\t\t\t// If curCSS returns percentage, fallback to offset\r\n\t\t\t\treturn rnumnonpx.test( computed ) ?\r\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\r\n\t\t\t\t\tcomputed;\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n} );\r\n\r\n\r\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\r\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\r\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\r\n\t\tfunction( defaultExtra, funcName ) {\r\n\r\n\t\t// Margin is only for outerHeight, outerWidth\r\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\r\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\r\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\r\n\r\n\t\t\treturn access( this, function( elem, type, value ) {\r\n\t\t\t\tvar doc;\r\n\r\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\r\n\r\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\r\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\r\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\r\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Get document width or height\r\n\t\t\t\tif ( elem.nodeType === 9 ) {\r\n\t\t\t\t\tdoc = elem.documentElement;\r\n\r\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\r\n\t\t\t\t\t// whichever is greatest\r\n\t\t\t\t\treturn Math.max(\r\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\r\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\r\n\t\t\t\t\t\tdoc[ \"client\" + name ]\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn value === undefined ?\r\n\r\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\r\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\r\n\r\n\t\t\t\t\t// Set width or height on the element\r\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\r\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\r\n\t\t};\r\n\t} );\r\n} );\r\n\r\n\r\njQuery.fn.extend( {\r\n\r\n\tbind: function( types, data, fn ) {\r\n\t\treturn this.on( types, null, data, fn );\r\n\t},\r\n\tunbind: function( types, fn ) {\r\n\t\treturn this.off( types, null, fn );\r\n\t},\r\n\r\n\tdelegate: function( selector, types, data, fn ) {\r\n\t\treturn this.on( types, selector, data, fn );\r\n\t},\r\n\tundelegate: function( selector, types, fn ) {\r\n\r\n\t\t// ( namespace ) or ( selector, types [, fn] )\r\n\t\treturn arguments.length === 1 ?\r\n\t\t\tthis.off( selector, \"**\" ) :\r\n\t\t\tthis.off( types, selector || \"**\", fn );\r\n\t},\r\n\tsize: function() {\r\n\t\treturn this.length;\r\n\t}\r\n} );\r\n\r\njQuery.fn.andSelf = jQuery.fn.addBack;\r\n\r\n\r\n\r\n\r\n// Register as a named AMD module, since jQuery can be concatenated with other\r\n// files that may use define, but not via a proper concatenation script that\r\n// understands anonymous AMD modules. A named AMD is safest and most robust\r\n// way to register. Lowercase jquery is used because AMD module names are\r\n// derived from file names, and jQuery is normally delivered in a lowercase\r\n// file name. Do this after creating the global so that if an AMD module wants\r\n// to call noConflict to hide this version of jQuery, it will work.\r\n\r\n// Note that for maximum portability, libraries that are not jQuery should\r\n// declare themselves as anonymous modules, and avoid setting a global if an\r\n// AMD loader is present. jQuery is a special case. For more information, see\r\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\r\n\r\nif ( true ) {\r\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t\treturn jQuery;\r\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n}\r\n\r\n\r\n\r\nvar\r\n\r\n\t// Map over jQuery in case of overwrite\r\n\t_jQuery = window.jQuery,\r\n\r\n\t// Map over the $ in case of overwrite\r\n\t_$ = window.$;\r\n\r\njQuery.noConflict = function( deep ) {\r\n\tif ( window.$ === jQuery ) {\r\n\t\twindow.$ = _$;\r\n\t}\r\n\r\n\tif ( deep && window.jQuery === jQuery ) {\r\n\t\twindow.jQuery = _jQuery;\r\n\t}\r\n\r\n\treturn jQuery;\r\n};\r\n\r\n// Expose jQuery and $ identifiers, even in AMD\r\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\r\n// and CommonJS for browser emulators (#13566)\r\nif ( !noGlobal ) {\r\n\twindow.jQuery = window.$ = jQuery;\r\n}\r\n\r\nreturn jQuery;\r\n}));\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 47:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(6);


/***/ }),

/***/ 6:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*globals jQuery, define, module, exports, require, window, document, postMessage */\r\n(function (factory) {\r\n\t\"use strict\";\r\n\tif (true) {\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t}\r\n\telse if(typeof module !== 'undefined' && module.exports) {\r\n\t\tmodule.exports = factory(require('jquery'));\r\n\t}\r\n\telse {\r\n\t\tfactory(jQuery);\r\n\t}\r\n}(function ($, undefined) {\r\n\t\"use strict\";\r\n/*!\r\n * jsTree 3.3.3\r\n * http://jstree.com/\r\n *\r\n * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\r\n *\r\n * Licensed same as jquery - under the terms of the MIT License\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n */\r\n/*!\r\n * if using jslint please allow for the jQuery global and use following options:\r\n * jslint: loopfunc: true, browser: true, ass: true, bitwise: true, continue: true, nomen: true, plusplus: true, regexp: true, unparam: true, todo: true, white: true\r\n */\r\n/*jshint -W083 */\r\n\r\n\t// prevent another load? maybe there is a better way?\r\n\tif($.jstree) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * ### jsTree core functionality\r\n\t */\r\n\r\n\t// internal variables\r\n\tvar instance_counter = 0,\r\n\t\tccp_node = false,\r\n\t\tccp_mode = false,\r\n\t\tccp_inst = false,\r\n\t\tthemes_loaded = [],\r\n\t\tsrc = $('script:last').attr('src'),\r\n\t\tdocument = window.document; // local variable is always faster to access then a global\r\n\r\n\t/**\r\n\t * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\r\n\t * @name $.jstree\r\n\t */\r\n\t$.jstree = {\r\n\t\t/**\r\n\t\t * specifies the jstree version in use\r\n\t\t * @name $.jstree.version\r\n\t\t */\r\n\t\tversion : '3.3.3',\r\n\t\t/**\r\n\t\t * holds all the default options used when creating new instances\r\n\t\t * @name $.jstree.defaults\r\n\t\t */\r\n\t\tdefaults : {\r\n\t\t\t/**\r\n\t\t\t * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\r\n\t\t\t * @name $.jstree.defaults.plugins\r\n\t\t\t */\r\n\t\t\tplugins : []\r\n\t\t},\r\n\t\t/**\r\n\t\t * stores all loaded jstree plugins (used internally)\r\n\t\t * @name $.jstree.plugins\r\n\t\t */\r\n\t\tplugins : {},\r\n\t\tpath : src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/,'') : '',\r\n\t\tidregex : /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%?`]/g,\r\n\t\troot : '#'\r\n\t};\r\n\t\r\n\t/**\r\n\t * creates a jstree instance\r\n\t * @name $.jstree.create(el [, options])\r\n\t * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\r\n\t * @param {Object} options options for this instance (extends `$.jstree.defaults`)\r\n\t * @return {jsTree} the new instance\r\n\t */\r\n\t$.jstree.create = function (el, options) {\r\n\t\tvar tmp = new $.jstree.core(++instance_counter),\r\n\t\t\topt = options;\r\n\t\toptions = $.extend(true, {}, $.jstree.defaults, options);\r\n\t\tif(opt && opt.plugins) {\r\n\t\t\toptions.plugins = opt.plugins;\r\n\t\t}\r\n\t\t$.each(options.plugins, function (i, k) {\r\n\t\t\tif(i !== 'core') {\r\n\t\t\t\ttmp = tmp.plugin(k, options[k]);\r\n\t\t\t}\r\n\t\t});\r\n\t\t$(el).data('jstree', tmp);\r\n\t\ttmp.init(el, options);\r\n\t\treturn tmp;\r\n\t};\r\n\t/**\r\n\t * remove all traces of jstree from the DOM and destroy all instances\r\n\t * @name $.jstree.destroy()\r\n\t */\r\n\t$.jstree.destroy = function () {\r\n\t\t$('.jstree:jstree').jstree('destroy');\r\n\t\t$(document).off('.jstree');\r\n\t};\r\n\t/**\r\n\t * the jstree class constructor, used only internally\r\n\t * @private\r\n\t * @name $.jstree.core(id)\r\n\t * @param {Number} id this instance's index\r\n\t */\r\n\t$.jstree.core = function (id) {\r\n\t\tthis._id = id;\r\n\t\tthis._cnt = 0;\r\n\t\tthis._wrk = null;\r\n\t\tthis._data = {\r\n\t\t\tcore : {\r\n\t\t\t\tthemes : {\r\n\t\t\t\t\tname : false,\r\n\t\t\t\t\tdots : false,\r\n\t\t\t\t\ticons : false,\r\n\t\t\t\t\tellipsis : false\r\n\t\t\t\t},\r\n\t\t\t\tselected : [],\r\n\t\t\t\tlast_error : {},\r\n\t\t\t\tworking : false,\r\n\t\t\t\tworker_queue : [],\r\n\t\t\t\tfocused : null\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\t/**\r\n\t * get a reference to an existing instance\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\r\n\t *\t// all of there will return the same instance\r\n\t *\t$.jstree.reference('tree');\r\n\t *\t$.jstree.reference('#tree');\r\n\t *\t$.jstree.reference($('#tree'));\r\n\t *\t$.jstree.reference(document.getElementByID('tree'));\r\n\t *\t$.jstree.reference('branch');\r\n\t *\t$.jstree.reference('#branch');\r\n\t *\t$.jstree.reference($('#branch'));\r\n\t *\t$.jstree.reference(document.getElementByID('branch'));\r\n\t *\r\n\t * @name $.jstree.reference(needle)\r\n\t * @param {DOMElement|jQuery|String} needle\r\n\t * @return {jsTree|null} the instance or `null` if not found\r\n\t */\r\n\t$.jstree.reference = function (needle) {\r\n\t\tvar tmp = null,\r\n\t\t\tobj = null;\r\n\t\tif(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }\r\n\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $(needle); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $('#' + needle.replace($.jstree.idregex,'\\\\$&')); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\r\n\t\t\ttmp = obj;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$('.jstree').each(function () {\r\n\t\t\t\tvar inst = $(this).data('jstree');\r\n\t\t\t\tif(inst && inst._model.data[needle]) {\r\n\t\t\t\t\ttmp = inst;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn tmp;\r\n\t};\r\n\t/**\r\n\t * Create an instance, get an instance or invoke a command on a instance.\r\n\t *\r\n\t * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\r\n\t *\r\n\t * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\r\n\t *\r\n\t * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\r\n\t *\r\n\t * In any other case - nothing is returned and chaining is not broken.\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t$('#tree1').jstree(); // creates an instance\r\n\t *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\r\n\t *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\r\n\t *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\r\n\t *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\r\n\t *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\r\n\t *\r\n\t * @name $().jstree([arg])\r\n\t * @param {String|Object} arg\r\n\t * @return {Mixed}\r\n\t */\r\n\t$.fn.jstree = function (arg) {\r\n\t\t// check for string argument\r\n\t\tvar is_method\t= (typeof arg === 'string'),\r\n\t\t\targs\t\t= Array.prototype.slice.call(arguments, 1),\r\n\t\t\tresult\t\t= null;\r\n\t\tif(arg === true && !this.length) { return false; }\r\n\t\tthis.each(function () {\r\n\t\t\t// get the instance (if there is one) and method (if it exists)\r\n\t\t\tvar instance = $.jstree.reference(this),\r\n\t\t\t\tmethod = is_method && instance ? instance[arg] : null;\r\n\t\t\t// if calling a method, and method is available - execute on the instance\r\n\t\t\tresult = is_method && method ?\r\n\t\t\t\tmethod.apply(instance, args) :\r\n\t\t\t\tnull;\r\n\t\t\t// if there is no instance and no method is being called - create one\r\n\t\t\tif(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\r\n\t\t\t\t$.jstree.create(this, arg);\r\n\t\t\t}\r\n\t\t\t// if there is an instance and no method is called - return the instance\r\n\t\t\tif( (instance && !is_method) || arg === true ) {\r\n\t\t\t\tresult = instance || false;\r\n\t\t\t}\r\n\t\t\t// if there was a method call which returned a result - break and return the value\r\n\t\t\tif(result !== null && result !== undefined) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if there was a method call with a valid return value - return that, otherwise continue the chain\r\n\t\treturn result !== null && result !== undefined ?\r\n\t\t\tresult : this;\r\n\t};\r\n\t/**\r\n\t * used to find elements containing an instance\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t$('div:jstree').each(function () {\r\n\t *\t\t$(this).jstree('destroy');\r\n\t *\t});\r\n\t *\r\n\t * @name $(':jstree')\r\n\t * @return {jQuery}\r\n\t */\r\n\t$.expr.pseudos.jstree = $.expr.createPseudo(function(search) {\r\n\t\treturn function(a) {\r\n\t\t\treturn $(a).hasClass('jstree') &&\r\n\t\t\t\t$(a).data('jstree') !== undefined;\r\n\t\t};\r\n\t});\r\n\r\n\t/**\r\n\t * stores all defaults for the core\r\n\t * @name $.jstree.defaults.core\r\n\t */\r\n\t$.jstree.defaults.core = {\r\n\t\t/**\r\n\t\t * data configuration\r\n\t\t *\r\n\t\t * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\r\n\t\t *\r\n\t\t * You can also pass in a HTML string or a JSON array here.\r\n\t\t *\r\n\t\t * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.\r\n\t\t * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\r\n\t\t *\r\n\t\t * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t// AJAX\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : {\r\n\t\t *\t\t\t\t'url' : '/get/children/',\r\n\t\t *\t\t\t\t'data' : function (node) {\r\n\t\t *\t\t\t\t\treturn { 'id' : node.id };\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t *\t// direct data\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : [\r\n\t\t *\t\t\t\t'Simple root node',\r\n\t\t *\t\t\t\t{\r\n\t\t *\t\t\t\t\t'id' : 'node_2',\r\n\t\t *\t\t\t\t\t'text' : 'Root node with options',\r\n\t\t *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\r\n\t\t *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t]\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t *\t// function\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : function (obj, callback) {\r\n\t\t *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.data\r\n\t\t */\r\n\t\tdata\t\t\t: false,\r\n\t\t/**\r\n\t\t * configure the various strings used throughout the tree\r\n\t\t *\r\n\t\t * You can use an object where the key is the string you need to replace and the value is your replacement.\r\n\t\t * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\r\n\t\t * If left as `false` no replacement is made.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'strings' : {\r\n\t\t *\t\t\t\t'Loading ...' : 'Please wait ...'\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.strings\r\n\t\t */\r\n\t\tstrings\t\t\t: false,\r\n\t\t/**\r\n\t\t * determines what happens when a user tries to modify the structure of the tree\r\n\t\t * If left as `false` all operations like create, rename, delete, move or copy are prevented.\r\n\t\t * You can set this to `true` to allow all interactions or use a function to have better control.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\r\n\t\t *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node' or 'copy_node'\r\n\t\t *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\r\n\t\t *\t\t\t\treturn operation === 'rename_node' ? true : false;\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.check_callback\r\n\t\t */\r\n\t\tcheck_callback\t: false,\r\n\t\t/**\r\n\t\t * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\r\n\t\t * @name $.jstree.defaults.core.error\r\n\t\t */\r\n\t\terror\t\t\t: $.noop,\r\n\t\t/**\r\n\t\t * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\r\n\t\t * @name $.jstree.defaults.core.animation\r\n\t\t */\r\n\t\tanimation\t\t: 200,\r\n\t\t/**\r\n\t\t * a boolean indicating if multiple nodes can be selected\r\n\t\t * @name $.jstree.defaults.core.multiple\r\n\t\t */\r\n\t\tmultiple\t\t: true,\r\n\t\t/**\r\n\t\t * theme configuration object\r\n\t\t * @name $.jstree.defaults.core.themes\r\n\t\t */\r\n\t\tthemes\t\t\t: {\r\n\t\t\t/**\r\n\t\t\t * the name of the theme to use (if left as `false` the default theme is used)\r\n\t\t\t * @name $.jstree.defaults.core.themes.name\r\n\t\t\t */\r\n\t\t\tname\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\r\n\t\t\t * @name $.jstree.defaults.core.themes.url\r\n\t\t\t */\r\n\t\t\turl\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the location of all jstree themes - only used if `url` is set to `true`\r\n\t\t\t * @name $.jstree.defaults.core.themes.dir\r\n\t\t\t */\r\n\t\t\tdir\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if connecting dots are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.dots\r\n\t\t\t */\r\n\t\t\tdots\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node icons are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.icons\r\n\t\t\t */\r\n\t\t\ticons\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container\r\n\t\t\t * @name $.jstree.defaults.core.themes.ellipsis\r\n\t\t\t */\r\n\t\t\tellipsis\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if the tree background is striped\r\n\t\t\t * @name $.jstree.defaults.core.themes.stripes\r\n\t\t\t */\r\n\t\t\tstripes\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\r\n\t\t\t * @name $.jstree.defaults.core.themes.variant\r\n\t\t\t */\r\n\t\t\tvariant\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\r\n\t\t\t * @name $.jstree.defaults.core.themes.responsive\r\n\t\t\t */\r\n\t\t\tresponsive\t\t: false\r\n\t\t},\r\n\t\t/**\r\n\t\t * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\r\n\t\t * @name $.jstree.defaults.core.expand_selected_onload\r\n\t\t */\r\n\t\texpand_selected_onload : true,\r\n\t\t/**\r\n\t\t * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.worker\r\n\t\t */\r\n\t\tworker : true,\r\n\t\t/**\r\n\t\t * Force node text to plain text (and escape HTML). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.force_text\r\n\t\t */\r\n\t\tforce_text : false,\r\n\t\t/**\r\n\t\t * Should the node should be toggled if the text is double clicked . Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.dblclick_toggle\r\n\t\t */\r\n\t\tdblclick_toggle : true\r\n\t};\r\n\t$.jstree.core.prototype = {\r\n\t\t/**\r\n\t\t * used to decorate an instance with a plugin. Used internally.\r\n\t\t * @private\r\n\t\t * @name plugin(deco [, opts])\r\n\t\t * @param  {String} deco the plugin to decorate with\r\n\t\t * @param  {Object} opts options for the plugin\r\n\t\t * @return {jsTree}\r\n\t\t */\r\n\t\tplugin : function (deco, opts) {\r\n\t\t\tvar Child = $.jstree.plugins[deco];\r\n\t\t\tif(Child) {\r\n\t\t\t\tthis._data[deco] = {};\r\n\t\t\t\tChild.prototype = this;\r\n\t\t\t\treturn new Child(opts, this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * initialize the instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name init(el, optons)\r\n\t\t * @param {DOMElement|jQuery|String} el the element we are transforming\r\n\t\t * @param {Object} options options for this instance\r\n\t\t * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\r\n\t\t */\r\n\t\tinit : function (el, options) {\r\n\t\t\tthis._model = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tchanged : [],\r\n\t\t\t\tforce_full_redraw : false,\r\n\t\t\t\tredraw_timeout : false,\r\n\t\t\t\tdefault_state : {\r\n\t\t\t\t\tloaded : true,\r\n\t\t\t\t\topened : false,\r\n\t\t\t\t\tselected : false,\r\n\t\t\t\t\tdisabled : false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tthis._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\r\n\t\t\tthis.element = $(el).addClass('jstree jstree-' + this._id);\r\n\t\t\tthis.settings = options;\r\n\r\n\t\t\tthis._data.core.ready = false;\r\n\t\t\tthis._data.core.loaded = false;\r\n\t\t\tthis._data.core.rtl = (this.element.css(\"direction\") === \"rtl\");\r\n\t\t\tthis.element[this._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\r\n\t\t\tthis.element.attr('role','tree');\r\n\t\t\tif(this.settings.core.multiple) {\r\n\t\t\t\tthis.element.attr('aria-multiselectable', true);\r\n\t\t\t}\r\n\t\t\tif(!this.element.attr('tabindex')) {\r\n\t\t\t\tthis.element.attr('tabindex','0');\r\n\t\t\t}\r\n\r\n\t\t\tthis.bind();\r\n\t\t\t/**\r\n\t\t\t * triggered after all events are bound\r\n\t\t\t * @event\r\n\t\t\t * @name init.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger(\"init\");\r\n\r\n\t\t\tthis._data.core.original_container_html = this.element.find(\" > ul > li\").clone(true);\r\n\t\t\tthis._data.core.original_container_html\r\n\t\t\t\t.find(\"li\").addBack()\r\n\t\t\t\t.contents().filter(function() {\r\n\t\t\t\t\treturn this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\r\n\t\t\t\t})\r\n\t\t\t\t.remove();\r\n\t\t\tthis.element.html(\"<\"+\"ul class='jstree-container-ul jstree-children' role='group'><\"+\"li id='j\"+this._id+\"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\tthis.element.attr('aria-activedescendant','j' + this._id + '_loading');\r\n\t\t\tthis._data.core.li_height = this.get_container_ul().children(\"li\").first().height() || 24;\r\n\t\t\tthis._data.core.node = this._create_prototype_node();\r\n\t\t\t/**\r\n\t\t\t * triggered after the loading text is shown and before loading starts\r\n\t\t\t * @event\r\n\t\t\t * @name loading.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger(\"loading\");\r\n\t\t\tthis.load_node($.jstree.root);\r\n\t\t},\r\n\t\t/**\r\n\t\t * destroy an instance\r\n\t\t * @name destroy()\r\n\t\t * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\r\n\t\t */\r\n\t\tdestroy : function (keep_html) {\r\n\t\t\tif(this._wrk) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twindow.URL.revokeObjectURL(this._wrk);\r\n\t\t\t\t\tthis._wrk = null;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ignore) { }\r\n\t\t\t}\r\n\t\t\tif(!keep_html) { this.element.empty(); }\r\n\t\t\tthis.teardown();\r\n\t\t},\r\n\t\t/**\r\n\t\t * Create prototype node\r\n\t\t */\r\n\t\t_create_prototype_node : function () {\r\n\t\t\tvar _node = document.createElement('LI'), _temp1, _temp2;\r\n\t\t\t_node.setAttribute('role', 'treeitem');\r\n\t\t\t_temp1 = document.createElement('I');\r\n\t\t\t_temp1.className = 'jstree-icon jstree-ocl';\r\n\t\t\t_temp1.setAttribute('role', 'presentation');\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = document.createElement('A');\r\n\t\t\t_temp1.className = 'jstree-anchor';\r\n\t\t\t_temp1.setAttribute('href','#');\r\n\t\t\t_temp1.setAttribute('tabindex','-1');\r\n\t\t\t_temp2 = document.createElement('I');\r\n\t\t\t_temp2.className = 'jstree-icon jstree-themeicon';\r\n\t\t\t_temp2.setAttribute('role', 'presentation');\r\n\t\t\t_temp1.appendChild(_temp2);\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = _temp2 = null;\r\n\r\n\t\t\treturn _node;\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name teardown()\r\n\t\t */\r\n\t\tteardown : function () {\r\n\t\t\tthis.unbind();\r\n\t\t\tthis.element\r\n\t\t\t\t.removeClass('jstree')\r\n\t\t\t\t.removeData('jstree')\r\n\t\t\t\t.find(\"[class^='jstree']\")\r\n\t\t\t\t\t.addBack()\r\n\t\t\t\t\t.attr(\"class\", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });\r\n\t\t\tthis.element = null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * bind all events. Used internally.\r\n\t\t * @private\r\n\t\t * @name bind()\r\n\t\t */\r\n\t\tbind : function () {\r\n\t\t\tvar word = '',\r\n\t\t\t\ttout = null,\r\n\t\t\t\twas_click = 0;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"dblclick.jstree\", function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(document.selection && document.selection.empty) {\r\n\t\t\t\t\t\t\tdocument.selection.empty();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif(window.getSelection) {\r\n\t\t\t\t\t\t\t\tvar sel = window.getSelection();\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\t\t\t\t\t\tsel.collapse();\r\n\t\t\t\t\t\t\t\t} catch (ignore) { }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"mousedown.jstree\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target === this.element[0]) {\r\n\t\t\t\t\t\t\te.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)\r\n\t\t\t\t\t\t\twas_click = +(new Date()); // ie does not allow to prevent losing focus\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mousedown.jstree\", \".jstree-ocl\", function (e) {\r\n\t\t\t\t\t\te.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this.settings.core.dblclick_toggle) {\r\n\t\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tif(e.currentTarget !== document.activeElement) { $(e.currentTarget).focus(); }\r\n\t\t\t\t\t\tthis.activate_node(e.currentTarget, e);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(e.which !== 32 && e.which !== 13 && (e.shiftKey || e.ctrlKey || e.altKey || e.metaKey)) { return true; }\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tif(this._data.core.rtl) {\r\n\t\t\t\t\t\t\tif(e.which === 37) { e.which = 39; }\r\n\t\t\t\t\t\t\telse if(e.which === 39) { e.which = 37; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 32: // aria defines space only with Ctrl\r\n\t\t\t\t\t\t\t\tif(e.ctrlKey) {\r\n\t\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 13: // enter\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37: // left\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tif(this.is_open(e.currentTarget)) {\r\n\t\t\t\t\t\t\t\t\tthis.close_node(e.currentTarget);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\to = this.get_parent(e.currentTarget);\r\n\t\t\t\t\t\t\t\t\tif(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').focus(); }\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38: // up\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\to = this.get_prev_dom(e.currentTarget);\r\n\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39: // right\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tif(this.is_closed(e.currentTarget)) {\r\n\t\t\t\t\t\t\t\t\tthis.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (this.is_open(e.currentTarget)) {\r\n\t\t\t\t\t\t\t\t\to = this.get_node(e.currentTarget, true).children('.jstree-children')[0];\r\n\t\t\t\t\t\t\t\t\tif(o) { $(this._firstChild(o)).children('.jstree-anchor').focus(); }\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40: // down\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\to = this.get_next_dom(e.currentTarget);\r\n\t\t\t\t\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 106: // aria defines * on numpad as open_all - not very common\r\n\t\t\t\t\t\t\t\tthis.open_all();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 36: // home\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\to = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\t\t\t\t\tif(o) { $(o).children('.jstree-anchor').filter(':visible').focus(); }\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 35: // end\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.element.find('.jstree-anchor').filter(':visible').last().focus();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 113: // f2 - safe to include - if check_callback is false it will fail\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.edit(e.currentTarget);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t/*!\r\n\t\t\t\t\t\t\t// delete\r\n\t\t\t\t\t\t\tcase 46:\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\to = this.get_node(e.currentTarget);\r\n\t\t\t\t\t\t\t\tif(o && o.id && o.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to = this.is_selected(o) ? this.get_selected() : o;\r\n\t\t\t\t\t\t\t\t\tthis.delete_node(o);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"load_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(data.status) {\r\n\t\t\t\t\t\t\tif(data.node.id === $.jstree.root && !this._data.core.loaded) {\r\n\t\t\t\t\t\t\t\tthis._data.core.loaded = true;\r\n\t\t\t\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * triggered after the root node is loaded for the first time\r\n\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t * @name loaded.jstree\r\n\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\tthis.trigger(\"loaded\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this._data.core.ready) {\r\n\t\t\t\t\t\t\t\tsetTimeout($.proxy(function() {\r\n\t\t\t\t\t\t\t\t\tif(this.element && !this.get_container_ul().find('.jstree-loading').length) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.core.ready = true;\r\n\t\t\t\t\t\t\t\t\t\tif(this._data.core.selected.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(this.settings.core.expand_selected_onload) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = [], i, j;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp = $.vakata.array_unique(tmp);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.open_node(tmp[i], false, 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t\t\t * triggered after all nodes are finished loading\r\n\t\t\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t\t\t * @name ready.jstree\r\n\t\t\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t\t\tthis.trigger(\"ready\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// quick searching when the tree is focused\r\n\t\t\t\t.on('keypress.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(tout) { clearTimeout(tout); }\r\n\t\t\t\t\t\ttout = setTimeout(function () {\r\n\t\t\t\t\t\t\tword = '';\r\n\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\tvar chr = String.fromCharCode(e.which).toLowerCase(),\r\n\t\t\t\t\t\t\tcol = this.element.find('.jstree-anchor').filter(':visible'),\r\n\t\t\t\t\t\t\tind = col.index(document.activeElement) || 0,\r\n\t\t\t\t\t\t\tend = false;\r\n\t\t\t\t\t\tword += chr;\r\n\r\n\t\t\t\t\t\t// match for whole word from current node down (including the current node)\r\n\t\t\t\t\t\tif(word.length > 1) {\r\n\t\t\t\t\t\t\tcol.slice(ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// match for whole word from the beginning of the tree\r\n\t\t\t\t\t\t\tcol.slice(0, ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// list nodes that start with that letter (only if word consists of a single char)\r\n\t\t\t\t\t\tif(new RegExp('^' + chr.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '+$').test(word)) {\r\n\t\t\t\t\t\t\t// search for the next node starting with that letter\r\n\t\t\t\t\t\t\tcol.slice(ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// search from the beginning\r\n\t\t\t\t\t\t\tcol.slice(0, ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// THEME RELATED\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tvar s = this.settings.core.themes;\r\n\t\t\t\t\t\tthis._data.core.themes.dots\t\t\t= s.dots;\r\n\t\t\t\t\t\tthis._data.core.themes.stripes\t\t= s.stripes;\r\n\t\t\t\t\t\tthis._data.core.themes.icons\t\t= s.icons;\r\n\t\t\t\t\t\tthis._data.core.themes.ellipsis\t\t= s.ellipsis;\r\n\t\t\t\t\t\tthis.set_theme(s.name || \"default\", s.url);\r\n\t\t\t\t\t\tthis.set_theme_variant(s.variant);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.ellipsis ? \"show_ellipsis\" : \"hide_ellipsis\" ]();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t\t\t$(e.currentTarget).filter('.jstree-hovered').mouseleave();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '0');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tvar tmp = this.get_node(e.currentTarget);\r\n\t\t\t\t\t\tif(tmp && tmp.id) {\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\r\n\t\t\t\t\t\t$(e.currentTarget).mouseenter();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '-1');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tif(+(new Date()) - was_click > 500 && !this._data.core.focused) {\r\n\t\t\t\t\t\t\twas_click = 0;\r\n\t\t\t\t\t\t\tvar act = this.get_node(this.element.attr('aria-activedescendant'), true);\r\n\t\t\t\t\t\t\tif(act) {\r\n\t\t\t\t\t\t\t\tact.find('> .jstree-anchor').focus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name unbind()\r\n\t\t */\r\n\t\tunbind : function () {\r\n\t\t\tthis.element.off('.jstree');\r\n\t\t\t$(document).off('.jstree-' + this._id);\r\n\t\t},\r\n\t\t/**\r\n\t\t * trigger an event. Used internally.\r\n\t\t * @private\r\n\t\t * @name trigger(ev [, data])\r\n\t\t * @param  {String} ev the name of the event to trigger\r\n\t\t * @param  {Object} data additional data to pass with the event\r\n\t\t */\r\n\t\ttrigger : function (ev, data) {\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tdata.instance = this;\r\n\t\t\tthis.element.triggerHandler(ev.replace('.jstree','') + '.jstree', data);\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended instance container\r\n\t\t * @name get_container()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container : function () {\r\n\t\t\treturn this.element;\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended main UL node inside the instance container. Used internally.\r\n\t\t * @private\r\n\t\t * @name get_container_ul()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container_ul : function () {\r\n\t\t\treturn this.element.children(\".jstree-children\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets string replacements (localization). Used internally.\r\n\t\t * @private\r\n\t\t * @name get_string(key)\r\n\t\t * @param  {String} key\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_string : function (key) {\r\n\t\t\tvar a = this.settings.core.strings;\r\n\t\t\tif($.isFunction(a)) { return a.call(this, key); }\r\n\t\t\tif(a && a[key]) { return a[key]; }\r\n\t\t\treturn key;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the first child of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _firstChild(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_firstChild : function (dom) {\r\n\t\t\tdom = dom ? dom.firstChild : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the next sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _nextSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_nextSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.nextSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the previous sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _previousSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_previousSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.previousSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.previousSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\r\n\t\t * @name get_node(obj [, as_dom])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} as_dom\r\n\t\t * @return {Object|jQuery}\r\n\t\t */\r\n\t\tget_node : function (obj, as_dom) {\r\n\t\t\tif(obj && obj.id) {\r\n\t\t\t\tobj = obj.id;\r\n\t\t\t}\r\n\t\t\tvar dom;\r\n\t\t\ttry {\r\n\t\t\t\tif(this._model.data[obj]) {\r\n\t\t\t\t\tobj = this._model.data[obj];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && this._model.data[obj.replace(/^#/, '')]) {\r\n\t\t\t\t\tobj = this._model.data[obj.replace(/^#/, '')];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && (dom = $('#' + obj.replace($.jstree.idregex,'\\\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\r\n\t\t\t\t\tobj = this._model.data[$.jstree.root];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(as_dom) {\r\n\t\t\t\t\tobj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t} catch (ex) { return false; }\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\r\n\t\t * @name get_path(obj [, glue, ids])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\r\n\t\t * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\r\n\t\t * @return {mixed}\r\n\t\t */\r\n\t\tget_path : function (obj, glue, ids) {\r\n\t\t\tobj = obj.parents ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root || !obj.parents) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = [];\r\n\t\t\tp.push(ids ? obj.id : obj.text);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tp.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\r\n\t\t\t}\r\n\t\t\tp = p.reverse().slice(1);\r\n\t\t\treturn glue ? p.join(glue) : p;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_next_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_next_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\ttmp = this._firstChild(obj.children('.jstree-children')[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp !== null) {\r\n\t\t\t\t\treturn $(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\treturn $(tmp);\r\n\t\t\t}\r\n\t\t\treturn obj.parentsUntil(\".jstree\",\".jstree-node\").nextAll(\".jstree-node:visible\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_prev_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_prev_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this.get_container_ul()[0].lastChild;\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\tobj = $(tmp);\r\n\t\t\t\twhile(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\t\tobj = obj.children(\".jstree-children\").first().children(\".jstree-node:visible:last\");\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0].parentNode.parentNode;\r\n\t\t\treturn tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the parent ID of a node\r\n\t\t * @name get_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.parent;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get a jQuery collection of all the children of a node (node must be rendered)\r\n\t\t * @name get_children_dom(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_children_dom : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\treturn this.get_container_ul().children(\".jstree-node\");\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.children(\".jstree-children\").children(\".jstree-node\");\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node has children\r\n\t\t * @name is_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && (obj.state.loaded === false || obj.children.length > 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is loaded (its children are available)\r\n\t\t * @name is_loaded(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loaded : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.loaded;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is currently loading (fetching children)\r\n\t\t * @name is_loading(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loading : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.loading;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is opened\r\n\t\t * @name is_open(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_open : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is in a closed state\r\n\t\t * @name is_closed(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_closed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && this.is_parent(obj) && !obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node has no children\r\n\t\t * @name is_leaf(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_leaf : function (obj) {\r\n\t\t\treturn !this.is_parent(obj);\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\r\n\t\t * @name load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger load_node.jstree\r\n\t\t */\r\n\t\tload_node : function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tthis._load_nodes(obj.slice(), callback);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) {\r\n\t\t\t\tif(callback) { callback.call(this, obj, false); }\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\r\n\t\t\tif(obj.state.loaded) {\r\n\t\t\t\tobj.state.loaded = false;\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tfor(k = 0, l = obj.children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(this._model.data[obj.children_d[k]].state.selected) {\r\n\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._model.data[obj.children_d[k]];\r\n\t\t\t\t}\r\n\t\t\t\tif (c) {\r\n\t\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tobj.children = [];\r\n\t\t\t\tobj.children_d = [];\r\n\t\t\t\tif(c) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj.state.failed = false;\r\n\t\t\tobj.state.loading = true;\r\n\t\t\tthis.get_node(obj, true).addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\tthis._load_node(obj, $.proxy(function (status) {\r\n\t\t\t\tobj = this._model.data[obj.id];\r\n\t\t\t\tobj.state.loading = false;\r\n\t\t\t\tobj.state.loaded = status;\r\n\t\t\t\tobj.state.failed = !obj.state.loaded;\r\n\t\t\t\tvar dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\t\thas_children = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.state.loaded && dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass('jstree-closed jstree-open jstree-leaf');\r\n\t\t\t\t\tif (!has_children) {\r\n\t\t\t\t\t\tdom.addClass('jstree-leaf');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (obj.id !== '#') {\r\n\t\t\t\t\t\t\tdom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a node is loaded\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_node.jstree\r\n\t\t\t\t * @param {Object} node the node that was loading\r\n\t\t\t\t * @param {Boolean} status was the node loaded successfully\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('load_node', { \"node\" : obj, \"status\" : status });\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, status);\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\r\n\t\t * @private\r\n\t\t * @name _load_nodes(nodes [, callback])\r\n\t\t * @param  {array} nodes\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\r\n\t\t */\r\n\t\t_load_nodes : function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar r = true,\r\n\t\t\t\tc = function () { this._load_nodes(nodes, callback, true); },\r\n\t\t\t\tm = this._model.data, i, j, tmp = [];\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\tif(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {\r\n\t\t\t\t\tif(!this.is_loading(nodes[i])) {\r\n\t\t\t\t\t\tthis.load_node(nodes[i], c);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(r) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(m[nodes[i]] && m[nodes[i]].state.loaded) {\r\n\t\t\t\t\t\ttmp.push(nodes[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(callback && !callback.done) {\r\n\t\t\t\t\tcallback.call(this, tmp);\r\n\t\t\t\t\tcallback.done = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads all unloaded nodes\r\n\t\t * @name load_all([obj, callback])\r\n\t\t * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree\r\n\t\t * @param {function} callback a function to be executed once loading all the nodes is complete,\r\n\t\t * @trigger load_all.jstree\r\n\t\t */\r\n\t\tload_all : function (obj, callback) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar to_load = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tc = m[obj.id].children_d,\r\n\t\t\t\ti, j;\r\n\t\t\tif(obj.state && !obj.state.loaded) {\r\n\t\t\t\tto_load.push(obj.id);\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = c.length; i < j; i++) {\r\n\t\t\t\tif(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {\r\n\t\t\t\t\tto_load.push(c[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(to_load.length) {\r\n\t\t\t\tthis._load_nodes(to_load, function () {\r\n\t\t\t\t\tthis.load_all(obj, callback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a load_all call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_all.jstree\r\n\t\t\t\t * @param {Object} node the recursively loaded node\r\n\t\t\t\t */\r\n\t\t\t\tif(callback) { callback.call(this, obj); }\r\n\t\t\t\tthis.trigger('load_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * handles the actual loading of a node. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t_load_node : function (obj, callback) {\r\n\t\t\tvar s = this.settings.core.data, t;\r\n\t\t\tvar notTextOrCommentNode = function notTextOrCommentNode () {\r\n\t\t\t\treturn this.nodeType !== 3 && this.nodeType !== 8;\r\n\t\t\t};\r\n\t\t\t// use original HTML\r\n\t\t\tif(!s) {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t// return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\r\n\t\t\t}\r\n\t\t\tif($.isFunction(s)) {\r\n\t\t\t\treturn s.call(this, obj, $.proxy(function (d) {\r\n\t\t\t\t\tif(d === false) {\r\n\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {\r\n\t\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'object') {\r\n\t\t\t\tif(s.url) {\r\n\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\ts.url = s.url.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\ts.data = s.data.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t.done($.proxy(function (d,t,x) {\r\n\t\t\t\t\t\t\t\tvar type = x.getResponseHeader('Content-Type');\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('json') !== -1) || typeof d === \"object\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_json_data(obj, d, function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t//return callback.call(this, this._append_json_data(obj, d));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('html') !== -1) || typeof d === \"string\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(d)).filter(notTextOrCommentNode), function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t// return callback.call(this, this._append_html_data(obj, $(d)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t}\r\n\t\t\t\tt = ($.isArray(s) || $.isPlainObject(s)) ? JSON.parse(JSON.stringify(s)) : s;\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_json_data(obj, t, function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'string') {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(s)).filter(notTextOrCommentNode), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );\r\n\t\t\t}\r\n\t\t\treturn callback.call(this, false);\r\n\t\t},\r\n\t\t/**\r\n\t\t * adds a node to the list of nodes to redraw. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _node_changed(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t */\r\n\t\t_node_changed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj) {\r\n\t\t\t\tthis._model.changed.push(obj.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends HTML content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_html_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the HTML string to parse and append\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_html_data : function (dom, data, cb) {\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\tvar dat = data.is('ul') ? data.children() : data,\r\n\t\t\t\tpar = dom.id,\r\n\t\t\t\tchd = [],\r\n\t\t\t\tdpc = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tp = m[par],\r\n\t\t\t\ts = this._data.core.selected.length,\r\n\t\t\t\ttmp, i, j;\r\n\t\t\tdat.each($.proxy(function (i, v) {\r\n\t\t\t\ttmp = this._parse_model_from_html($(v), par, p.parents.concat());\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\tp.children = chd;\r\n\t\t\tp.children_d = dpc;\r\n\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when new data is inserted to the tree model\r\n\t\t\t * @event\r\n\t\t\t * @name model.jstree\r\n\t\t\t * @param {Array} nodes an array of node IDs\r\n\t\t\t * @param {String} parent the parent ID of the nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, 'parent' : par });\r\n\t\t\tif(par !== $.jstree.root) {\r\n\t\t\t\tthis._node_changed(par);\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\tthis.redraw(true);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.selected.length !== s) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t}\r\n\t\t\tcb.call(this, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends JSON content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_json_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the JSON object to parse and append\r\n\t\t * @param  {Boolean} force_processing internal param - do not set\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_json_data : function (dom, data, cb, force_processing) {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\t// *%$@!!!\r\n\t\t\tif(data.d) {\r\n\t\t\t\tdata = data.d;\r\n\t\t\t\tif(typeof data === \"string\") {\r\n\t\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!$.isArray(data)) { data = [data]; }\r\n\t\t\tvar w = null,\r\n\t\t\t\targs = {\r\n\t\t\t\t\t'df'\t: this._model.default_state,\r\n\t\t\t\t\t'dat'\t: data,\r\n\t\t\t\t\t'par'\t: dom.id,\r\n\t\t\t\t\t'm'\t\t: this._model.data,\r\n\t\t\t\t\t't_id'\t: this._id,\r\n\t\t\t\t\t't_cnt'\t: this._cnt,\r\n\t\t\t\t\t'sel'\t: this._data.core.selected\r\n\t\t\t\t},\r\n\t\t\t\tfunc = function (data, undefined) {\r\n\t\t\t\t\tif(data.data) { data = data.data; }\r\n\t\t\t\t\tvar dat = data.dat,\r\n\t\t\t\t\t\tpar = data.par,\r\n\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\tdpc = [],\r\n\t\t\t\t\t\tadd = [],\r\n\t\t\t\t\t\tdf = data.df,\r\n\t\t\t\t\t\tt_id = data.t_id,\r\n\t\t\t\t\t\tt_cnt = data.t_cnt,\r\n\t\t\t\t\t\tm = data.m,\r\n\t\t\t\t\t\tp = m[par],\r\n\t\t\t\t\t\tsel = data.sel,\r\n\t\t\t\t\t\ttmp, i, j, rslt,\r\n\t\t\t\t\t\tparse_flat = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\t\t\t\t\ti, j, c, e,\r\n\t\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tc = parse_flat(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\tm[tmp.id].original = d;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tparse_nest = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = false, i, j, c, e, tmp;\r\n\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\ttid = 'j' + t_id + '_' + (++t_cnt);\r\n\t\t\t\t\t\t\t} while(m[tid]);\r\n\r\n\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\t\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\t\t\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc = parse_nest(d.children[i], tmp.id, ps);\r\n\t\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\ttmp.original = d;\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\r\n\t\t\t\t\t\t// Flat JSON support (for easy import from DB):\r\n\t\t\t\t\t\t// 1) convert to object (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif(!dat[i].children) {\r\n\t\t\t\t\t\t\t\tdat[i].children = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dat[i].id.toString()] = dat[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 2) populate children (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[dat[i].parent.toString()].children.push(dat[i].id.toString());\r\n\t\t\t\t\t\t\t// populate parent.children_d\r\n\t\t\t\t\t\t\tp.children_d.push(dat[i].id.toString());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 3) normalize && populate parents and children_d with recursion\r\n\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_flat(m[p.children[i]], par, p.parents.concat());\r\n\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_nest(dat[i], par, p.parents.concat());\r\n\t\t\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.children = chd;\r\n\t\t\t\t\t\tp.children_d = dpc;\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof window === 'undefined' || typeof window.document === 'undefined') {\r\n\t\t\t\t\t\tpostMessage(rslt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn rslt;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trslt = function (rslt, worker) {\r\n\t\t\t\t\tif(this.element === null) { return; }\r\n\t\t\t\t\tthis._cnt = rslt.cnt;\r\n\t\t\t\t\tvar i, m = this._model.data;\r\n\t\t\t\t\tfor (i in m) {\r\n\t\t\t\t\t\tif (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {\r\n\t\t\t\t\t\t\trslt.mod[i].state.loading = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._model.data = rslt.mod; // breaks the reference in load_node - careful\r\n\r\n\t\t\t\t\tif(worker) {\r\n\t\t\t\t\t\tvar j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();\r\n\t\t\t\t\t\tm = this._model.data;\r\n\t\t\t\t\t\t// if selection was changed while calculating in worker\r\n\t\t\t\t\t\tif(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\r\n\t\t\t\t\t\t\t// deselect nodes that are no longer selected\r\n\t\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[r[i]].state.selected = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// select nodes that were selected in the mean time\r\n\t\t\t\t\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(s[i], r) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[s[i]].state.selected = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis._data.core.selected = this._data.core.selected.concat(rslt.add);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.trigger('model', { \"nodes\" : rslt.dpc, 'parent' : rslt.par });\r\n\r\n\t\t\t\t\tif(rslt.par !== $.jstree.root) {\r\n\t\t\t\t\t\tthis._node_changed(rslt.par);\r\n\t\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// this.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcb.call(this, true);\r\n\t\t\t\t};\r\n\t\t\tif(this.settings.core.worker && window.Blob && window.URL && window.Worker) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(this._wrk === null) {\r\n\t\t\t\t\t\tthis._wrk = window.URL.createObjectURL(\r\n\t\t\t\t\t\t\tnew window.Blob(\r\n\t\t\t\t\t\t\t\t['self.onmessage = ' + func.toString()],\r\n\t\t\t\t\t\t\t\t{type:\"text/javascript\"}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this._data.core.working || force_processing) {\r\n\t\t\t\t\t\tthis._data.core.working = true;\r\n\t\t\t\t\t\tw = new window.Worker(this._wrk);\r\n\t\t\t\t\t\tw.onmessage = $.proxy(function (e) {\r\n\t\t\t\t\t\t\trslt.call(this, e.data, true);\r\n\t\t\t\t\t\t\ttry { w.terminate(); w = null; } catch(ignore) { }\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tif(!args.par) {\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tw.postMessage(args);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.worker_queue.push([dom, data, cb, true]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e) {\r\n\t\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_html(d [, p, ps])\r\n\t\t * @param  {jQuery} d the jQuery object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_html : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = [].concat(ps); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar c, e, m = this._model.data,\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\ttext\t\t: false,\r\n\t\t\t\t\ticon\t\t: true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t}, i, tmp, tid;\r\n\t\t\tfor(i in this._model.default_state) {\r\n\t\t\t\tif(this._model.default_state.hasOwnProperty(i)) {\r\n\t\t\t\t\tdata.state[i] = this._model.default_state[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = $.vakata.attributes(d, true);\r\n\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\tv = $.trim(v);\r\n\t\t\t\tif(!v.length) { return true; }\r\n\t\t\t\tdata.li_attr[i] = v;\r\n\t\t\t\tif(i === 'id') {\r\n\t\t\t\t\tdata.id = v.toString();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttmp = d.children('a').first();\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp = $.vakata.attributes(tmp, true);\r\n\t\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\t\tv = $.trim(v);\r\n\t\t\t\t\tif(v.length) {\r\n\t\t\t\t\t\tdata.a_attr[i] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").first().length ? d.children(\"a\").first().clone() : d.clone();\r\n\t\t\ttmp.children(\"ins, i, ul\").remove();\r\n\t\t\ttmp = tmp.html();\r\n\t\t\ttmp = $('<div />').html(tmp);\r\n\t\t\tdata.text = this.settings.core.force_text ? tmp.text() : tmp.html();\r\n\t\t\ttmp = d.data();\r\n\t\t\tdata.data = tmp ? $.extend(true, {}, tmp) : null;\r\n\t\t\tdata.state.opened = d.hasClass('jstree-open');\r\n\t\t\tdata.state.selected = d.children('a').hasClass('jstree-clicked');\r\n\t\t\tdata.state.disabled = d.children('a').hasClass('jstree-disabled');\r\n\t\t\tif(data.data && data.data.jstree) {\r\n\t\t\t\tfor(i in data.data.jstree) {\r\n\t\t\t\t\tif(data.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tdata.state[i] = data.data.jstree[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").children(\".jstree-themeicon\");\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\tdata.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\r\n\t\t\t}\r\n\t\t\tif(data.state.icon !== undefined) {\r\n\t\t\t\tdata.icon = data.state.icon;\r\n\t\t\t}\r\n\t\t\tif(data.icon === undefined || data.icon === null || data.icon === \"\") {\r\n\t\t\t\tdata.icon = true;\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"ul\").children(\"li\");\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\t\t\tdata.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp.each($.proxy(function (i, v) {\r\n\t\t\t\t\tc = this._parse_model_from_html($(v), data.id, ps);\r\n\t\t\t\t\te = this._model.data[c];\r\n\t\t\t\t\tdata.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\tdata.children_d = data.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this));\r\n\t\t\t\tdata.children_d = data.children_d.concat(data.children);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(d.hasClass('jstree-closed')) {\r\n\t\t\t\t\tdata.state.loaded = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(data.li_attr['class']) {\r\n\t\t\t\tdata.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');\r\n\t\t\t}\r\n\t\t\tif(data.a_attr['class']) {\r\n\t\t\t\tdata.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');\r\n\t\t\t}\r\n\t\t\tm[data.id] = data;\r\n\t\t\tif(data.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(data.id);\r\n\t\t\t}\r\n\t\t\treturn data.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_flat_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_flat_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tdf = this._model.default_state,\r\n\t\t\t\ti, j, c, e,\r\n\t\t\t\ttmp = {\r\n\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\tc = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\te = m[c];\r\n\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\tm[tmp.id].original = d;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\r\n\t\t\ttmp = {\r\n\t\t\t\tid\t\t\t: false,\r\n\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\tparent\t\t: p,\r\n\t\t\t\tparents\t\t: ps,\r\n\t\t\t\tchildren\t: [],\r\n\t\t\t\tchildren_d\t: [],\r\n\t\t\t\tdata\t\t: null,\r\n\t\t\t\tstate\t\t: { },\r\n\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\toriginal\t: false\r\n\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t}\r\n\t\t\tif(!tmp.id) {\r\n\t\t\t\ttmp.id = tid;\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\tc = this._parse_model_from_json(d.children[i], tmp.id, ps);\r\n\t\t\t\t\te = m[c];\r\n\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\ttmp.original = d;\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn. Used internally.\r\n\t\t * @private\r\n\t\t * @name _redraw()\r\n\t\t * @trigger redraw.jstree\r\n\t\t */\r\n\t\t_redraw : function () {\r\n\t\t\tvar nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),\r\n\t\t\t\tf = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\ttmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\r\n\t\t\t\tif(tmp && this._model.force_full_redraw) {\r\n\t\t\t\t\tf.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this._model.force_full_redraw) {\r\n\t\t\t\tf.className = this.get_container_ul()[0].className;\r\n\t\t\t\tf.setAttribute('role','group');\r\n\t\t\t\tthis.element.empty().append(f);\r\n\t\t\t\t//this.get_container_ul()[0].appendChild(f);\r\n\t\t\t}\r\n\t\t\tif(fe !== null) {\r\n\t\t\t\ttmp = this.get_node(fe, true);\r\n\t\t\t\tif(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {\r\n\t\t\t\t\ttmp.children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = false;\r\n\t\t\tthis._model.changed = [];\r\n\t\t\t/**\r\n\t\t\t * triggered after nodes are redrawn\r\n\t\t\t * @event\r\n\t\t\t * @name redraw.jstree\r\n\t\t\t * @param {array} nodes the redrawn nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('redraw', { \"nodes\" : nodes });\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn or optionally - the whole tree\r\n\t\t * @name redraw([full])\r\n\t\t * @param {Boolean} full if set to `true` all nodes are redrawn.\r\n\t\t */\r\n\t\tredraw : function (full) {\r\n\t\t\tif(full) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\t//if(this._model.redraw_timeout) {\r\n\t\t\t//\tclearTimeout(this._model.redraw_timeout);\r\n\t\t\t//}\r\n\t\t\t//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\r\n\t\t\tthis._redraw();\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node's children. Used internally.\r\n\t\t * @private\r\n\t\t * @name draw_children(node)\r\n\t\t * @param {mixed} node the node whose children will be redrawn\r\n\t\t */\r\n\t\tdraw_children : function (node) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\td = document;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) { return this.redraw(true); }\r\n\t\t\tnode = this.get_node(node, true);\r\n\t\t\tif(!node || !node.length) { return false; } // TODO: quick toggle\r\n\r\n\t\t\tnode.children('.jstree-children').remove();\r\n\t\t\tnode = node[0];\r\n\t\t\tif(obj.children.length && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], true, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node. Used internally.\r\n\t\t * @private\r\n\t\t * @name redraw_node(node, deep, is_callback, force_render)\r\n\t\t * @param {mixed} node the node to redraw\r\n\t\t * @param {Boolean} deep should child nodes be redrawn too\r\n\t\t * @param {Boolean} is_callback is this a recursion call\r\n\t\t * @param {Boolean} force_render should children of closed parents be drawn anyway\r\n\t\t */\r\n\t\tredraw_node : function (node, deep, is_callback, force_render) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\tpar = false,\r\n\t\t\t\tind = false,\r\n\t\t\t\told = false,\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\tc = '',\r\n\t\t\t\td = document,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = false,\r\n\t\t\t\ts = false,\r\n\t\t\t\ttmp = null,\r\n\t\t\t\tt = 0,\r\n\t\t\t\tl = 0,\r\n\t\t\t\thas_children = false,\r\n\t\t\t\tlast_sibling = false;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) {  return this.redraw(true); }\r\n\t\t\tdeep = deep || obj.children.length === 0;\r\n\t\t\tnode = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\\\$&') : obj.id.replace($.jstree.idregex,'\\\\$&')) ); //, this.element);\r\n\t\t\tif(!node) {\r\n\t\t\t\tdeep = true;\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\\\$&'), this.element)[0] : null;\r\n\t\t\t\t\tif(par !== null && (!par || !m[obj.parent].state.opened)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode = $(node);\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = node.parent().parent()[0];\r\n\t\t\t\t\tif(par === this.element[0]) {\r\n\t\t\t\t\t\tpar = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = node.index();\r\n\t\t\t\t}\r\n\t\t\t\t// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\r\n\t\t\t\tif(!deep && obj.children.length && !node.children('.jstree-children').length) {\r\n\t\t\t\t\tdeep = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!deep) {\r\n\t\t\t\t\told = node.children('.jstree-children')[0];\r\n\t\t\t\t}\r\n\t\t\t\tf = node.children('.jstree-anchor')[0] === document.activeElement;\r\n\t\t\t\tnode.remove();\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\t//node = node[0];\r\n\t\t\t}\r\n\t\t\tnode = this._data.core.node.cloneNode(true);\r\n\t\t\t// node is DOM, deep is boolean\r\n\r\n\t\t\tc = 'jstree-node ';\r\n\t\t\tfor(i in obj.li_attr) {\r\n\t\t\t\tif(obj.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i === 'id') { continue; }\r\n\t\t\t\t\tif(i !== 'class') {\r\n\t\t\t\t\t\tnode.setAttribute(i, obj.li_attr[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += obj.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!obj.a_attr.id) {\r\n\t\t\t\tobj.a_attr.id = obj.id + '_anchor';\r\n\t\t\t}\r\n\t\t\tnode.setAttribute('aria-selected', !!obj.state.selected);\r\n\t\t\tnode.setAttribute('aria-level', obj.parents.length);\r\n\t\t\tnode.setAttribute('aria-labelledby', obj.a_attr.id);\r\n\t\t\tif(obj.state.disabled) {\r\n\t\t\t\tnode.setAttribute('aria-disabled', true);\r\n\t\t\t}\r\n\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tif(!m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\thas_children = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {\r\n\t\t\t\ti = $.inArray(obj.id, m[obj.parent].children);\r\n\t\t\t\tlast_sibling = obj.id;\r\n\t\t\t\tif(i !== -1) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tfor(j = m[obj.parent].children.length; i < j; i++) {\r\n\t\t\t\t\t\tif(!m[m[obj.parent].children[i]].state.hidden) {\r\n\t\t\t\t\t\t\tlast_sibling = m[obj.parent].children[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(last_sibling !== obj.id) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tc += ' jstree-hidden';\r\n\t\t\t}\r\n\t\t\tif(obj.state.loaded && !has_children) {\r\n\t\t\t\tc += ' jstree-leaf';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\r\n\t\t\t\tnode.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );\r\n\t\t\t}\r\n\t\t\tif(last_sibling === obj.id) {\r\n\t\t\t\tc += ' jstree-last';\r\n\t\t\t}\r\n\t\t\tnode.id = obj.id;\r\n\t\t\tnode.className = c;\r\n\t\t\tc = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');\r\n\t\t\tfor(j in obj.a_attr) {\r\n\t\t\t\tif(obj.a_attr.hasOwnProperty(j)) {\r\n\t\t\t\t\tif(j === 'href' && obj.a_attr[j] === '#') { continue; }\r\n\t\t\t\t\tif(j !== 'class') {\r\n\t\t\t\t\t\tnode.childNodes[1].setAttribute(j, obj.a_attr[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += ' ' + obj.a_attr[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(c.length) {\r\n\t\t\t\tnode.childNodes[1].className = 'jstree-anchor ' + c;\r\n\t\t\t}\r\n\t\t\tif((obj.icon && obj.icon !== true) || obj.icon === false) {\r\n\t\t\t\tif(obj.icon === false) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\r\n\t\t\t\t}\r\n\t\t\t\telse if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundImage = 'url(\"'+obj.icon+'\")';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\tnode.childNodes[1].appendChild(d.createTextNode(obj.text));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.childNodes[1].innerHTML += obj.text;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], deep, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t\tif(old) {\r\n\t\t\t\tnode.appendChild(old);\r\n\t\t\t}\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\t// append back using par / ind\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\tpar = this.element[0];\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = par.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\r\n\t\t\t\t\t\ttmp = par.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!tmp) {\r\n\t\t\t\t\ttmp = d.createElement('UL');\r\n\t\t\t\t\ttmp.setAttribute('role', 'group');\r\n\t\t\t\t\ttmp.className = 'jstree-children';\r\n\t\t\t\t\tpar.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tpar = tmp;\r\n\r\n\t\t\t\tif(ind < par.childNodes.length) {\r\n\t\t\t\t\tpar.insertBefore(node, par.childNodes[ind]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpar.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t\tif(f) {\r\n\t\t\t\t\tt = this.element[0].scrollTop;\r\n\t\t\t\t\tl = this.element[0].scrollLeft;\r\n\t\t\t\t\tnode.childNodes[1].focus();\r\n\t\t\t\t\tthis.element[0].scrollTop = t;\r\n\t\t\t\t\tthis.element[0].scrollLeft = l;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.state.opened && !obj.state.loaded) {\r\n\t\t\t\tobj.state.opened = false;\r\n\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\tthis.open_node(obj.id, false, 0);\r\n\t\t\t\t}, this), 0);\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_node(obj [, callback, animation])\r\n\t\t * @param {mixed} obj the node to open\r\n\t\t * @param {Function} callback a function to execute once the node is opened\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger open_node.jstree, after_open.jstree, before_open.jstree\r\n\t\t */\r\n\t\topen_node : function (obj, callback, animation) {\r\n\t\t\tvar t1, t2, d, t;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.open_node(obj[t1], callback, animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tif(!this.is_closed(obj)) {\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!this.is_loaded(obj)) {\r\n\t\t\t\tif(this.is_loading(obj)) {\r\n\t\t\t\t\treturn setTimeout($.proxy(function () {\r\n\t\t\t\t\t\tthis.open_node(obj, callback, animation);\r\n\t\t\t\t\t}, this), 500);\r\n\t\t\t\t}\r\n\t\t\t\tthis.load_node(obj, function (o, ok) {\r\n\t\t\t\t\treturn ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\td = this.get_node(obj, true);\r\n\t\t\t\tt = this;\r\n\t\t\t\tif(d.length) {\r\n\t\t\t\t\tif(animation && d.children(\".jstree-children\").length) {\r\n\t\t\t\t\t\td.children(\".jstree-children\").stop(true, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\r\n\t\t\t\t\t\tthis.draw_children(obj);\r\n\t\t\t\t\t\t//d = this.get_node(obj, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!animation) {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\r\n\t\t\t\t\t\td[0].setAttribute(\"aria-expanded\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").css(\"display\",\"none\").end()\r\n\t\t\t\t\t\t\t.removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true)\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true)\r\n\t\t\t\t\t\t\t\t.slideDown(animation, function () {\r\n\t\t\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\t\t\tt.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobj.state.opened = true;\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, true);\r\n\t\t\t\t}\r\n\t\t\t\tif(!d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name before_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is opened (if there is an animation it will not be completed yet)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_node.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_node', { \"node\" : obj });\r\n\t\t\t\tif(!animation || !d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is opened and the animation is complete\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name after_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens every parent of a node (node should be loaded)\r\n\t\t * @name _open_to(obj)\r\n\t\t * @param {mixed} obj the node to reveal\r\n\t\t * @private\r\n\t\t */\r\n\t\t_open_to : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = obj.parents;\r\n\t\t\tfor(i = 0, j = p.length; i < j; i+=1) {\r\n\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\tthis.open_node(p[i], false, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes a node, hiding its children\r\n\t\t * @name close_node(obj [, animation])\r\n\t\t * @param {mixed} obj the node to close\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger close_node.jstree, after_close.jstree\r\n\t\t */\r\n\t\tclose_node : function (obj, animation) {\r\n\t\t\tvar t1, t2, t, d;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.close_node(obj[t1], animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tt = this;\r\n\t\t\td = this.get_node(obj, true);\r\n\r\n\t\t\tobj.state.opened = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is closed (if there is an animation it will not be complete yet)\r\n\t\t\t * @event\r\n\t\t\t * @name close_node.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\r\n\t\t\tif(!d.length) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is closed and the animation is complete\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name after_close.jstree\r\n\t\t\t\t * @param {Object} node the closed node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(!animation) {\r\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\r\n\t\t\t\t\td.attr(\"aria-expanded\", false).children('.jstree-children').remove();\r\n\t\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td\r\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\r\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\r\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\r\n\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\td.children('.jstree-children').remove();\r\n\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles a node - closing it if it is open, opening it if it is closed\r\n\t\t * @name toggle_node(obj)\r\n\t\t * @param {mixed} obj the node to toggle\r\n\t\t */\r\n\t\ttoggle_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.toggle_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn this.open_node(obj);\r\n\t\t\t}\r\n\t\t\tif(this.is_open(obj)) {\r\n\t\t\t\treturn this.close_node(obj);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_all([obj, animation, original_obj])\r\n\t\t * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\r\n\t\t * @param {jQuery} reference to the node that started the process (internal use)\r\n\t\t * @trigger open_all.jstree\r\n\t\t */\r\n\t\topen_all : function (obj, animation, original_obj) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;\r\n\t\t\tif(!dom.length) {\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tif(this.is_closed(this._model.data[obj.children_d[i]])) {\r\n\t\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this.trigger('open_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\toriginal_obj = original_obj || dom;\r\n\t\t\t_this = this;\r\n\t\t\tdom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\r\n\t\t\tdom.each(function () {\r\n\t\t\t\t_this.open_node(\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\tfunction(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },\r\n\t\t\t\t\tanimation || 0\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tif(original_obj.find('.jstree-closed').length === 0) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an `open_all` call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_all.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_all', { \"node\" : this.get_node(original_obj) });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes all nodes within a node (or the tree), revaling their children\r\n\t\t * @name close_all([obj, animation])\r\n\t\t * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\r\n\t\t * @trigger close_all.jstree\r\n\t\t */\r\n\t\tclose_all : function (obj, animation) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\r\n\t\t\t\t_this = this, i, j;\r\n\t\t\tif(dom.length) {\r\n\t\t\t\tdom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\r\n\t\t\t\t$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = false;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an `close_all` call completes\r\n\t\t\t * @event\r\n\t\t\t * @name close_all.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_all', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is disabled (not selectable)\r\n\t\t * @name is_disabled(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_disabled : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.disabled;\r\n\t\t},\r\n\t\t/**\r\n\t\t * enables a node - so that it can be selected\r\n\t\t * @name enable_node(obj)\r\n\t\t * @param {mixed} obj the node to enable\r\n\t\t * @trigger enable_node.jstree\r\n\t\t */\r\n\t\tenable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = false;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is enabled\r\n\t\t\t * @event\r\n\t\t\t * @name enable_node.jstree\r\n\t\t\t * @param {Object} node the enabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('enable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * disables a node - so that it can not be selected\r\n\t\t * @name disable_node(obj)\r\n\t\t * @param {mixed} obj the node to disable\r\n\t\t * @trigger disable_node.jstree\r\n\t\t */\r\n\t\tdisable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = true;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is disabled\r\n\t\t\t * @event\r\n\t\t\t * @name disable_node.jstree\r\n\t\t\t * @param {Object} node the disabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('disable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * determines if a node is hidden\r\n\t\t * @name is_hidden(obj)\r\n\t\t * @param {mixed} obj the node\r\n\t\t */\r\n\t\tis_hidden : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj.state.hidden === true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides a node - it is still in the structure but will not be visible\r\n\t\t * @name hide_node(obj)\r\n\t\t * @param {mixed} obj the node to hide\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger hide_node.jstree\r\n\t\t */\r\n\t\thide_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = true;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name hide_node.jstree\r\n\t\t\t\t * @param {Object} node the hidden node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('hide_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows a node\r\n\t\t * @name show_node(obj)\r\n\t\t * @param {mixed} obj the node to show\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger show_node.jstree\r\n\t\t */\r\n\t\tshow_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = false;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name show_node.jstree\r\n\t\t\t\t * @param {Object} node the shown node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('show_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides all nodes\r\n\t\t * @name hide_all()\r\n\t\t * @trigger hide_all.jstree\r\n\t\t */\r\n\t\thide_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = true;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all hidden nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows all nodes\r\n\t\t * @name show_all()\r\n\t\t * @trigger show_all.jstree\r\n\t\t */\r\n\t\tshow_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = false;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all shown nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * called when a node is selected by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name activate_node(obj, e)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Object} e the related event\r\n\t\t * @trigger activate_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tactivate_node : function (obj, e) {\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!e || typeof e !== 'object') {\r\n\t\t\t\te = {};\r\n\t\t\t}\r\n\r\n\t\t\t// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\r\n\t\t\tthis._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\r\n\t\t\tif(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }\r\n\t\t\tif(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }\r\n\r\n\t\t\tif(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {\r\n\t\t\t\tif(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\r\n\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.deselect_all(true);\r\n\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\tthis._data.core.last_clicked = this.get_node(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(e.shiftKey) {\r\n\t\t\t\t\tvar o = this.get_node(obj).id,\r\n\t\t\t\t\t\tl = this._data.core.last_clicked.id,\r\n\t\t\t\t\t\tp = this.get_node(this._data.core.last_clicked.parent).children,\r\n\t\t\t\t\t\tc = false,\r\n\t\t\t\t\t\ti, j;\r\n\t\t\t\t\tfor(i = 0, j = p.length; i < j; i += 1) {\r\n\t\t\t\t\t\t// separate IFs work whem o and l are the same\r\n\t\t\t\t\t\tif(p[i] === o) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(p[i] === l) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {\r\n\t\t\t\t\t\t\tif (!this.is_hidden(p[i])) {\r\n\t\t\t\t\t\t\t\tthis.select_node(p[i], true, false, e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.deselect_node(p[i], true, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!this.is_selected(obj)) {\r\n\t\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is clicked or intercated with by the user\r\n\t\t\t * @event\r\n\t\t\t * @name activate_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)\r\n\t\t\t */\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });\r\n\t\t},\r\n\t\t/**\r\n\t\t * applies the hover state on a node, called when a node is hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name hover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger hover_node.jstree\r\n\t\t */\r\n\t\thover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar o = this.element.find('.jstree-hovered'), t = this.element;\r\n\t\t\tif(o && o.length) { this.dehover_node(o); }\r\n\r\n\t\t\tobj.children('.jstree-anchor').addClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is hovered\r\n\t\t\t * @event\r\n\t\t\t * @name hover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('hover_node', { 'node' : this.get_node(obj) });\r\n\t\t\tsetTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name dehover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger dehover_node.jstree\r\n\t\t */\r\n\t\tdehover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || !obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.children('.jstree-anchor').removeClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is no longer hovered\r\n\t\t\t * @event\r\n\t\t\t * @name dehover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('dehover_node', { 'node' : this.get_node(obj) });\r\n\t\t},\r\n\t\t/**\r\n\t\t * select a node\r\n\t\t * @name select_node(obj [, supress_event, prevent_open])\r\n\t\t * @param {mixed} obj an array can be used to select multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\r\n\t\t * @trigger select_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_node : function (obj, supress_event, prevent_open, e) {\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.select_node(obj[t1], supress_event, prevent_open, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.selected) {\r\n\t\t\t\tobj.state.selected = true;\r\n\t\t\t\tthis._data.core.selected.push(obj.id);\r\n\t\t\t\tif(!prevent_open) {\r\n\t\t\t\t\tdom = this._open_to(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is selected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name select_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this select_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when selection changes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name changed.jstree\r\n\t\t\t\t\t * @param {Object} node\r\n\t\t\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect a node\r\n\t\t * @name deselect_node(obj [, supress_event])\r\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_node : function (obj, supress_event, e) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.deselect_node(obj[t1], supress_event, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.selected) {\r\n\t\t\t\tobj.state.selected = false;\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is deselected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name deselect_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this deselect_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * select all nodes in the tree\r\n\t\t * @name select_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger select_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tthis._data.core.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are selected\r\n\t\t\t * @event\r\n\t\t\t * @name select_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('select_all', { 'selected' : this._data.core.selected });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect all selected nodes\r\n\t\t * @name deselect_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are deselected\r\n\t\t\t * @event\r\n\t\t\t * @name deselect_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is selected\r\n\t\t * @name is_selected(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_selected : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.state.selected;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all selected nodes\r\n\t\t * @name get_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_selected : function (full) {\r\n\t\t\treturn full ? $.map(this._data.core.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all top level selected nodes (ignoring children of selected nodes)\r\n\t\t * @name get_top_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_top_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all bottom level selected nodes (ignoring selected parents)\r\n\t\t * @name get_bottom_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_bottom_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\r\n\t\t * @name get_state()\r\n\t\t * @private\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_state : function () {\r\n\t\t\tvar state\t= {\r\n\t\t\t\t'core' : {\r\n\t\t\t\t\t'open' : [],\r\n\t\t\t\t\t'scroll' : {\r\n\t\t\t\t\t\t'left' : this.element.scrollLeft(),\r\n\t\t\t\t\t\t'top' : this.element.scrollTop()\r\n\t\t\t\t\t},\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t'themes' : {\r\n\t\t\t\t\t\t'name' : this.get_theme(),\r\n\t\t\t\t\t\t'icons' : this._data.core.themes.icons,\r\n\t\t\t\t\t\t'dots' : this._data.core.themes.dots\r\n\t\t\t\t\t},\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t'selected' : []\r\n\t\t\t\t}\r\n\t\t\t}, i;\r\n\t\t\tfor(i in this._model.data) {\r\n\t\t\t\tif(this._model.data.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\t\tif(this._model.data[i].state.opened) {\r\n\t\t\t\t\t\t\tstate.core.open.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.selected) {\r\n\t\t\t\t\t\t\tstate.core.selected.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t},\r\n\t\t/**\r\n\t\t * sets the state of the tree. Used internally.\r\n\t\t * @name set_state(state [, callback])\r\n\t\t * @private\r\n\t\t * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.\r\n\t\t * @param {Function} callback an optional function to execute once the state is restored.\r\n\t\t * @trigger set_state.jstree\r\n\t\t */\r\n\t\tset_state : function (state, callback) {\r\n\t\t\tif(state) {\r\n\t\t\t\tif(state.core) {\r\n\t\t\t\t\tvar res, n, t, _this, i;\r\n\t\t\t\t\tif(state.core.open) {\r\n\t\t\t\t\t\tif(!$.isArray(state.core.open) || !state.core.open.length) {\r\n\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.open, function (nodes) {\r\n\t\t\t\t\t\t\t\tthis.open_node(nodes, false, 0);\r\n\t\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.scroll) {\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.left !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollLeft(state.core.scroll.left);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.top !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollTop(state.core.scroll.top);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.scroll;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.selected) {\r\n\t\t\t\t\t\t_this = this;\r\n\t\t\t\t\t\tthis.deselect_all();\r\n\t\t\t\t\t\t$.each(state.core.selected, function (i, v) {\r\n\t\t\t\t\t\t\t_this.select_node(v, false, true);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete state.core.selected;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(i in state) {\r\n\t\t\t\t\t\tif(state.hasOwnProperty(i) && i !== \"core\" && $.inArray(i, this.settings.plugins) === -1) {\r\n\t\t\t\t\t\t\tdelete state[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isEmptyObject(state.core)) {\r\n\t\t\t\t\t\tdelete state.core;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif($.isEmptyObject(state)) {\r\n\t\t\t\t\tstate = null;\r\n\t\t\t\t\tif(callback) { callback.call(this); }\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a `set_state` call completes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name set_state.jstree\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('set_state');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes the tree - all nodes are reloaded with calls to `load_node`.\r\n\t\t * @name refresh()\r\n\t\t * @param {Boolean} skip_loading an option to skip showing the loading indicator\r\n\t\t * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\r\n\t\t * @trigger refresh.jstree\r\n\t\t */\r\n\t\trefresh : function (skip_loading, forget_state) {\r\n\t\t\tthis._data.core.state = forget_state === true ? {} : this.get_state();\r\n\t\t\tif(forget_state && $.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._model.data = {};\r\n\t\t\tthis._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis._data.core.last_clicked = null;\r\n\t\t\tthis._data.core.focused = null;\r\n\r\n\t\t\tvar c = this.get_container_ul()[0].className;\r\n\t\t\tif(!skip_loading) {\r\n\t\t\t\tthis.element.html(\"<\"+\"ul class='\"+c+\"' role='group'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j\"+this._id+\"_loading'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\t\tthis.element.attr('aria-activedescendant','j'+this._id+'_loading');\r\n\t\t\t}\r\n\t\t\tthis.load_node($.jstree.root, function (o, s) {\r\n\t\t\t\tif(s) {\r\n\t\t\t\t\tthis.get_container_ul()[0].className = c;\r\n\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.set_state($.extend(true, {}, this._data.core.state), function () {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered when a `refresh` call completes\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @name refresh.jstree\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tthis.trigger('refresh');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.core.state = null;\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\r\n\t\t * @name refresh_node(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @trigger refresh_node.jstree\r\n\t\t */\r\n\t\trefresh_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar opened = [], to_load = [], s = this._data.core.selected.concat([]);\r\n\t\t\tto_load.push(obj.id);\r\n\t\t\tif(obj.state.opened === true) { opened.push(obj.id); }\r\n\t\t\tthis.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });\r\n\t\t\tthis._load_nodes(to_load, $.proxy(function (nodes) {\r\n\t\t\t\tthis.open_node(opened, false, 0);\r\n\t\t\t\tthis.select_node(s);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is refreshed\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name refresh_node.jstree\r\n\t\t\t\t * @param {Object} node - the refreshed node\r\n\t\t\t\t * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });\r\n\t\t\t}, this), false, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * set (change) the ID of a node\r\n\t\t * @name set_id(obj, id)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} id the new ID\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_id.jstree\r\n\t\t */\r\n\t\tset_id : function (obj, id) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar i, j, m = this._model.data, old = obj.id;\r\n\t\t\tid = id.toString();\r\n\t\t\t// update parents (replace current ID with new one in children and children_d)\r\n\t\t\tm[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tm[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\r\n\t\t\t}\r\n\t\t\t// update children (replace current ID with new one in parent and parents)\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tm[obj.children[i]].parent = id;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tm[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\r\n\t\t\t}\r\n\t\t\ti = $.inArray(obj.id, this._data.core.selected);\r\n\t\t\tif(i !== -1) { this._data.core.selected[i] = id; }\r\n\t\t\t// update model and obj itself (obj.id, this._model.data[KEY])\r\n\t\t\ti = this.get_node(obj.id, true);\r\n\t\t\tif(i) {\r\n\t\t\t\ti.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');\r\n\t\t\t\tif(this.element.attr('aria-activedescendant') === obj.id) {\r\n\t\t\t\t\tthis.element.attr('aria-activedescendant', id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete m[obj.id];\r\n\t\t\tobj.id = id;\r\n\t\t\tobj.li_attr.id = id;\r\n\t\t\tm[id] = obj;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node id value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_id.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} old the old id\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_id',{ \"node\" : obj, \"new\" : obj.id, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the text value of a node\r\n\t\t * @name get_text(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_text : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.text;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\r\n\t\t * @private\r\n\t\t * @name set_text(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_text.jstree\r\n\t\t */\r\n\t\tset_text : function (obj, val) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_text(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tobj.text = val;\r\n\t\t\tif(this.get_node(obj, true).length) {\r\n\t\t\t\tthis.redraw_node(obj.id);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node text value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_text.jstree\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_text',{ \"obj\" : obj, \"text\" : val });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets a JSON representation of a node (or the whole tree)\r\n\t\t * @name get_json([obj, options])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Object} options\r\n\t\t * @param  {Boolean} options.no_state do not return state information\r\n\t\t * @param  {Boolean} options.no_id do not return ID\r\n\t\t * @param  {Boolean} options.no_children do not include children\r\n\t\t * @param  {Boolean} options.no_data do not include node data\r\n\t\t * @param  {Boolean} options.no_li_attr do not include LI attributes\r\n\t\t * @param  {Boolean} options.no_a_attr do not include A attributes\r\n\t\t * @param  {Boolean} options.flat return flat JSON instead of nested\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_json : function (obj, options, flat) {\r\n\t\t\tobj = this.get_node(obj || $.jstree.root);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(options && options.flat && !flat) { flat = []; }\r\n\t\t\tvar tmp = {\r\n\t\t\t\t'id' : obj.id,\r\n\t\t\t\t'text' : obj.text,\r\n\t\t\t\t'icon' : this.get_icon(obj),\r\n\t\t\t\t'li_attr' : $.extend(true, {}, obj.li_attr),\r\n\t\t\t\t'a_attr' : $.extend(true, {}, obj.a_attr),\r\n\t\t\t\t'state' : {},\r\n\t\t\t\t'data' : options && options.no_data ? false : $.extend(true, {}, obj.data)\r\n\t\t\t\t//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\r\n\t\t\t}, i, j;\r\n\t\t\tif(options && options.flat) {\r\n\t\t\t\ttmp.parent = obj.parent;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_state) {\r\n\t\t\t\tfor(i in obj.state) {\r\n\t\t\t\t\tif(obj.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = obj.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete tmp.state;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_li_attr) {\r\n\t\t\t\tdelete tmp.li_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_a_attr) {\r\n\t\t\t\tdelete tmp.a_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_id) {\r\n\t\t\t\tdelete tmp.id;\r\n\t\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(options && options.flat && obj.id !== $.jstree.root) {\r\n\t\t\t\tflat.push(tmp);\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_children) {\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(options && options.flat) {\r\n\t\t\t\t\t\tthis.get_json(obj.children[i], options, flat);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp.children.push(this.get_json(obj.children[i], options));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);\r\n\t\t},\r\n\t\t/**\r\n\t\t * create a new node (do not confuse with load_node)\r\n\t\t * @name create_node([par, node, pos, callback, is_loaded])\r\n\t\t * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\r\n\t\t * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\r\n\t\t * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\r\n\t\t * @param  {Function} callback a function to be called once the node is created\r\n\t\t * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\r\n\t\t * @return {String}            the ID of the newly create node\r\n\t\t * @trigger model.jstree, create_node.jstree\r\n\t\t */\r\n\t\tcreate_node : function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(par === null) { par = $.jstree.root; }\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });\r\n\t\t\t}\r\n\t\t\tif(!node) { node = { \"text\" : this.get_string('New node') }; }\r\n\t\t\tif(typeof node === \"string\") { node = { \"text\" : node }; }\r\n\t\t\tif(node.text === undefined) { node.text = this.get_string('New node'); }\r\n\t\t\tvar tmp, dpc, i, j;\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children);\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children) + 1;\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > par.children.length) { pos = par.children.length; }\r\n\t\t\tif(!node.id) { node.id = true; }\r\n\t\t\tif(!this.check(\"create_node\", node, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, par.id, par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : par.id });\r\n\r\n\t\t\tpar.children_d = par.children_d.concat(dpc);\r\n\t\t\tfor(i = 0, j = par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tnode = tmp;\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\ttmp[i >= pos ? i+1 : i] = par.children[i];\r\n\t\t\t}\r\n\t\t\ttmp[pos] = node.id;\r\n\t\t\tpar.children = tmp;\r\n\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\tif(callback) { callback.call(this, this.get_node(node)); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is created\r\n\t\t\t * @event\r\n\t\t\t * @name create_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the new node among the parent's children\r\n\t\t\t */\r\n\t\t\tthis.trigger('create_node', { \"node\" : this.get_node(node), \"parent\" : par.id, \"position\" : pos });\r\n\t\t\treturn node.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node\r\n\t\t * @name rename_node(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger rename_node.jstree\r\n\t\t */\r\n\t\trename_node : function (obj, val) {\r\n\t\t\tvar t1, t2, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.rename_node(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.text;\r\n\t\t\tif(!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is renamed\r\n\t\t\t * @event\r\n\t\t\t * @name rename_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t * @param {String} old the old value\r\n\t\t\t */\r\n\t\t\tthis.trigger('rename_node', { \"node\" : obj, \"text\" : val, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * remove a node\r\n\t\t * @name delete_node(obj)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger delete_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdelete_node : function (obj) {\r\n\t\t\tvar t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.delete_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tpar = this.get_node(obj.parent);\r\n\t\t\tpos = $.inArray(obj.id, par.children);\r\n\t\t\tc = false;\r\n\t\t\tif(!this.check(\"delete_node\", obj, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(pos !== -1) {\r\n\t\t\t\tpar.children = $.vakata.array_remove(par.children, pos);\r\n\t\t\t}\r\n\t\t\ttmp = obj.children_d.concat([]);\r\n\t\t\ttmp.push(obj.id);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tif(this._model.data[tmp[k]].state.selected) {\r\n\t\t\t\t\tc = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c) {\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is deleted\r\n\t\t\t * @event\r\n\t\t\t * @name delete_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t */\r\n\t\t\tthis.trigger('delete_node', { \"node\" : obj, \"parent\" : par.id });\r\n\t\t\tif(c) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tdelete this._model.data[tmp[k]];\r\n\t\t\t}\r\n\t\t\tif($.inArray(this._data.core.focused, tmp) !== -1) {\r\n\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\ttop = this.element[0].scrollTop;\r\n\t\t\t\tlft = this.element[0].scrollLeft;\r\n\t\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\t\tif (this._model.data[$.jstree.root].children[0]) {\r\n\t\t\t\t\t\tthis.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.get_node(par, true).children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\tthis.element[0].scrollTop  = top;\r\n\t\t\t\tthis.element[0].scrollLeft = lft;\r\n\t\t\t}\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if an operation is premitted on the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name check(chk, obj, par, pos)\r\n\t\t * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {mixed} par the parent\r\n\t\t * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\r\n\t\t * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcheck : function (chk, obj, par, pos, more) {\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\r\n\t\t\t\tchc = this.settings.core.check_callback;\r\n\t\t\tif(chk === \"move_node\" || chk === \"copy_node\") {\r\n\t\t\t\tif((!more || !more.is_multi) && (obj.id === par.id || (chk === \"move_node\" && $.inArray(obj.id, par.children) === pos) || $.inArray(par.id, obj.children_d) !== -1)) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp && tmp.data) { tmp = tmp.data; }\r\n\t\t\tif(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\r\n\t\t\t\tif(tmp.functions[chk] === false) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp.functions[chk];\r\n\t\t\t}\r\n\t\t\tif(chc === false || ($.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {\r\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the last error\r\n\t\t * @name last_error()\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tlast_error : function () {\r\n\t\t\treturn this._data.core.last_error;\r\n\t\t},\r\n\t\t/**\r\n\t\t * move a node to a new parent\r\n\t\t * @name move_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to move, pass an array to move multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger move_node.jstree\r\n\t\t */\r\n\t\tmove_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\t\t\told_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(is_multi) {\r\n\t\t\t\tif((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\tif(old_ins) { old_ins.delete_node(obj); }\r\n\t\t\t\t\treturn tmp;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//var m = this._model.data;\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"move_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.parent === new_par.id) {\r\n\t\t\t\tdpc = new_par.children.concat();\r\n\t\t\t\ttmp = $.inArray(obj.id, dpc);\r\n\t\t\t\tif(tmp !== -1) {\r\n\t\t\t\t\tdpc = $.vakata.array_remove(dpc, tmp);\r\n\t\t\t\t\tif(pos > tmp) { pos--; }\r\n\t\t\t\t}\r\n\t\t\t\ttmp = [];\r\n\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i >= pos ? i+1 : i] = dpc[i];\r\n\t\t\t\t}\r\n\t\t\t\ttmp[pos] = obj.id;\r\n\t\t\t\tnew_par.children = tmp;\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// clean old parent and up\r\n\t\t\t\ttmp = obj.children_d.concat();\r\n\t\t\t\ttmp.push(obj.id);\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tdpc = [];\r\n\t\t\t\t\tp = old_ins._model.data[obj.parents[i]].children_d;\r\n\t\t\t\t\tfor(k = 0, l = p.length; k < l; k++) {\r\n\t\t\t\t\t\tif($.inArray(p[k], tmp) === -1) {\r\n\t\t\t\t\t\t\tdpc.push(p[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\told_ins._model.data[obj.parents[i]].children_d = dpc;\r\n\t\t\t\t}\r\n\t\t\t\told_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);\r\n\r\n\t\t\t\t// insert into new parent and up\r\n\t\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t\t}\r\n\t\t\t\tdpc[pos] = obj.id;\r\n\t\t\t\tnew_par.children = dpc;\r\n\t\t\t\tnew_par.children_d.push(obj.id);\r\n\t\t\t\tnew_par.children_d = new_par.children_d.concat(obj.children_d);\r\n\r\n\t\t\t\t// update object\r\n\t\t\t\tobj.parent = new_par.id;\r\n\t\t\t\ttmp = new_par.parents.concat();\r\n\t\t\t\ttmp.unshift(new_par.id);\r\n\t\t\t\tp = obj.parents.length;\r\n\t\t\t\tobj.parents = tmp;\r\n\r\n\t\t\t\t// update object children\r\n\t\t\t\ttmp = tmp.concat();\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);\r\n\t\t\t\t\tArray.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(old_par === $.jstree.root || new_par.id === $.jstree.root) {\r\n\t\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\t\tthis._node_changed(old_par);\r\n\t\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\t}\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, obj, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is moved\r\n\t\t\t * @event\r\n\t\t\t * @name move_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the old position of the node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('move_node', { \"node\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn obj.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node to a new parent\r\n\t\t * @name copy_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger model.jstree copy_node.jstree\r\n\t\t */\r\n\t\tcopy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"copy_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnode = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;\r\n\t\t\tif(!node) { return false; }\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tif(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : new_par.id });\r\n\r\n\t\t\t// insert into new parent and up\r\n\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tdpc = [];\r\n\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t}\r\n\t\t\tdpc[pos] = tmp.id;\r\n\t\t\tnew_par.children = dpc;\r\n\t\t\tnew_par.children_d.push(tmp.id);\r\n\t\t\tnew_par.children_d = new_par.children_d.concat(tmp.children_d);\r\n\r\n\t\t\tif(new_par.id === $.jstree.root) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t}\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, tmp, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is copied\r\n\t\t\t * @event\r\n\t\t\t * @name copy_node.jstree\r\n\t\t\t * @param {Object} node the copied node\r\n\t\t\t * @param {Object} original the original node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the position of the original node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy_node', { \"node\" : tmp, \"original\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * cut a node (a later call to `paste(obj)` would move the node)\r\n\t\t * @name cut(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger cut.jstree\r\n\t\t */\r\n\t\tcut : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'move_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for moving\r\n\t\t\t * @event\r\n\t\t\t * @name cut.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('cut', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node (a later call to `paste(obj)` would copy the node)\r\n\t\t * @name copy(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger copy.jstree\r\n\t\t */\r\n\t\tcopy : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'copy_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for copying\r\n\t\t\t * @event\r\n\t\t\t * @name copy.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the current buffer (any nodes that are waiting for a paste operation)\r\n\t\t * @name get_buffer()\r\n\t\t * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\r\n\t\t */\r\n\t\tget_buffer : function () {\r\n\t\t\treturn { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if there is something in the buffer to paste\r\n\t\t * @name can_paste()\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcan_paste : function () {\r\n\t\t\treturn ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy or move the previously cut or copied nodes to a new parent\r\n\t\t * @name paste(obj [, pos])\r\n\t\t * @param  {mixed} obj the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\r\n\t\t * @trigger paste.jstree\r\n\t\t */\r\n\t\tpaste : function (obj, pos) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }\r\n\t\t\tif(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when paste is invoked\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name paste.jstree\r\n\t\t\t\t * @param {String} parent the ID of the receiving node\r\n\t\t\t\t * @param {Array} node the nodes in the buffer\r\n\t\t\t\t * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('paste', { \"parent\" : obj.id, \"node\" : ccp_node, \"mode\" : ccp_mode });\r\n\t\t\t}\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * clear the buffer of previously copied or cut nodes\r\n\t\t * @name clear_buffer()\r\n\t\t * @trigger clear_buffer.jstree\r\n\t\t */\r\n\t\tclear_buffer : function () {\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when the copy / cut buffer is cleared\r\n\t\t\t * @event\r\n\t\t\t * @name clear_buffer.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_buffer');\r\n\t\t},\r\n\t\t/**\r\n\t\t * put a node in edit mode (input field to rename the node)\r\n\t\t * @name edit(obj [, default_text, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)\r\n\t\t * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text\r\n\t\t */\r\n\t\tedit : function (obj, default_text, callback) {\r\n\t\t\tvar rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(this.settings.core.check_callback === false) {\r\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Could not edit node because of check_callback' };\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\ttmp = obj;\r\n\t\t\tdefault_text = typeof default_text === 'string' ? default_text : obj.text;\r\n\t\t\tthis.set_text(obj, \"\");\r\n\t\t\tobj = this._open_to(obj);\r\n\t\t\ttmp.text = default_text;\r\n\r\n\t\t\trtl = this._data.core.rtl;\r\n\t\t\tw  = this.element.width();\r\n\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\ta  = obj.children('.jstree-anchor').focus();\r\n\t\t\ts  = $('<span>');\r\n\t\t\t/*!\r\n\t\t\toi = obj.children(\"i:visible\"),\r\n\t\t\tai = a.children(\"i:visible\"),\r\n\t\t\tw1 = oi.width() * oi.length,\r\n\t\t\tw2 = ai.width() * ai.length,\r\n\t\t\t*/\r\n\t\t\tt  = default_text;\r\n\t\t\th1 = $(\"<\"+\"div />\", { css : { \"position\" : \"absolute\", \"top\" : \"-200px\", \"left\" : (rtl ? \"0px\" : \"-1000px\"), \"visibility\" : \"hidden\" } }).appendTo(\"body\");\r\n\t\t\th2 = $(\"<\"+\"input />\", {\r\n\t\t\t\t\t\t\"value\" : t,\r\n\t\t\t\t\t\t\"class\" : \"jstree-rename-input\",\r\n\t\t\t\t\t\t// \"size\" : t.length,\r\n\t\t\t\t\t\t\"css\" : {\r\n\t\t\t\t\t\t\t\"padding\" : \"0\",\r\n\t\t\t\t\t\t\t\"border\" : \"1px solid silver\",\r\n\t\t\t\t\t\t\t\"box-sizing\" : \"border-box\",\r\n\t\t\t\t\t\t\t\"display\" : \"inline-block\",\r\n\t\t\t\t\t\t\t\"height\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"lineHeight\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"width\" : \"150px\" // will be set a bit further down\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"blur\" : $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar i = s.children(\".jstree-rename-input\"),\r\n\t\t\t\t\t\t\t\tv = i.val(),\r\n\t\t\t\t\t\t\t\tf = this.settings.core.force_text,\r\n\t\t\t\t\t\t\t\tnv;\r\n\t\t\t\t\t\t\tif(v === \"\") { v = t; }\r\n\t\t\t\t\t\t\th1.remove();\r\n\t\t\t\t\t\t\ts.replaceWith(a);\r\n\t\t\t\t\t\t\ts.remove();\r\n\t\t\t\t\t\t\tt = f ? t : $('<div></div>').append($.parseHTML(t)).html();\r\n\t\t\t\t\t\t\tthis.set_text(obj, t);\r\n\t\t\t\t\t\t\tnv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());\r\n\t\t\t\t\t\t\tif(!nv) {\r\n\t\t\t\t\t\t\t\tthis.set_text(obj, t); // move this up? and fix #483\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\t\t\t\tvar node = this.get_node(tmp.id, true);\r\n\t\t\t\t\t\t\t\tif(node.length) {\r\n\t\t\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\t\t\tnode.children('.jstree-anchor').focus();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\tif(callback) {\r\n\t\t\t\t\t\t\t\tcallback.call(this, tmp, nv, cancel);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\th2 = null;\r\n\t\t\t\t\t\t}, this),\r\n\t\t\t\t\t\t\"keydown\" : function (e) {\r\n\t\t\t\t\t\t\tvar key = e.which;\r\n\t\t\t\t\t\t\tif(key === 27) {\r\n\t\t\t\t\t\t\t\tcancel = true;\r\n\t\t\t\t\t\t\t\tthis.value = t;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.blur();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"click\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"mousedown\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"keyup\" : function (e) {\r\n\t\t\t\t\t\t\th2.width(Math.min(h1.text(\"pW\" + this.value).width(),w));\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"keypress\" : function(e) {\r\n\t\t\t\t\t\t\tif(e.which === 13) { return false; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tfn = {\r\n\t\t\t\t\t\tfontFamily\t\t: a.css('fontFamily')\t\t|| '',\r\n\t\t\t\t\t\tfontSize\t\t: a.css('fontSize')\t\t\t|| '',\r\n\t\t\t\t\t\tfontWeight\t\t: a.css('fontWeight')\t\t|| '',\r\n\t\t\t\t\t\tfontStyle\t\t: a.css('fontStyle')\t\t|| '',\r\n\t\t\t\t\t\tfontStretch\t\t: a.css('fontStretch')\t\t|| '',\r\n\t\t\t\t\t\tfontVariant\t\t: a.css('fontVariant')\t\t|| '',\r\n\t\t\t\t\t\tletterSpacing\t: a.css('letterSpacing')\t|| '',\r\n\t\t\t\t\t\twordSpacing\t\t: a.css('wordSpacing')\t\t|| ''\r\n\t\t\t\t};\r\n\t\t\ts.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\r\n\t\t\ta.replaceWith(s);\r\n\t\t\th1.css(fn);\r\n\t\t\th2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(),w))[0].select();\r\n\t\t\t$(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {\r\n\t\t\t\tif (h2 && e.target !== h2) {\r\n\t\t\t\t\t$(h2).blur();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * changes the theme\r\n\t\t * @name set_theme(theme_name [, theme_url])\r\n\t\t * @param {String} theme_name the name of the new theme to apply\r\n\t\t * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\r\n\t\t * @trigger set_theme.jstree\r\n\t\t */\r\n\t\tset_theme : function (theme_name, theme_url) {\r\n\t\t\tif(!theme_name) { return false; }\r\n\t\t\tif(theme_url === true) {\r\n\t\t\t\tvar dir = this.settings.core.themes.dir;\r\n\t\t\t\tif(!dir) { dir = $.jstree.path + '/themes'; }\r\n\t\t\t\ttheme_url = dir + '/' + theme_name + '/style.css';\r\n\t\t\t}\r\n\t\t\tif(theme_url && $.inArray(theme_url, themes_loaded) === -1) {\r\n\t\t\t\t$('head').append('<'+'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\r\n\t\t\t\tthemes_loaded.push(theme_url);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.themes.name) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.name = theme_name;\r\n\t\t\tthis.element.addClass('jstree-' + theme_name);\r\n\t\t\tthis.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');\r\n\t\t\t/**\r\n\t\t\t * triggered when a theme is set\r\n\t\t\t * @event\r\n\t\t\t * @name set_theme.jstree\r\n\t\t\t * @param {String} theme the new theme\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_theme', { 'theme' : theme_name });\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme name\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme : function () { return this._data.core.themes.name; },\r\n\t\t/**\r\n\t\t * changes the theme variant (if the theme has variants)\r\n\t\t * @name set_theme_variant(variant_name)\r\n\t\t * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\r\n\t\t */\r\n\t\tset_theme_variant : function (variant_name) {\r\n\t\t\tif(this._data.core.themes.variant) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.variant = variant_name;\r\n\t\t\tif(variant_name) {\r\n\t\t\t\tthis.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme variant\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme_variant : function () { return this._data.core.themes.variant; },\r\n\t\t/**\r\n\t\t * shows a striped background on the container (if the theme supports it)\r\n\t\t * @name show_stripes()\r\n\t\t */\r\n\t\tshow_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the striped background on the container\r\n\t\t * @name hide_stripes()\r\n\t\t */\r\n\t\thide_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the striped background on the container\r\n\t\t * @name toggle_stripes()\r\n\t\t */\r\n\t\ttoggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },\r\n\t\t/**\r\n\t\t * shows the connecting dots (if the theme supports it)\r\n\t\t * @name show_dots()\r\n\t\t */\r\n\t\tshow_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the connecting dots\r\n\t\t * @name hide_dots()\r\n\t\t */\r\n\t\thide_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the connecting dots\r\n\t\t * @name toggle_dots()\r\n\t\t */\r\n\t\ttoggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },\r\n\t\t/**\r\n\t\t * show the node icons\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node icons\r\n\t\t * @name hide_icons()\r\n\t\t */\r\n\t\thide_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },\r\n\t\t/**\r\n\t\t * show the node ellipsis\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node ellipsis\r\n\t\t * @name hide_ellipsis()\r\n\t\t */\r\n\t\thide_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node ellipsis\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_ellipsis : function () { if(this._data.core.themes.ellipsis) { this.hide_ellipsis(); } else { this.show_ellipsis(); } },\r\n\t\t/**\r\n\t\t * set the node icon for a node\r\n\t\t * @name set_icon(obj, icon)\r\n\t\t * @param {mixed} obj\r\n\t\t * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t */\r\n\t\tset_icon : function (obj, icon) {\r\n\t\t\tvar t1, t2, dom, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_icon(obj[t1], icon);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.icon;\r\n\t\t\tobj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;\r\n\t\t\tdom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\r\n\t\t\tif(icon === false) {\r\n\t\t\t\tthis.hide_icon(obj);\r\n\t\t\t}\r\n\t\t\telse if(icon === true || icon === null || icon === undefined || icon === '') {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse if(icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the node icon for a node\r\n\t\t * @name get_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_icon : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.icon;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the icon on an individual node\r\n\t\t * @name hide_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\thide_icon : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tobj.icon = false;\r\n\t\t\tthis.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * show the icon on an individual node\r\n\t\t * @name show_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\tshow_icon : function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tobj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\r\n\t\t\tif(!obj.icon) { obj.icon = true; }\r\n\t\t\tdom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t};\r\n\r\n\t// helpers\r\n\t$.vakata = {};\r\n\t// collect attributes\r\n\t$.vakata.attributes = function(node, with_values) {\r\n\t\tnode = $(node)[0];\r\n\t\tvar attr = with_values ? {} : [];\r\n\t\tif(node && node.attributes) {\r\n\t\t\t$.each(node.attributes, function (i, v) {\r\n\t\t\t\tif($.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }\r\n\t\t\t\tif(v.value !== null && $.trim(v.value) !== '') {\r\n\t\t\t\t\tif(with_values) { attr[v.name] = v.value; }\r\n\t\t\t\t\telse { attr.push(v.name); }\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn attr;\r\n\t};\r\n\t$.vakata.array_unique = function(array) {\r\n\t\tvar a = [], i, j, l, o = {};\r\n\t\tfor(i = 0, l = array.length; i < l; i++) {\r\n\t\t\tif(o[array[i]] === undefined) {\r\n\t\t\t\ta.push(array[i]);\r\n\t\t\t\to[array[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove = function(array, from) {\r\n\t\tarray.splice(from, 1);\r\n\t\treturn array;\r\n\t\t//var rest = array.slice((to || from) + 1 || array.length);\r\n\t\t//array.length = from < 0 ? array.length + from : from;\r\n\t\t//array.push.apply(array, rest);\r\n\t\t//return array;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove_item = function(array, item) {\r\n\t\tvar tmp = $.inArray(item, array);\r\n\t\treturn tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\r\n\t};\r\n\t$.vakata.array_filter = function(c,a,b,d,e) {\r\n\t\tif (c.filter) {\r\n\t\t\treturn c.filter(a, b);\r\n\t\t}\r\n\t\td=[];\r\n\t\tfor (e in c) {\r\n\t\t\tif (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {\r\n\t\t\t\td.push(c[e]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn d;\r\n\t};\r\n\r\n\r\n/**\r\n * ### Changed plugin\r\n *\r\n * This plugin adds more information to the `changed.jstree` event. The new data is contained in the `changed` event data property, and contains a lists of `selected` and `deselected` nodes.\r\n */\r\n\r\n\t$.jstree.plugins.changed = function (options, parent) {\r\n\t\tvar last = [];\r\n\t\tthis.trigger = function (ev, data) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tif(ev.replace('.jstree','') === 'changed') {\r\n\t\t\t\tdata.changed = { selected : [], deselected : [] };\r\n\t\t\t\tvar tmp = {};\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\ttmp[last[i]] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\tif(!tmp[data.selected[i]]) {\r\n\t\t\t\t\t\tdata.changed.selected.push(data.selected[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp[data.selected[i]] = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\tif(tmp[last[i]] === 1) {\r\n\t\t\t\t\t\tdata.changed.deselected.push(last[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlast = data.selected.slice();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when selection changes (the \"changed\" plugin enhances the original event with more data)\r\n\t\t\t * @event\r\n\t\t\t * @name changed.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event\r\n\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t * @plugin changed\r\n\t\t\t */\r\n\t\t\tparent.trigger.call(this, ev, data);\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tlast = [];\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n/**\r\n * ### Checkbox plugin\r\n *\r\n * This plugin renders checkbox icons in front of each node, making multiple selection much easier.\r\n * It also supports tri-state behavior, meaning that if a node has a few of its children checked it will be rendered as undetermined, and state will be propagated up.\r\n */\r\n\r\n\tvar _i = document.createElement('I');\r\n\t_i.className = 'jstree-icon jstree-checkbox';\r\n\t_i.setAttribute('role', 'presentation');\r\n\t/**\r\n\t * stores all defaults for the checkbox plugin\r\n\t * @name $.jstree.defaults.checkbox\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.checkbox = {\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.visible\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tvisible\t\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.three_state\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthree_state\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.whole_node\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\twhole_node\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.keep_selected_style\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tkeep_selected_style\t: true,\r\n\t\t/**\r\n\t\t * This setting controls how cascading and undetermined nodes are applied.\r\n\t\t * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.\r\n\t\t * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\r\n\t\t * @name $.jstree.defaults.checkbox.cascade\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade\t\t\t\t: '',\r\n\t\t/**\r\n\t\t * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.\r\n\t\t * @name $.jstree.defaults.checkbox.tie_selection\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\ttie_selection\t\t: true\r\n\t};\r\n\t$.jstree.plugins.checkbox = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis._data.checkbox.uto = false;\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tif(this.settings.checkbox.three_state) {\r\n\t\t\t\tthis.settings.checkbox.cascade = 'up+down+undetermined';\r\n\t\t\t}\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis._data.checkbox.visible = this.settings.checkbox.visible;\r\n\t\t\t\t\t\tif(!this.settings.checkbox.keep_selected_style) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-no-clicked');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-selection');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();\r\n\t\t\t\t\t}, this));\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {\r\n\t\t\t\t\t\t\t// only if undetermined is in setting\r\n\t\t\t\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\ti, j;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);\r\n\t\t\t\t\t\t\tif(m[dpc[i]].state.checked) {\r\n\t\t\t\t\t\t\t\tthis._data.checkbox.selected.push(dpc[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\t\t\tc, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tm[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tif(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tm[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif(!m[p.children_d[i]].children.length) {\r\n\t\t\t\t\t\t\t\t\t\tchd.push(m[p.children_d[i]].parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tchd = $.vakata.array_unique(chd);\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = chd.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tp = m[chd[k]];\r\n\t\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = data.node,\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tpar = this.get_node(obj.parent),\r\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tsel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;\r\n\r\n\t\t\t\t\t\t\tfor (i = 0, j = cur.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tsel[cur[i]] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tsel[obj.children_d[i]] = true;\r\n\t\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\twhile(par && par.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[par.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\tpar.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tsel[par.id] = true;\r\n\t\t\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(par, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcur = [];\r\n\t\t\t\t\t\t\tfor (i in sel) {\r\n\t\t\t\t\t\t\t\tif (sel.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\tcur.push(i);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\r\n\t\t\t\t\t\t\t// apply down (process .children separately?)\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1 && dom.length) {\r\n\t\t\t\t\t\t\t\tdom.find('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', true);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = this.get_node($.jstree.root),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = data.node,\r\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\r\n\t\t\t\t\t\t\t\ti, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tcur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {};\r\n\t\t\t\t\t\t\tif(obj && obj.original && obj.original.state && obj.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\tobj.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.parents[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(obj.parents[i], true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsel = {};\r\n\t\t\t\t\t\t\tfor(i = 0, j = cur.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t// apply down + apply up\r\n\t\t\t\t\t\t\t\tif(\r\n\t\t\t\t\t\t\t\t\t(s.indexOf('down') === -1 || $.inArray(cur[i], obj.children_d) === -1) &&\r\n\t\t\t\t\t\t\t\t\t(s.indexOf('up') === -1 || $.inArray(cur[i], obj.parents) === -1)\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tsel[cur[i]] = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcur = [];\r\n\t\t\t\t\t\t\tfor (i in sel) {\r\n\t\t\t\t\t\t\t\tif (sel.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\tcur.push(i);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t// apply down (process .children separately?)\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1 && dom.length) {\r\n\t\t\t\t\t\t\t\tdom.find('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked').parent().attr('aria-selected', false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('delete_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar p = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on('move_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar is_multi = data.is_multi,\r\n\t\t\t\t\t\t\t\told_par = data.old_parent,\r\n\t\t\t\t\t\t\t\tnew_par = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tp, c, i, j, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\tif(!is_multi) {\r\n\t\t\t\t\t\t\t\tp = this.get_node(old_par);\r\n\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = new_par;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\tif(!p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * set the undetermined state where and if necessary. Used internally.\r\n\t\t * @private\r\n\t\t * @name _undetermined()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis._undetermined = function () {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tvar i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this;\r\n\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\tif(m[s[i]] && m[s[i]].parents) {\r\n\t\t\t\t\tfor(k = 0, l = m[s[i]].parents.length; k < l; k++) {\r\n\t\t\t\t\t\tif(o[m[s[i]].parents[k]] !== undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m[s[i]].parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\to[m[s[i]].parents[k]] = true;\r\n\t\t\t\t\t\t\tp.push(m[s[i]].parents[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// attempt for server side undetermined state\r\n\t\t\tthis.element.find('.jstree-closed').not(':has(.jstree-children)')\r\n\t\t\t\t.each(function () {\r\n\t\t\t\t\tvar tmp = tt.get_node(this), tmp2;\r\n\t\t\t\t\tif(!tmp.state.loaded) {\r\n\t\t\t\t\t\tif(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\tif(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\to[tmp.id] = true;\r\n\t\t\t\t\t\t\t\tp.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(k = 0, l = tmp.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\tif(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp.parents[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = tmp.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp2 = m[tmp.children_d[i]];\r\n\t\t\t\t\t\t\tif(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\t\tif(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp2.id] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp2.id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = tmp2.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tif(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\to[tmp2.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\t\tp.push(tmp2.parents[k]);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\r\n\t\t\tfor(i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\tif(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\ts = this.get_node(p[i], true);\r\n\t\t\t\t\tif(s && s.length) {\r\n\t\t\t\t\t\ts.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, is_callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, icon = null;\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tif(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }\r\n\t\t\t\t\ticon = _i.cloneNode(false);\r\n\t\t\t\t\tif(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }\r\n\t\t\t\t\ttmp.insertBefore(icon, tmp.childNodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the node checkbox icons\r\n\t\t * @name show_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * hide the node checkbox icons\r\n\t\t * @name hide_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };\r\n\t\t/**\r\n\t\t * checks if a node is in an undetermined state\r\n\t\t * @name is_undetermined(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.is_undetermined = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tvar s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;\r\n\t\t\tif(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.loaded && obj.original.state.undetermined === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tif($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * disable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger disable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.disable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = true;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is disabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name disable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('disable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * enable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger enable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.enable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = false;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is enabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name enable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('enable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif($(e.target).hasClass('jstree-checkbox-disabled')) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\te.ctrlKey = true;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_checked(obj)) {\r\n\t\t\t\tthis.uncheck_node(obj, e);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.check_node(obj, e);\r\n\t\t\t}\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\r\n\t\t * @name check_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to check multiple nodes\r\n\t\t * @trigger check_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.check_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checked) {\r\n\t\t\t\tobj.state.checked = true;\r\n\t\t\t\tthis._data.checkbox.selected.push(obj.id);\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name check_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this check_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\r\n\t\t * @name uncheck_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to uncheck multiple nodes\r\n\t\t * @trigger uncheck_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.uncheck_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checked) {\r\n\t\t\t\tobj.state.checked = false;\r\n\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name uncheck_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this uncheck_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\r\n\t\t * @name check_all()\r\n\t\t * @trigger check_all.jstree, changed.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tthis._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name check_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('check_all', { 'selected' : this._data.checkbox.selected });\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\r\n\t\t * @name uncheck_all()\r\n\t\t * @trigger uncheck_all.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tthis.element.find('.jstree-checked').removeClass('jstree-checked');\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name uncheck_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });\r\n\t\t};\r\n\t\t/**\r\n\t\t * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\r\n\t\t * @name is_checked(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.is_checked = function (obj) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\treturn obj.state.checked;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\r\n\t\t * @name get_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_selected(full); }\r\n\t\t\treturn full ? $.map(this._data.checkbox.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\r\n\t\t * @name get_top_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_top_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\r\n\t\t * @name get_bottom_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_bottom_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t};\r\n\t\tthis.load_node = function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c, tmp;\r\n\t\t\tif(!$.isArray(obj) && !this.settings.checkbox.tie_selection) {\r\n\t\t\t\ttmp = this.get_node(obj);\r\n\t\t\t\tif(tmp && tmp.state.loaded) {\r\n\t\t\t\t\tfor(k = 0, l = tmp.children_d.length; k < l; k++) {\r\n\t\t\t\t\t\tif(this._model.data[tmp.children_d[k]].state.checked) {\r\n\t\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent.load_node.apply(this, arguments);\r\n\t\t};\r\n\t\tthis.get_state = function () {\r\n\t\t\tvar state = parent.get_state.apply(this, arguments);\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return state; }\r\n\t\t\tstate.checkbox = this._data.checkbox.selected.slice();\r\n\t\t\treturn state;\r\n\t\t};\r\n\t\tthis.set_state = function (state, callback) {\r\n\t\t\tvar res = parent.set_state.apply(this, arguments);\r\n\t\t\tif(res && state.checkbox) {\r\n\t\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\tthis.uncheck_all();\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\t$.each(state.checkbox, function (i, v) {\r\n\t\t\t\t\t\t_this.check_node(v);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tdelete state.checkbox;\r\n\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\t}\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the checkbox plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"checkbox\");\r\n\r\n/**\r\n * ### Conditionalselect plugin\r\n *\r\n * This plugin allows defining a callback to allow or deny node selection by user input (activate node method).\r\n */\r\n\r\n\t/**\r\n\t * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.\r\n\t * @name $.jstree.defaults.checkbox.visible\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.conditionalselect = function () { return true; };\r\n\t$.jstree.plugins.conditionalselect = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {\r\n\t\t\t\tparent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\r\n/**\r\n * ### Contextmenu plugin\r\n *\r\n * Shows a context menu when a node is right-clicked.\r\n */\r\n\r\n\t/**\r\n\t * stores all defaults for the contextmenu plugin\r\n\t * @name $.jstree.defaults.contextmenu\r\n\t * @plugin contextmenu\r\n\t */\r\n\t$.jstree.defaults.contextmenu = {\r\n\t\t/**\r\n\t\t * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.contextmenu.select_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tselect_node : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\r\n\t\t * @name $.jstree.defaults.contextmenu.show_at_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tshow_at_node : true,\r\n\t\t/**\r\n\t\t * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\r\n\t\t *\r\n\t\t * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.\r\n\t\t *\r\n\t\t * * `separator_before` - a boolean indicating if there should be a separator before this item\r\n\t\t * * `separator_after` - a boolean indicating if there should be a separator after this item\r\n\t\t * * `_disabled` - a boolean indicating if this action should be disabled\r\n\t\t * * `label` - a string - the name of the action (could be a function returning a string)\r\n\t\t * * `title` - a string - an optional tooltip for the item\r\n\t\t * * `action` - a function to be executed if this item is chosen, the function will receive \r\n\t\t * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\r\n\t\t * * `shortcut_label` - shortcut label (like for example `F2` for rename)\r\n\t\t * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.contextmenu.items\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\titems : function (o, cb) { // Could be an object directly\r\n\t\t\treturn {\r\n\t\t\t\t\"create\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: true,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"create_node\", data.reference, {}, \"last\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Create\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.create_node(obj, {}, \"last\", function (new_node) {\r\n\t\t\t\t\t\t\tsetTimeout(function () { inst.edit(new_node); },0);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"rename\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Rename\",\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t\"shortcut\"\t\t\t: 113,\r\n\t\t\t\t\t\"shortcut_label\"\t: 'F2',\r\n\t\t\t\t\t\"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.edit(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"remove\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Delete\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\tinst.delete_node(inst.get_selected());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinst.delete_node(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"ccp\" : {\r\n\t\t\t\t\t\"separator_before\"\t: true,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Edit\",\r\n\t\t\t\t\t\"action\"\t\t\t: false,\r\n\t\t\t\t\t\"submenu\" : {\r\n\t\t\t\t\t\t\"cut\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Cut\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.cut(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.cut(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"copy\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Copy\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.copy(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.copy(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"paste\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"_disabled\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\treturn !$.jstree.reference(data.reference).can_paste();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Paste\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tinst.paste(obj);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.contextmenu = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tvar last_ts = 0, cto = null, ex, ey;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-anchor\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif (e.target.tagName.toLowerCase() === 'input') {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlast_ts = e.ctrlKey ? +new Date() : 0;\r\n\t\t\t\t\t\tif(data || cto) {\r\n\t\t\t\t\t\t\tlast_ts = (+new Date()) + 10000;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_loading(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click\r\n\t\t\t\t\t\t\t$.vakata.context.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlast_ts = 0;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"touchstart.jstree\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tif(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tex = e.originalEvent.changedTouches[0].clientX;\r\n\t\t\t\t\t\tey = e.originalEvent.changedTouches[0].clientY;\r\n\t\t\t\t\t\tcto = setTimeout(function () {\r\n\t\t\t\t\t\t\t$(e.currentTarget).trigger('contextmenu', true);\r\n\t\t\t\t\t\t}, 750);\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchmove.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 50 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 50)) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchend.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t/*!\r\n\t\t\tif(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\r\n\t\t\t\tvar el = null, tm = null;\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tel = e.currentTarget;\r\n\t\t\t\t\t\ttm = +new Date();\r\n\t\t\t\t\t\t$(document).one(\"touchend\", function (e) {\r\n\t\t\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t\t\t\te.currentTarget = e.target;\r\n\t\t\t\t\t\t\ttm = ((+(new Date())) - tm);\r\n\t\t\t\t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(el).trigger('contextmenu', e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tel = null;\r\n\t\t\t\t\t\t\ttm = null;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t$(document).on(\"context_hide.vakata.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\tthis._data.contextmenu.visible = false;\r\n\t\t\t\t$(data.reference).removeClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this._data.contextmenu.visible) {\r\n\t\t\t\t$.vakata.context.hide();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * prepare and show the context menu for a node\r\n\t\t * @name show_contextmenu(obj [, x, y])\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Object} e the event if available that triggered the contextmenu\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t */\r\n\t\tthis.show_contextmenu = function (obj, x, y, e) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar s = this.settings.contextmenu,\r\n\t\t\t\td = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\"),\r\n\t\t\t\to = false,\r\n\t\t\t\ti = false;\r\n\t\t\tif(s.show_at_node || x === undefined || y === undefined) {\r\n\t\t\t\to = a.offset();\r\n\t\t\t\tx = o.left;\r\n\t\t\t\ty = o.top + this._data.core.li_height;\r\n\t\t\t}\r\n\t\t\tif(this.settings.contextmenu.select_node && !this.is_selected(obj)) {\r\n\t\t\t\tthis.activate_node(obj, e);\r\n\t\t\t}\r\n\r\n\t\t\ti = s.items;\r\n\t\t\tif($.isFunction(i)) {\r\n\t\t\t\ti = i.call(this, obj, $.proxy(function (i) {\r\n\t\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif($.isPlainObject(i)) {\r\n\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the prepared context menu for a node\r\n\t\t * @name _show_contextmenu(obj, x, y, i)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} i the object of items to show\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._show_contextmenu = function (obj, x, y, i) {\r\n\t\t\tvar d = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\");\r\n\t\t\t$(document).one(\"context_show.vakata.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\tvar cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\r\n\t\t\t\t$(data.element).addClass(cls);\r\n\t\t\t\ta.addClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t\tthis._data.contextmenu.visible = true;\r\n\t\t\t$.vakata.context.show(a, { 'x' : x, 'y' : y }, i);\r\n\t\t\t/**\r\n\t\t\t * triggered when the contextmenu is shown for a node\r\n\t\t\t * @event\r\n\t\t\t * @name show_contextmenu.jstree\r\n\t\t\t * @param {Object} node the node\r\n\t\t\t * @param {Number} x the x-coordinate of the menu relative to the document\r\n\t\t\t * @param {Number} y the y-coordinate of the menu relative to the document\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_contextmenu', { \"node\" : obj, \"x\" : x, \"y\" : y });\r\n\t\t};\r\n\t};\r\n\r\n\t// contextmenu helper\r\n\t(function ($) {\r\n\t\tvar right_to_left = false,\r\n\t\t\tvakata_context = {\r\n\t\t\t\telement\t\t: false,\r\n\t\t\t\treference\t: false,\r\n\t\t\t\tposition_x\t: 0,\r\n\t\t\t\tposition_y\t: 0,\r\n\t\t\t\titems\t\t: [],\r\n\t\t\t\thtml\t\t: \"\",\r\n\t\t\t\tis_visible\t: false\r\n\t\t\t};\r\n\r\n\t\t$.vakata.context = {\r\n\t\t\tsettings : {\r\n\t\t\t\thide_onmouseleave\t: 0,\r\n\t\t\t\ticons\t\t\t\t: true\r\n\t\t\t},\r\n\t\t\t_trigger : function (event_name) {\r\n\t\t\t\t$(document).triggerHandler(\"context_\" + event_name + \".vakata\", {\r\n\t\t\t\t\t\"reference\"\t: vakata_context.reference,\r\n\t\t\t\t\t\"element\"\t: vakata_context.element,\r\n\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\"x\" : vakata_context.position_x,\r\n\t\t\t\t\t\t\"y\" : vakata_context.position_y\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t_execute : function (i) {\r\n\t\t\t\ti = vakata_context.items[i];\r\n\t\t\t\treturn i && (!i._disabled || ($.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element }))) && i.action ? i.action.call(null, {\r\n\t\t\t\t\t\t\t\"item\"\t\t: i,\r\n\t\t\t\t\t\t\t\"reference\"\t: vakata_context.reference,\r\n\t\t\t\t\t\t\t\"element\"\t: vakata_context.element,\r\n\t\t\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\t\t\"x\" : vakata_context.position_x,\r\n\t\t\t\t\t\t\t\t\"y\" : vakata_context.position_y\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}) : false;\r\n\t\t\t},\r\n\t\t\t_parse : function (o, is_callback) {\r\n\t\t\t\tif(!o) { return false; }\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tvakata_context.html\t\t= \"\";\r\n\t\t\t\t\tvakata_context.items\t= [];\r\n\t\t\t\t}\r\n\t\t\t\tvar str = \"\",\r\n\t\t\t\t\tsep = false,\r\n\t\t\t\t\ttmp;\r\n\r\n\t\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\r\n\t\t\t\t$.each(o, function (i, val) {\r\n\t\t\t\t\tif(!val) { return true; }\r\n\t\t\t\t\tvakata_context.items.push(val);\r\n\t\t\t\t\tif(!sep && val.separator_before) {\r\n\t\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsep = false;\r\n\t\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || ($.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\r\n\t\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (vakata_context.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\r\n\t\t\t\t\tif($.vakata.context.settings.icons) {\r\n\t\t\t\t\t\tstr += \"<\"+\"i \";\r\n\t\t\t\t\t\tif(val.icon) {\r\n\t\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\r\n\t\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += ($.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : vakata_context.reference, \"element\" : vakata_context.element }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\r\n\t\t\t\t\tif(val.submenu) {\r\n\t\t\t\t\t\ttmp = $.vakata.context._parse(val.submenu, true);\r\n\t\t\t\t\t\tif(tmp) { str += tmp; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += \"<\"+\"/li>\";\r\n\t\t\t\t\tif(val.separator_after) {\r\n\t\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + ($.vakata.context.settings.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\t\tsep = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\r\n\t\t\t\tif(is_callback) { str += \"</ul>\"; }\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_parse.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tif(!is_callback) { vakata_context.html = str; $.vakata.context._trigger(\"parse\"); }\r\n\t\t\t\treturn str.length > 10 ? str : false;\r\n\t\t\t},\r\n\t\t\t_show_submenu : function (o) {\r\n\t\t\t\to = $(o);\r\n\t\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\r\n\t\t\t\tvar e = o.children(\"ul\"),\r\n\t\t\t\t\txl = o.offset().left,\r\n\t\t\t\t\tx = xl + o.outerWidth(),\r\n\t\t\t\t\ty = o.offset().top,\r\n\t\t\t\t\tw = e.width(),\r\n\t\t\t\t\th = e.height(),\r\n\t\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\r\n\t\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\to[x + w > dw  && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\r\n\t\t\t\t}\r\n\t\t\t\tif(y + h + 10 > dh) {\r\n\t\t\t\t\te.css(\"bottom\",\"-1px\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//if does not fit - stick it to the side\r\n\t\t\t\tif (o.hasClass('vakata-context-right')) {\r\n\t\t\t\t\tif (xl < w) {\r\n\t\t\t\t\t\te.css(\"margin-right\", xl - w);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (dw - x < w) {\r\n\t\t\t\t\t\te.css(\"margin-left\", dw - x - w);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\te.show();\r\n\t\t\t},\r\n\t\t\tshow : function (reference, position, data) {\r\n\t\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\r\n\t\t\t\tif(vakata_context.element && vakata_context.element.length) {\r\n\t\t\t\t\tvakata_context.element.width('');\r\n\t\t\t\t}\r\n\t\t\t\tswitch(cond) {\r\n\t\t\t\t\tcase (!position && !reference):\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\tcase (!!position && !!reference):\r\n\t\t\t\t\t\tvakata_context.reference\t= reference;\r\n\t\t\t\t\t\tvakata_context.position_x\t= position.x;\r\n\t\t\t\t\t\tvakata_context.position_y\t= position.y;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase (!position && !!reference):\r\n\t\t\t\t\t\tvakata_context.reference\t= reference;\r\n\t\t\t\t\t\to = reference.offset();\r\n\t\t\t\t\t\tvakata_context.position_x\t= o.left + reference.outerHeight();\r\n\t\t\t\t\t\tvakata_context.position_y\t= o.top;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase (!!position && !reference):\r\n\t\t\t\t\t\tvakata_context.position_x\t= position.x;\r\n\t\t\t\t\t\tvakata_context.position_y\t= position.y;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\r\n\t\t\t\t\tdata = $(reference).data('vakata_contextmenu');\r\n\t\t\t\t}\r\n\t\t\t\tif($.vakata.context._parse(data)) {\r\n\t\t\t\t\tvakata_context.element.html(vakata_context.html);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_context.items.length) {\r\n\t\t\t\t\tvakata_context.element.appendTo(\"body\");\r\n\t\t\t\t\te = vakata_context.element;\r\n\t\t\t\t\tx = vakata_context.position_x;\r\n\t\t\t\t\ty = vakata_context.position_y;\r\n\t\t\t\t\tw = e.width();\r\n\t\t\t\t\th = e.height();\r\n\t\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\r\n\t\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\t\tx -= (e.outerWidth() - $(reference).outerWidth());\r\n\t\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\r\n\t\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(x + w + 20 > dw) {\r\n\t\t\t\t\t\tx = dw - (w + 20);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(y + h + 20 > dh) {\r\n\t\t\t\t\t\ty = dh - (h + 20);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvakata_context.element\r\n\t\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\r\n\t\t\t\t\t\t.show()\r\n\t\t\t\t\t\t.find('a').first().focus().parent().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\tvakata_context.is_visible = true;\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when the contextmenu is shown\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t\t * @name context_show.vakata\r\n\t\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.context._trigger(\"show\");\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\thide : function () {\r\n\t\t\t\tif(vakata_context.is_visible) {\r\n\t\t\t\t\tvakata_context.element.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\r\n\t\t\t\t\tvakata_context.is_visible = false;\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when the contextmenu is hidden\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t\t * @name context_hide.vakata\r\n\t\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.context._trigger(\"hide\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t$(function () {\r\n\t\t\tright_to_left = $(\"body\").css(\"direction\") === \"rtl\";\r\n\t\t\tvar to = false;\r\n\r\n\t\t\tvakata_context.element = $(\"<ul class='vakata-context'></ul>\");\r\n\t\t\tvakata_context.element\r\n\t\t\t\t.on(\"mouseenter\", \"li\", function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\r\n\t\t\t\t\tif($.contains(this, e.relatedTarget)) {\r\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\r\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\r\n\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\r\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\t$.vakata.context._show_submenu(this);\r\n\t\t\t\t})\r\n\t\t\t\t// тестово - дали не натоварва?\r\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\r\n\t\t\t\t\tif($.contains(this, e.relatedTarget)) { return; }\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseleave\", function (e) {\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\tif($.vakata.context.settings.hide_onmouseleave) {\r\n\t\t\t\t\t\tto = setTimeout(\r\n\t\t\t\t\t\t\t(function (t) {\r\n\t\t\t\t\t\t\t\treturn function () { $.vakata.context.hide(); };\r\n\t\t\t\t\t\t\t}(this)), $.vakata.context.settings.hide_onmouseleave);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", \"a\", function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t//})\r\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\r\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && $.vakata.context._execute($(this).attr(\"rel\")) !== false) {\r\n\t\t\t\t\t\t$.vakata.context.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on('keydown', 'a', function (e) {\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 13:\r\n\t\t\t\t\t\t\tcase 32:\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37:\r\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\r\n\t\t\t\t\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\r\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38:\r\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\r\n\t\t\t\t\t\t\t\t\to = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\t\tif(!o.length) { o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\r\n\t\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39:\r\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\r\n\t\t\t\t\t\t\t\t\tvakata_context.element.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40:\r\n\t\t\t\t\t\t\t\tif(vakata_context.is_visible) {\r\n\t\t\t\t\t\t\t\t\to = vakata_context.element.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\t\tif(!o.length) { o = vakata_context.element.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\r\n\t\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 27:\r\n\t\t\t\t\t\t\t\t$.vakata.context.hide();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t//console.log(e.which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('keydown', function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar a = vakata_context.element.find('.vakata-contextmenu-shortcut-' + e.which).parent();\r\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\r\n\t\t\t\t\t\ta.click();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t$(document)\r\n\t\t\t\t.on(\"mousedown.vakata.jstree\", function (e) {\r\n\t\t\t\t\tif(vakata_context.is_visible && !$.contains(vakata_context.element[0], e.target)) {\r\n\t\t\t\t\t\t$.vakata.context.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"context_show.vakata.jstree\", function (e, data) {\r\n\t\t\t\t\tvakata_context.element.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\r\n\t\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\t\tvakata_context.element.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// also apply a RTL class?\r\n\t\t\t\t\tvakata_context.element.find(\"ul\").hide().end();\r\n\t\t\t\t});\r\n\t\t});\r\n\t}($));\r\n\t// $.jstree.defaults.plugins.push(\"contextmenu\");\r\n\r\n\r\n/**\r\n * ### Drag'n'drop plugin\r\n *\r\n * Enables dragging and dropping of nodes in the tree, resulting in a move or copy operations.\r\n */\r\n\r\n\t/**\r\n\t * stores all defaults for the drag'n'drop plugin\r\n\t * @name $.jstree.defaults.dnd\r\n\t * @plugin dnd\r\n\t */\r\n\t$.jstree.defaults.dnd = {\r\n\t\t/**\r\n\t\t * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.dnd.copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcopy : true,\r\n\t\t/**\r\n\t\t * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\r\n\t\t * @name $.jstree.defaults.dnd.open_timeout\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\topen_timeout : 500,\r\n\t\t/**\r\n\t\t * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging\r\n\t\t * @name $.jstree.defaults.dnd.is_draggable\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tis_draggable : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\r\n\t\t * @name $.jstree.defaults.dnd.check_while_dragging\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcheck_while_dragging : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\r\n\t\t * @name $.jstree.defaults.dnd.always_copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\talways_copy : false,\r\n\t\t/**\r\n\t\t * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\r\n\t\t * @name $.jstree.defaults.dnd.inside_pos\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tinside_pos : 0,\r\n\t\t/**\r\n\t\t * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node\r\n\t\t * @name $.jstree.defaults.dnd.drag_selection\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tdrag_selection : true,\r\n\t\t/**\r\n\t\t * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string \"selected\" which means only selected nodes can be dragged on touch devices.\r\n\t\t * @name $.jstree.defaults.dnd.touch\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\ttouch : true,\r\n\t\t/**\r\n\t\t * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.\r\n\t\t * @name $.jstree.defaults.dnd.large_drop_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drop_target : false,\r\n\t\t/**\r\n\t\t * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to \"selected\".\r\n\t\t * @name $.jstree.defaults.dnd.large_drag_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drag_target : false,\r\n\t\t/**\r\n\t\t * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.\r\n\t\t * @reference http://caniuse.com/#feat=dragndrop\r\n\t\t * @name $.jstree.defaults.dnd.use_html5\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tuse_html5: false\r\n\t};\r\n\tvar drg, elm;\r\n\t// TODO: now check works by checking for each node individually, how about max_children, unique, etc?\r\n\t$.jstree.plugins.dnd = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(e.type === \"touchstart\" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar obj = this.get_node(e.target),\r\n\t\t\t\t\t\t\tmlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,\r\n\t\t\t\t\t\t\ttxt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));\r\n\t\t\t\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\t\t\t\ttxt = $.vakata.html.escape(txt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === \"touchstart\" || e.type === \"dragstart\") &&\r\n\t\t\t\t\t\t\t(this.settings.dnd.is_draggable === true || ($.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tdrg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };\r\n\t\t\t\t\t\t\telm = e.currentTarget;\r\n\t\t\t\t\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\t\t\t\t\t$.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.element.trigger('mousedown.jstree');\r\n\t\t\t\t\t\t\t\treturn $.vakata.dnd.start(e, drg, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '\"><i class=\"jstree-icon jstree-er\"></i>' + txt + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('dragover.jstree', function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t//\t\te.preventDefault();\r\n\t\t\t\t\t//\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t//\t\treturn false;\r\n\t\t\t\t\t//\t}, this))\r\n\t\t\t\t\t.on('drop.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (obj && this.settings.dnd.use_html5) {\r\n\t\t\t\tif (this.settings.dnd.large_drag_target) {\r\n\t\t\t\t\tobj.setAttribute('draggable', true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.setAttribute('draggable', true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t$(function() {\r\n\t\t// bind only once for all instances\r\n\t\tvar lastmv = false,\r\n\t\t\tlaster = false,\r\n\t\t\tlastev = false,\r\n\t\t\topento = false,\r\n\t\t\tmarker = $('<div id=\"jstree-marker\">&#160;</div>').hide(); //.appendTo('body');\r\n\r\n\t\t$(document)\r\n\t\t\t.on('dnd_start.vakata.jstree', function (e, data) {\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.appendTo('body'); //.show();\r\n\t\t\t})\r\n\t\t\t.on('dnd_move.vakata.jstree', function (e, data) {\r\n\t\t\t\tif(opento) {\r\n\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || data.event.target !== lastev.target) {\r\n\t\t\t\t\t\tclearTimeout(opento);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\r\n\t\t\t\t// if we are hovering the marker image do nothing (can happen on \"inside\" drags)\r\n\t\t\t\tif(data.event.target.id && data.event.target.id === 'jstree-marker') {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlastev = data.event;\r\n\r\n\t\t\t\tvar ins = $.jstree.reference(data.event.target),\r\n\t\t\t\t\tref = false,\r\n\t\t\t\t\toff = false,\r\n\t\t\t\t\trel = false,\r\n\t\t\t\t\ttmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn;\r\n\t\t\t\t// if we are over an instance\r\n\t\t\t\tif(ins && ins._data && ins._data.dnd) {\r\n\t\t\t\t\tmarker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));\r\n\t\t\t\t\tis_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));\r\n\t\t\t\t\tdata.helper\r\n\t\t\t\t\t\t.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))\r\n\t\t\t\t\t\t.find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();\r\n\r\n\t\t\t\t\t// if are hovering the container itself add a new root node\r\n\t\t\t\t\t//console.log(data.event);\r\n\t\t\t\t\tif( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\r\n\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\tok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? \"copy_node\" : \"move_node\"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });\r\n\t\t\t\t\t\t\tif(!ok) { break; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };\r\n\t\t\t\t\t\t\tmarker.hide();\r\n\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// if we are hovering a tree node\r\n\t\t\t\t\t\tref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');\r\n\t\t\t\t\t\tif(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\r\n\t\t\t\t\t\t\toff = ref.offset();\r\n\t\t\t\t\t\t\trel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;\r\n\t\t\t\t\t\t\th = ref.outerHeight();\r\n\t\t\t\t\t\t\tif(rel < h / 3) {\r\n\t\t\t\t\t\t\t\to = ['b', 'i', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(rel > h - h / 3) {\r\n\t\t\t\t\t\t\t\to = ['a', 'i', 'b'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\to = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$.each(o, function (j, v) {\r\n\t\t\t\t\t\t\t\tswitch(v) {\r\n\t\t\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index();\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\t\t\t\tip = ins.settings.dnd.inside_pos;\r\n\t\t\t\t\t\t\t\t\t\ttm = ins.get_node(ref.parent());\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 2;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h / 2 + 1;\r\n\t\t\t\t\t\t\t\t\t\tp = tm.id;\r\n\t\t\t\t\t\t\t\t\t\ti = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'a':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index() + 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\t\t\top = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? \"copy_node\" : \"move_node\";\r\n\t\t\t\t\t\t\t\t\tps = i;\r\n\t\t\t\t\t\t\t\t\tif(op === \"move_node\" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {\r\n\t\t\t\t\t\t\t\t\t\tpr = ins.get_node(p);\r\n\t\t\t\t\t\t\t\t\t\tif(ps > $.inArray(data.data.nodes[t1], pr.children)) {\r\n\t\t\t\t\t\t\t\t\t\t\tps -= 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );\r\n\t\t\t\t\t\t\t\t\tif(!ok) {\r\n\t\t\t\t\t\t\t\t\t\tif(ins && ins.last_error) { laster = ins.last_error(); }\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\r\n\t\t\t\t\t\t\t\t\topento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\t\t\tpn = ins.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif (!pn.hasClass('.jstree-dnd-parent')) {\r\n\t\t\t\t\t\t\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t\tpn.addClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };\r\n\t\t\t\t\t\t\t\t\tmarker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();\r\n\t\t\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlaster = {};\r\n\t\t\t\t\t\t\t\t\to = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(o === true) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tmarker.hide();\r\n\t\t\t})\r\n\t\t\t.on('dnd_scroll.vakata.jstree', function (e, data) {\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide();\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t})\r\n\t\t\t.on('dnd_stop.vakata.jstree', function (e, data) {\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tif(opento) { clearTimeout(opento); }\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide().detach();\r\n\t\t\t\tvar i, j, nodes = [];\r\n\t\t\t\tif(lastmv) {\r\n\t\t\t\t\tfor(i = 0, j = data.data.nodes.length; i < j; i++) {\r\n\t\t\t\t\t\tnodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ti = $(data.event.target).closest('.jstree');\r\n\t\t\t\t\tif(i.length && laster && laster.error && laster.error === 'check') {\r\n\t\t\t\t\t\ti = i.jstree(true);\r\n\t\t\t\t\t\tif(i) {\r\n\t\t\t\t\t\t\ti.settings.core.error.call(this, laster);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tlastmv = false;\r\n\t\t\t})\r\n\t\t\t.on('keyup.jstree keydown.jstree', function (e, data) {\r\n\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\tif(data && data.data && data.data.jstree) {\r\n\t\t\t\t\tif (e.type === \"keyup\" && e.which === 27) {\r\n\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\tlastmv = false;\r\n\t\t\t\t\t\tlaster = false;\r\n\t\t\t\t\t\tlastev = false;\r\n\t\t\t\t\t\topento = false;\r\n\t\t\t\t\t\tmarker.hide().detach();\r\n\t\t\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdata.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();\r\n\t\t\t\t\t\tif(lastev) {\r\n\t\t\t\t\t\t\tlastev.metaKey = e.metaKey;\r\n\t\t\t\t\t\t\tlastev.ctrlKey = e.ctrlKey;\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', lastev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t});\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t$.vakata.html = {\r\n\t\t\tdiv : $('<div />'),\r\n\t\t\tescape : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.text(str).html();\r\n\t\t\t},\r\n\t\t\tstrip : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.empty().append($.parseHTML(str)).text();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// private variable\r\n\t\tvar vakata_dnd = {\r\n\t\t\telement\t: false,\r\n\t\t\ttarget\t: false,\r\n\t\t\tis_down\t: false,\r\n\t\t\tis_drag\t: false,\r\n\t\t\thelper\t: false,\r\n\t\t\thelper_w: 0,\r\n\t\t\tdata\t: false,\r\n\t\t\tinit_x\t: 0,\r\n\t\t\tinit_y\t: 0,\r\n\t\t\tscroll_l: 0,\r\n\t\t\tscroll_t: 0,\r\n\t\t\tscroll_e: false,\r\n\t\t\tscroll_i: false,\r\n\t\t\tis_touch: false\r\n\t\t};\r\n\t\t$.vakata.dnd = {\r\n\t\t\tsettings : {\r\n\t\t\t\tscroll_speed\t\t: 10,\r\n\t\t\t\tscroll_proximity\t: 20,\r\n\t\t\t\thelper_left\t\t\t: 5,\r\n\t\t\t\thelper_top\t\t\t: 10,\r\n\t\t\t\tthreshold\t\t\t: 5,\r\n\t\t\t\tthreshold_touch\t\t: 50\r\n\t\t\t},\r\n\t\t\t_trigger : function (event_name, e, data) {\r\n\t\t\t\tif (data === undefined) {\r\n\t\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\t}\r\n\t\t\t\tdata.event = e;\r\n\t\t\t\t$(document).triggerHandler(\"dnd_\" + event_name + \".vakata\", data);\r\n\t\t\t},\r\n\t\t\t_get : function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"data\"\t\t: vakata_dnd.data,\r\n\t\t\t\t\t\"element\"\t: vakata_dnd.element,\r\n\t\t\t\t\t\"helper\"\t: vakata_dnd.helper\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t_clean : function () {\r\n\t\t\t\tif(vakata_dnd.helper) { vakata_dnd.helper.remove(); }\r\n\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\tvakata_dnd = {\r\n\t\t\t\t\telement\t: false,\r\n\t\t\t\t\ttarget\t: false,\r\n\t\t\t\t\tis_down\t: false,\r\n\t\t\t\t\tis_drag\t: false,\r\n\t\t\t\t\thelper\t: false,\r\n\t\t\t\t\thelper_w: 0,\r\n\t\t\t\t\tdata\t: false,\r\n\t\t\t\t\tinit_x\t: 0,\r\n\t\t\t\t\tinit_y\t: 0,\r\n\t\t\t\t\tscroll_l: 0,\r\n\t\t\t\t\tscroll_t: 0,\r\n\t\t\t\t\tscroll_e: false,\r\n\t\t\t\t\tscroll_i: false,\r\n\t\t\t\t\tis_touch: false\r\n\t\t\t\t};\r\n\t\t\t\t$(document).off(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).off(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t},\r\n\t\t\t_scroll : function (init_only) {\r\n\t\t\t\tif(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {\r\n\t\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.scroll_i) {\r\n\t\t\t\t\tvakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(init_only === true) { return false; }\r\n\r\n\t\t\t\tvar i = vakata_dnd.scroll_e.scrollTop(),\r\n\t\t\t\t\tj = vakata_dnd.scroll_e.scrollLeft();\r\n\t\t\t\tvakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tvakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tif(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag causes an element to scroll\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_scroll.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {jQuery} event the element that is scrolling\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstart : function (e, data, html) {\r\n\t\t\t\tif(e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }\r\n\t\t\t\ttry {\r\n\t\t\t\t\te.currentTarget.unselectable = \"on\";\r\n\t\t\t\t\te.currentTarget.onselectstart = function() { return false; };\r\n\t\t\t\t\tif(e.currentTarget.style) {\r\n\t\t\t\t\t\te.currentTarget.style.touchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.msTouchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.MozUserSelect = \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(ignore) { }\r\n\t\t\t\tvakata_dnd.init_x\t= e.pageX;\r\n\t\t\t\tvakata_dnd.init_y\t= e.pageY;\r\n\t\t\t\tvakata_dnd.data\t\t= data;\r\n\t\t\t\tvakata_dnd.is_down\t= true;\r\n\t\t\t\tvakata_dnd.element\t= e.currentTarget;\r\n\t\t\t\tvakata_dnd.target\t= e.target;\r\n\t\t\t\tvakata_dnd.is_touch\t= e.type === \"touchstart\";\r\n\t\t\t\tif(html !== false) {\r\n\t\t\t\t\tvakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\r\n\t\t\t\t\t\t\"display\"\t\t: \"block\",\r\n\t\t\t\t\t\t\"margin\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"padding\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"position\"\t\t: \"absolute\",\r\n\t\t\t\t\t\t\"top\"\t\t\t: \"-2000px\",\r\n\t\t\t\t\t\t\"lineHeight\"\t: \"16px\",\r\n\t\t\t\t\t\t\"zIndex\"\t\t: \"10000\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(document).on(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).on(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tdrag : function (e) {\r\n\t\t\t\tif(e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.is_down) { return; }\r\n\t\t\t\tif(!vakata_dnd.is_drag) {\r\n\t\t\t\t\tif(\r\n\t\t\t\t\t\tMath.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||\r\n\t\t\t\t\t\tMath.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\t\t\tvakata_dnd.helper.appendTo(\"body\");\r\n\t\t\t\t\t\t\tvakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvakata_dnd.is_drag = true;\r\n\t\t\t\t\t\t$(vakata_dnd.target).one('click.vakata', false);\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered on the document when a drag starts\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t\t * @name dnd_start.vakata\r\n\t\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t\t * @param {Object} event the event that caused the start (probably mousemove)\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t$.vakata.dnd._trigger(\"start\", e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { return; }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar d  = false, w  = false,\r\n\t\t\t\t\tdh = false, wh = false,\r\n\t\t\t\t\tdw = false, ww = false,\r\n\t\t\t\t\tdt = false, dl = false,\r\n\t\t\t\t\tht = false, hl = false;\r\n\r\n\t\t\t\tvakata_dnd.scroll_t = 0;\r\n\t\t\t\tvakata_dnd.scroll_l = 0;\r\n\t\t\t\tvakata_dnd.scroll_e = false;\r\n\t\t\t\t$($(e.target).parentsUntil(\"body\").addBack().get().reverse())\r\n\t\t\t\t\t.filter(function () {\r\n\t\t\t\t\t\treturn\t(/^auto|scroll$/).test($(this).css(\"overflow\")) &&\r\n\t\t\t\t\t\t\t\t(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.each(function () {\r\n\t\t\t\t\t\tvar t = $(this), o = t.offset();\r\n\t\t\t\t\t\tif(this.scrollHeight > this.offsetHeight) {\r\n\t\t\t\t\t\t\tif(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\t\t\tif(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_t = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.scrollWidth > this.offsetWidth) {\r\n\t\t\t\t\t\t\tif(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\t\t\tif(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\t\tvakata_dnd.scroll_e = $(this);\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif(!vakata_dnd.scroll_e) {\r\n\t\t\t\t\td  = $(document); w = $(window);\r\n\t\t\t\t\tdh = d.height(); wh = w.height();\r\n\t\t\t\t\tdw = d.width(); ww = w.width();\r\n\t\t\t\t\tdt = d.scrollTop(); dl = d.scrollLeft();\r\n\t\t\t\t\tif(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_t = -1;  }\r\n\t\t\t\t\tif(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\tif(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\tif(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\tvakata_dnd.scroll_e = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }\r\n\r\n\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\tht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\r\n\t\t\t\t\thl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\r\n\t\t\t\t\tif(dh && ht + 25 > dh) { ht = dh - 50; }\r\n\t\t\t\t\tif(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }\r\n\t\t\t\t\tvakata_dnd.helper.css({\r\n\t\t\t\t\t\tleft\t: hl + \"px\",\r\n\t\t\t\t\t\ttop\t\t: ht + \"px\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when a drag is in progress\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin dnd\r\n\t\t\t\t * @name dnd_move.vakata\r\n\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t * @param {Object} event the event that caused this to trigger (most likely mousemove)\r\n\t\t\t\t */\r\n\t\t\t\t$.vakata.dnd._trigger(\"move\", e);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tstop : function (e) {\r\n\t\t\t\tif(e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag stops (the dragged element is dropped)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_stop.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {Object} event the event that caused the stop\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (e.target !== vakata_dnd.target) {\r\n\t\t\t\t\t\t$(vakata_dnd.target).off('click.vakata');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"stop\", e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(e.type === \"touchend\" && e.target === vakata_dnd.target) {\r\n\t\t\t\t\t\tvar to = setTimeout(function () { $(e.target).click(); }, 100);\r\n\t\t\t\t\t\t$(e.target).one('click', function() { if(to) { clearTimeout(to); } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the dnd plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"dnd\");\r\n\r\n\r\n/**\r\n * ### Massload plugin\r\n *\r\n * Adds massload functionality to jsTree, so that multiple nodes can be loaded in a single request (only useful with lazy loading).\r\n */\r\n\r\n\t/**\r\n\t * massload configuration\r\n\t *\r\n\t * It is possible to set this to a standard jQuery-like AJAX config.\r\n\t * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\r\n\t *\r\n\t * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\r\n\t *\r\n\t * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\r\n\t *\r\n\t *\t{\r\n\t *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\r\n\t *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\r\n\t *\t}\r\n\t * \r\n\t * @name $.jstree.defaults.massload\r\n\t * @plugin massload\r\n\t */\r\n\t$.jstree.defaults.massload = null;\r\n\t$.jstree.plugins.massload = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tthis._data.massload = {};\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t};\r\n\t\tthis._load_nodes = function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar s = this.settings.massload,\r\n\t\t\t\tnodesString = JSON.stringify(nodes),\r\n\t\t\t\ttoLoad = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\ti, j, dom;\r\n\t\t\tif (!is_callback) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {\r\n\t\t\t\t\t\ttoLoad.push(nodes[i]);\r\n\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\tdom.addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.massload = {};\r\n\t\t\t\tif (toLoad.length) {\r\n\t\t\t\t\tif($.isFunction(s)) {\r\n\t\t\t\t\t\treturn s.call(this, toLoad, $.proxy(function (data) {\r\n\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof s === 'object' && s && s.url) {\r\n\t\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\t\ts.url = s.url.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\t\ts.data = s.data.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t\t.done($.proxy(function (data,t,x) {\r\n\t\t\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t};\r\n\t\tthis._load_node = function (obj, callback) {\r\n\t\t\tvar data = this._data.massload[obj.id],\r\n\t\t\t\trslt = null, dom;\r\n\t\t\tif(data) {\r\n\t\t\t\trslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\ttypeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,\r\n\t\t\t\t\tfunction (status) { callback.call(this, status); }\r\n\t\t\t\t);\r\n\t\t\t\tdom = this.get_node(obj.id, true);\r\n\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t}\r\n\t\t\t\tdelete this._data.massload[obj.id];\r\n\t\t\t\treturn rslt;\r\n\t\t\t}\r\n\t\t\treturn parent._load_node.call(this, obj, callback);\r\n\t\t};\r\n\t};\r\n\r\n/**\r\n * ### Search plugin\r\n *\r\n * Adds search functionality to jsTree.\r\n */\r\n\r\n\t/**\r\n\t * stores all defaults for the search plugin\r\n\t * @name $.jstree.defaults.search\r\n\t * @plugin search\r\n\t */\r\n\t$.jstree.defaults.search = {\r\n\t\t/**\r\n\t\t * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.\r\n\t\t *\r\n\t\t * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\r\n\t\t * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to\r\n\t\t * @name $.jstree.defaults.search.ajax\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tajax : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.fuzzy\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tfuzzy : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.case_sensitive\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches : false,\r\n\t\t/**\r\n\t\t * Indicates if the children of matched element are shown (when show_only_matches is true)\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches_children\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches_children : false,\r\n\t\t/**\r\n\t\t * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\r\n\t\t * @name $.jstree.defaults.search.close_opened_onclear\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tclose_opened_onclear : true,\r\n\t\t/**\r\n\t\t * Indicates if only leaf nodes should be included in search results. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_leaves_only\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_leaves_only : false,\r\n\t\t/**\r\n\t\t * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\r\n\t\t * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_callback\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_callback : false\r\n\t};\r\n\r\n\t$.jstree.plugins.search = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.som = false;\r\n\t\t\tthis._data.search.smc = false;\r\n\t\t\tthis._data.search.hdn = [];\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tvar m = this._model.data, i, j, p = [], k, l;\r\n\t\t\t\t\t\t\tfor(i = 0, j = data.res.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(m[data.res[i]] && !m[data.res[i]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\tp.push(data.res[i]);\r\n\t\t\t\t\t\t\t\t\tp = p.concat(m[data.res[i]].parents);\r\n\t\t\t\t\t\t\t\t\tif(this._data.search.smc) {\r\n\t\t\t\t\t\t\t\t\t\tfor (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tp.push(m[data.res[i]].children_d[k]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);\r\n\t\t\t\t\t\t\tthis._data.search.hdn = this.hide_all(true);\r\n\t\t\t\t\t\t\tthis.show_node(p, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"clear_search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tthis.show_node(this._data.search.hdn, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to search the tree nodes for a given string\r\n\t\t * @name search(str [, skip_async])\r\n\t\t * @param {String} str the search string\r\n\t\t * @param {Boolean} skip_async if set to true server will not be queried even if configured\r\n\t\t * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)\r\n\t\t * @param {mixed} inside an optional node to whose children to limit the search\r\n\t\t * @param {Boolean} append if set to true the results of this search are appended to the previous search\r\n\t\t * @plugin search\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {\r\n\t\t\tif(str === false || $.trim(str.toString()) === \"\") {\r\n\t\t\t\treturn this.clear_search();\r\n\t\t\t}\r\n\t\t\tinside = this.get_node(inside);\r\n\t\t\tinside = inside && inside.id ? inside.id : null;\r\n\t\t\tstr = str.toString();\r\n\t\t\tvar s = this.settings.search,\r\n\t\t\t\ta = s.ajax ? s.ajax : false,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = null,\r\n\t\t\t\tr = [],\r\n\t\t\t\tp = [], i, j;\r\n\t\t\tif(this._data.search.res.length && !append) {\r\n\t\t\t\tthis.clear_search();\r\n\t\t\t}\r\n\t\t\tif(show_only_matches === undefined) {\r\n\t\t\t\tshow_only_matches = s.show_only_matches;\r\n\t\t\t}\r\n\t\t\tif(show_only_matches_children === undefined) {\r\n\t\t\t\tshow_only_matches_children = s.show_only_matches_children;\r\n\t\t\t}\r\n\t\t\tif(!skip_async && a !== false) {\r\n\t\t\t\tif($.isFunction(a)) {\r\n\t\t\t\t\treturn a.call(this, str, $.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this), inside);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ta = $.extend({}, a);\r\n\t\t\t\t\tif(!a.data) { a.data = {}; }\r\n\t\t\t\t\ta.data.str = str;\r\n\t\t\t\t\tif(inside) {\r\n\t\t\t\t\t\ta.data.inside = inside;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this._data.search.lastRequest) {\r\n\t\t\t\t\t\tthis._data.search.lastRequest.abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._data.search.lastRequest = $.ajax(a)\r\n\t\t\t\t\t\t.fail($.proxy(function () {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };\r\n\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.done($.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\treturn this._data.search.lastRequest;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!append) {\r\n\t\t\t\tthis._data.search.str = str;\r\n\t\t\t\tthis._data.search.dom = $();\r\n\t\t\t\tthis._data.search.res = [];\r\n\t\t\t\tthis._data.search.opn = [];\r\n\t\t\t\tthis._data.search.som = show_only_matches;\r\n\t\t\t\tthis._data.search.smc = show_only_matches_children;\r\n\t\t\t}\r\n\r\n\t\t\tf = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });\r\n\t\t\t$.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {\r\n\t\t\t\tvar v = m[i];\r\n\t\t\t\tif(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {\r\n\t\t\t\t\tr.push(i);\r\n\t\t\t\t\tp = p.concat(v.parents);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(r.length) {\r\n\t\t\t\tp = $.vakata.array_unique(p);\r\n\t\t\t\tfor(i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\t\tif(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {\r\n\t\t\t\t\t\tthis._data.search.opn.push(p[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!append) {\r\n\t\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\r\n\t\t\t\t\tthis._data.search.res = r;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #'))));\r\n\t\t\t\t\tthis._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes\r\n\t\t\t * @param {String} str the search string\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to clear the last search (removes classes and shows all nodes if filtering is on)\r\n\t\t * @name clear_search()\r\n\t\t * @plugin search\r\n\t\t * @trigger clear_search.jstree\r\n\t\t */\r\n\t\tthis.clear_search = function () {\r\n\t\t\tif(this.settings.search.close_opened_onclear) {\r\n\t\t\t\tthis.close_node(this._data.search.opn, 0);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name clear_search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\r\n\t\t\t * @param {String} str the search string (the last search string)\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });\r\n\t\t\tif(this._data.search.res.length) {\r\n\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {\r\n\t\t\t\t\treturn \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&');\r\n\t\t\t\t}).join(', #')));\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\r\n\t\t\t}\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t};\r\n\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tif($.inArray(obj.id, this._data.search.res) !== -1) {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.className += ' jstree-search';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t// from http://kiro.me/projects/fuse.html\r\n\t\t$.vakata.search = function(pattern, txt, options) {\r\n\t\t\toptions = options || {};\r\n\t\t\toptions = $.extend({}, $.vakata.search.defaults, options);\r\n\t\t\tif(options.fuzzy !== false) {\r\n\t\t\t\toptions.fuzzy = true;\r\n\t\t\t}\r\n\t\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\t\tvar MATCH_LOCATION\t= options.location,\r\n\t\t\t\tMATCH_DISTANCE\t= options.distance,\r\n\t\t\t\tMATCH_THRESHOLD\t= options.threshold,\r\n\t\t\t\tpatternLen = pattern.length,\r\n\t\t\t\tmatchmask, pattern_alphabet, match_bitapScore, search;\r\n\t\t\tif(patternLen > 32) {\r\n\t\t\t\toptions.fuzzy = false;\r\n\t\t\t}\r\n\t\t\tif(options.fuzzy) {\r\n\t\t\t\tmatchmask = 1 << (patternLen - 1);\r\n\t\t\t\tpattern_alphabet = (function () {\r\n\t\t\t\t\tvar mask = {},\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn mask;\r\n\t\t\t\t}());\r\n\t\t\t\tmatch_bitapScore = function (e, x) {\r\n\t\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tsearch = function (text) {\r\n\t\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\t\tscore: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tif(!options.fuzzy) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\t\tscore: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tvar i, j,\r\n\t\t\t\t\ttextLen = text.length,\r\n\t\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\t\tbinMin, binMid,\r\n\t\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\t\tscore = 1,\r\n\t\t\t\t\tlocations = [];\r\n\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbestLoc = -1;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tbinMin = 0;\r\n\t\t\t\t\tbinMid = binMax;\r\n\t\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\t\trd = new Array(finish + 2);\r\n\t\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastRd = rd;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\t\tscore: score\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t\t};\r\n\t\t$.vakata.search.defaults = {\r\n\t\t\tlocation : 0,\r\n\t\t\tdistance : 100,\r\n\t\t\tthreshold : 0.6,\r\n\t\t\tfuzzy : false,\r\n\t\t\tcaseSensitive : false\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the search plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"search\");\r\n\r\n\r\n/**\r\n * ### Sort plugin\r\n *\r\n * Automatically sorts all siblings in the tree according to a sorting function.\r\n */\r\n\r\n\t/**\r\n\t * the settings function used to sort the nodes.\r\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\r\n\t * @name $.jstree.defaults.sort\r\n\t * @plugin sort\r\n\t */\r\n\t$.jstree.defaults.sort = function (a, b) {\r\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\r\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\r\n\t};\r\n\t$.jstree.plugins.sort = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"model.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to sort a node's children\r\n\t\t * @private\r\n\t\t * @name sort(obj [, deep])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\r\n\t\t * @plugin sort\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.sort = function (obj, deep) {\r\n\t\t\tvar i, j;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj && obj.children && obj.children.length) {\r\n\t\t\t\tobj.children.sort($.proxy(this.settings.sort, this));\r\n\t\t\t\tif(deep) {\r\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// include the sort plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"sort\");\r\n\r\n/**\r\n * ### State plugin\r\n *\r\n * Saves the state of the tree (selected nodes, opened nodes) on the user's computer using available options (localStorage, cookies, etc)\r\n */\r\n\r\n\tvar to = false;\r\n\t/**\r\n\t * stores all defaults for the state plugin\r\n\t * @name $.jstree.defaults.state\r\n\t * @plugin state\r\n\t */\r\n\t$.jstree.defaults.state = {\r\n\t\t/**\r\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\r\n\t\t * @name $.jstree.defaults.state.key\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tkey\t\t: 'jstree',\r\n\t\t/**\r\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\r\n\t\t * @name $.jstree.defaults.state.events\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\r\n\t\t/**\r\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\r\n\t\t * @name $.jstree.defaults.state.ttl\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tttl\t\t: false,\r\n\t\t/**\r\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\r\n\t\t * @name $.jstree.defaults.state.filter\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tfilter\t: false\r\n\t};\r\n\t$.jstree.plugins.state = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tvar bind = $.proxy(function () {\r\n\t\t\t\tthis.element.on(this.settings.state.events, $.proxy(function () {\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\tto = setTimeout($.proxy(function () { this.save_state(); }, this), 100);\r\n\t\t\t\t}, this));\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name state_ready.jstree\r\n\t\t\t\t * @plugin state\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('state_ready');\r\n\t\t\t}, this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"ready.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\r\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * save the state\r\n\t\t * @name save_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.save_state = function () {\r\n\t\t\tvar st = { 'state' : this.get_state(), 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\r\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\r\n\t\t};\r\n\t\t/**\r\n\t\t * restore the state from the user's computer\r\n\t\t * @name restore_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.restore_state = function () {\r\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\r\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\r\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\r\n\t\t\tif(!!k && k.state) { k = k.state; }\r\n\t\t\tif(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\r\n\t\t\tif(!!k) {\r\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });\r\n\t\t\t\tthis.set_state(k);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * clear the state on the user's computer\r\n\t\t * @name clear_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.clear_state = function () {\r\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\r\n\t\t};\r\n\t};\r\n\r\n\t(function ($, undefined) {\r\n\t\t$.vakata.storage = {\r\n\t\t\t// simply specifying the functions in FF throws an error\r\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\r\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\r\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the state plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"state\");\r\n\r\n/**\r\n * ### Types plugin\r\n *\r\n * Makes it possible to add predefined types for groups of nodes, which make it possible to easily control nesting rules and icon for each group.\r\n */\r\n\r\n\t/**\r\n\t * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\r\n\t *\r\n\t * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\r\n\t * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\r\n\t * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\r\n\t * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\r\n\t * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)\r\n\t * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)\r\n\t *\r\n\t * There are two predefined types:\r\n\t *\r\n\t * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\r\n\t * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\r\n\t *\r\n\t * @name $.jstree.defaults.types\r\n\t * @plugin types\r\n\t */\r\n\t$.jstree.defaults.types = {\r\n\t\t'default' : {}\r\n\t};\r\n\t$.jstree.defaults.types[$.jstree.root] = {};\r\n\r\n\t$.jstree.plugins.types = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(options && options.types && options.types['default']) {\r\n\t\t\t\tfor(i in options.types) {\r\n\t\t\t\t\tif(i !== \"default\" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tfor(j in options.types['default']) {\r\n\t\t\t\t\t\t\tif(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\r\n\t\t\t\t\t\t\t\toptions.types[i][j] = options.types['default'][j];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tparent.refresh.call(this, skip_loading, forget_state);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tthis.element\r\n\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\tt = this.settings.types,\r\n\t\t\t\t\t\t\ti, j, c = 'default', k;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tc = 'default';\r\n\t\t\t\t\t\t\tif(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].original.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].data.jstree.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dpc[i]].type = c;\r\n\t\t\t\t\t\t\tif(m[dpc[i]].icon === true && t[c].icon !== undefined) {\r\n\t\t\t\t\t\t\t\tm[dpc[i]].icon = t[c].icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].li_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr[k] = t[c].li_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].a_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr[k] = t[c].a_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['href'] = t[c].a_attr['href'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tm[$.jstree.root].type = $.jstree.root;\r\n\t\t\t\t\t}, this));\r\n\t\t\tparent.bind.call(this);\r\n\t\t};\r\n\t\tthis.get_json = function (obj, options, flat) {\r\n\t\t\tvar i, j,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\topt = options ? $.extend(true, {}, options, {no_id:false}) : {},\r\n\t\t\t\ttmp = parent.get_json.call(this, obj, opt, flat);\r\n\t\t\tif(tmp === false) { return false; }\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\r\n\t\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\t\tdelete tmp[i].id;\r\n\t\t\t\t\t\tif(tmp[i].li_attr && tmp[i].li_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].li_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp[i].a_attr && tmp[i].a_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].a_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\r\n\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\ttmp = this._delete_ids(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis._delete_ids = function (tmp) {\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(var i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i] = this._delete_ids(tmp[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\tdelete tmp.id;\r\n\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.children && $.isArray(tmp.children)) {\r\n\t\t\t\ttmp.children = this._delete_ids(tmp.children);\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar m = obj && obj.id ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;\r\n\t\t\tm = m && m._model && m._model.data ? m._model.data : null;\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\tif(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {\r\n\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\tif(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray((obj.type || 'default'), tmp.valid_children) === -1) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m && obj.children_d && obj.parents) {\r\n\t\t\t\t\t\t\td = 0;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\td = Math.max(d, m[obj.children_d[i]].parents.length);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\td = d - obj.parents.length + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(d <= 0 || d === undefined) { d = 1; }\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tif(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\t\td++;\r\n\t\t\t\t\t\t} while(par);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type settings object for a node\r\n\t\t * @name get_rules(obj)\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @return {Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_rules = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar tmp = this.get_type(obj, true);\r\n\t\t\tif(tmp.max_depth === undefined) { tmp.max_depth = -1; }\r\n\t\t\tif(tmp.max_children === undefined) { tmp.max_children = -1; }\r\n\t\t\tif(tmp.valid_children === undefined) { tmp.valid_children = -1; }\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type string or settings object for a node\r\n\t\t * @name get_type(obj [, rules])\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\r\n\t\t * @return {String|Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_type = function (obj, rules) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to change a node's type\r\n\t\t * @name set_type(obj, type)\r\n\t\t * @param {mixed} obj the node to change\r\n\t\t * @param {String} type the new type\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.set_type = function (obj, type) {\r\n\t\t\tvar m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_type(obj[t1], type);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tt = this.settings.types;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!t[type] || !obj) { return false; }\r\n\t\t\td = this.get_node(obj, true);\r\n\t\t\tif (d && d.length) {\r\n\t\t\t\ta = d.children('.jstree-anchor');\r\n\t\t\t}\r\n\t\t\told_type = obj.type;\r\n\t\t\told_icon = this.get_icon(obj);\r\n\t\t\tobj.type = type;\r\n\t\t\tif(old_icon === true || !t[old_type] || (t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {\r\n\t\t\t\tthis.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\r\n\t\t\t}\r\n\r\n\t\t\t// remove old type props\r\n\t\t\tif(t[old_type] && t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].li_attr) {\r\n\t\t\t\t\tif (t[old_type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');\r\n\t\t\t\t\t\t\tif (d) { d.removeClass(t[old_type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = null;\r\n\t\t\t\t\t\t\tif (d) { d.removeAttr(k); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[old_type] && t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].a_attr) {\r\n\t\t\t\t\tif (t[old_type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');\r\n\t\t\t\t\t\t\tif (a) { a.removeClass(t[old_type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {\r\n\t\t\t\t\t\t\tif (k === 'href') {\r\n\t\t\t\t\t\t\t\tm[obj.id].a_attr[k] = '#';\r\n\t\t\t\t\t\t\t\tif (a) { a.attr('href', '#'); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdelete m[obj.id].a_attr[k];\r\n\t\t\t\t\t\t\t\tif (a) { a.removeAttr(k); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add new props\r\n\t\t\tif(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].li_attr) {\r\n\t\t\t\t\tif (t[type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = t[type].li_attr[k];\r\n\t\t\t\t\t\t\tif (d) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\td.addClass(t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\td.attr(k, t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];\r\n\t\t\t\t\t\t\tif (d) { d.addClass(t[type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].a_attr) {\r\n\t\t\t\t\tif (t[type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr[k] = t[type].a_attr[k];\r\n\t\t\t\t\t\t\tif (a) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\ta.addClass(t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ta.attr(k, t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'href' && m[obj.id].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['href'] = t[type].a_attr['href'];\r\n\t\t\t\t\t\t\tif (a) { a.attr('href', t[type].a_attr['href']); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];\r\n\t\t\t\t\t\t\tif (a) { a.addClass(t[type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\t// include the types plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"types\");\r\n\r\n\r\n/**\r\n * ### Unique plugin\r\n *\r\n * Enforces that no nodes with the same name can coexist as siblings.\r\n */\r\n\r\n\t/**\r\n\t * stores all defaults for the unique plugin\r\n\t * @name $.jstree.defaults.unique\r\n\t * @plugin unique\r\n\t */\r\n\t$.jstree.defaults.unique = {\r\n\t\t/**\r\n\t\t * Indicates if the comparison should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.case_sensitive\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\r\n\t\t * @name $.jstree.defaults.unique.duplicate\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tduplicate : function (name, counter) {\r\n\t\t\treturn name + ' (' + counter + ')';\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.unique = function (options, parent) {\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tif(!par || !par.children) { return true; }\r\n\t\t\tvar n = chk === \"rename_node\" ? pos : obj.text,\r\n\t\t\t\tc = [],\r\n\t\t\t\ts = this.settings.unique.case_sensitive,\r\n\t\t\t\tm = this._model.data, i, j;\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\tc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\r\n\t\t\t}\r\n\t\t\tif(!s) { n = n.toLowerCase(); }\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"delete_node\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase \"rename_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1 || (obj.text && obj.text[ s ? 'toString' : 'toLowerCase']() === n));\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\t\ti = ( (obj.parent === par.id && (!more || !more.is_multi)) || $.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tthis.create_node = function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(!node || node.text === undefined) {\r\n\t\t\t\tif(par === null) {\r\n\t\t\t\t\tpar = $.jstree.root;\r\n\t\t\t\t}\r\n\t\t\t\tpar = this.get_node(par);\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tif(!node) { node = {}; }\r\n\t\t\t\tvar tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, cb = this.settings.unique.duplicate;\r\n\t\t\t\tn = tmp = this.get_string('New node');\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\tdpc.push(s ? m[par.children[i]].text : m[par.children[i]].text.toLowerCase());\r\n\t\t\t\t}\r\n\t\t\t\ti = 1;\r\n\t\t\t\twhile($.inArray(s ? n : n.toLowerCase(), dpc) !== -1) {\r\n\t\t\t\t\tn = cb.call(this, tmp, (++i)).toString();\r\n\t\t\t\t}\r\n\t\t\t\tnode.text = n;\r\n\t\t\t}\r\n\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the unique plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"unique\");\r\n\r\n\r\n/**\r\n * ### Wholerow plugin\r\n *\r\n * Makes each node appear block level. Making selection easier. May cause slow down for large trees in old browsers.\r\n */\r\n\r\n\tvar div = document.createElement('DIV');\r\n\tdiv.setAttribute('unselectable','on');\r\n\tdiv.setAttribute('role','presentation');\r\n\tdiv.className = 'jstree-wholerow';\r\n\tdiv.innerHTML = '&#160;';\r\n\t$.jstree.plugins.wholerow = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on('ready.jstree set_state.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tthis.hide_dots();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\t//div.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-wholerow-ul');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"deselect_all.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"changed.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\tvar tmp = false, i, j;\r\n\t\t\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = this.get_node(data.selected[i], true);\r\n\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\ttmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"open_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(e.type === \"hover_node\" && this.is_disabled(data.node)) { return; }\r\n\t\t\t\t\t\tthis.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\"?\"addClass\":\"removeClass\"]('jstree-wholerow-hovered');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-wholerow\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif (this._data.contextmenu) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });\r\n\t\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t/*!\r\n\t\t\t\t.on(\"mousedown.jstree touchstart.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\tif(e.target === e.currentTarget) {\r\n\t\t\t\t\t\t\tvar a = $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\");\r\n\t\t\t\t\t\t\te.target = a[0];\r\n\t\t\t\t\t\t\ta.trigger(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t*/\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('dblclick', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tif(!this.is_disabled(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseleave.jstree\", \".jstree-node\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.wholerow) {\r\n\t\t\t\tthis.element.find(\".jstree-wholerow\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar tmp = div.cloneNode(true);\r\n\t\t\t\t//tmp.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\tif($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }\r\n\t\t\t\tif(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }\r\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[0]);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\t// include the wholerow plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"wholerow\");\r\n\tif(document.registerElement && Object && Object.create) {\r\n\t\tvar proto = Object.create(HTMLElement.prototype);\r\n\t\tproto.createdCallback = function () {\r\n\t\t\tvar c = { core : {}, plugins : [] }, i;\r\n\t\t\tfor(i in $.jstree.plugins) {\r\n\t\t\t\tif($.jstree.plugins.hasOwnProperty(i) && this.attributes[i]) {\r\n\t\t\t\t\tc.plugins.push(i);\r\n\t\t\t\t\tif(this.getAttribute(i) && JSON.parse(this.getAttribute(i))) {\r\n\t\t\t\t\t\tc[i] = JSON.parse(this.getAttribute(i));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(i in $.jstree.defaults.core) {\r\n\t\t\t\tif($.jstree.defaults.core.hasOwnProperty(i) && this.attributes[i]) {\r\n\t\t\t\t\tc.core[i] = JSON.parse(this.getAttribute(i)) || this.getAttribute(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$(this).jstree(c);\r\n\t\t};\r\n\t\t// proto.attributeChangedCallback = function (name, previous, value) { };\r\n\t\ttry {\r\n\t\t\tdocument.registerElement(\"vakata-jstree\", { prototype: proto });\r\n\t\t} catch(ignore) { }\r\n\t}\r\n\r\n}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

/******/ });